
main_drive_f4_auto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08006fc4  08006fc4  00007fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071e8  080071e8  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  080071e8  080071e8  000081e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071f0  080071f0  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071f0  080071f0  000081f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071f4  080071f4  000081f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080071f8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009068  2**0
                  CONTENTS
 10 .bss          00000644  20000068  20000068  00009068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006ac  200006ac  00009068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001368d  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002973  00000000  00000000  0001c725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  0001f098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbb  00000000  00000000  0001ffb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004909  00000000  00000000  00020b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013cc1  00000000  00000000  00025474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddbf9  00000000  00000000  00039135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00116d2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b10  00000000  00000000  00116d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0011b884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fac 	.word	0x08006fac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006fac 	.word	0x08006fac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <TIM3_Init>:

int temp_x,temp_y;
uint8_t temp1 = 100,temp2 = 100;

void TIM3_Init(void)	///50Hz PWM (4 pin: 2 BLDC, !
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08e      	sub	sp, #56	@ 0x38
 8000574:	af00      	add	r7, sp, #0


	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000576:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
 800059c:	615a      	str	r2, [r3, #20]
 800059e:	619a      	str	r2, [r3, #24]


	  htim3.Instance = TIM3;
 80005a0:	4b45      	ldr	r3, [pc, #276]	@ (80006b8 <TIM3_Init+0x148>)
 80005a2:	4a46      	ldr	r2, [pc, #280]	@ (80006bc <TIM3_Init+0x14c>)
 80005a4:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 719;
 80005a6:	4b44      	ldr	r3, [pc, #272]	@ (80006b8 <TIM3_Init+0x148>)
 80005a8:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80005ac:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ae:	4b42      	ldr	r3, [pc, #264]	@ (80006b8 <TIM3_Init+0x148>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 2000;
 80005b4:	4b40      	ldr	r3, [pc, #256]	@ (80006b8 <TIM3_Init+0x148>)
 80005b6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80005ba:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005bc:	4b3e      	ldr	r3, [pc, #248]	@ (80006b8 <TIM3_Init+0x148>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c2:	4b3d      	ldr	r3, [pc, #244]	@ (80006b8 <TIM3_Init+0x148>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005c8:	483b      	ldr	r0, [pc, #236]	@ (80006b8 <TIM3_Init+0x148>)
 80005ca:	f002 fdb1 	bl	8003130 <HAL_TIM_Base_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <TIM3_Init+0x68>
		  {
			Error_Handler();
 80005d4:	f000 fec0 	bl	8001358 <Error_Handler>
		  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005e2:	4619      	mov	r1, r3
 80005e4:	4834      	ldr	r0, [pc, #208]	@ (80006b8 <TIM3_Init+0x148>)
 80005e6:	f003 fb9f 	bl	8003d28 <HAL_TIM_ConfigClockSource>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <TIM3_Init+0x84>
		  {
			Error_Handler();
 80005f0:	f000 feb2 	bl	8001358 <Error_Handler>
		  }
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005f4:	4830      	ldr	r0, [pc, #192]	@ (80006b8 <TIM3_Init+0x148>)
 80005f6:	f002 ff1c 	bl	8003432 <HAL_TIM_PWM_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <TIM3_Init+0x94>
		  {
			Error_Handler();
 8000600:	f000 feaa 	bl	8001358 <Error_Handler>
		  }
	  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000604:	482c      	ldr	r0, [pc, #176]	@ (80006b8 <TIM3_Init+0x148>)
 8000606:	f002 febb 	bl	8003380 <HAL_TIM_OC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <TIM3_Init+0xa4>
		  {
			Error_Handler();
 8000610:	f000 fea2 	bl	8001358 <Error_Handler>
		  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4619      	mov	r1, r3
 8000622:	4825      	ldr	r0, [pc, #148]	@ (80006b8 <TIM3_Init+0x148>)
 8000624:	f003 ff80 	bl	8004528 <HAL_TIMEx_MasterConfigSynchronization>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <TIM3_Init+0xc2>
		  {
			Error_Handler();
 800062e:	f000 fe93 	bl	8001358 <Error_Handler>
		  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000632:	2360      	movs	r3, #96	@ 0x60
 8000634:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = 0; /// 100 200(min max)
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	481b      	ldr	r0, [pc, #108]	@ (80006b8 <TIM3_Init+0x148>)
 800064a:	f003 faab 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <TIM3_Init+0xe8>
		  {
			Error_Handler();
 8000654:	f000 fe80 	bl	8001358 <Error_Handler>
		  }
	  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2204      	movs	r2, #4
 800065c:	4619      	mov	r1, r3
 800065e:	4816      	ldr	r0, [pc, #88]	@ (80006b8 <TIM3_Init+0x148>)
 8000660:	f003 fa44 	bl	8003aec <HAL_TIM_OC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <TIM3_Init+0xfe>
		  {
			Error_Handler();
 800066a:	f000 fe75 	bl	8001358 <Error_Handler>
		  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2208      	movs	r2, #8
 8000672:	4619      	mov	r1, r3
 8000674:	4810      	ldr	r0, [pc, #64]	@ (80006b8 <TIM3_Init+0x148>)
 8000676:	f003 fa95 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <TIM3_Init+0x114>
		  {
			Error_Handler();
 8000680:	f000 fe6a 	bl	8001358 <Error_Handler>
		  }
	  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	220c      	movs	r2, #12
 8000688:	4619      	mov	r1, r3
 800068a:	480b      	ldr	r0, [pc, #44]	@ (80006b8 <TIM3_Init+0x148>)
 800068c:	f003 fa2e 	bl	8003aec <HAL_TIM_OC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <TIM3_Init+0x12a>
		  {
			Error_Handler();
 8000696:	f000 fe5f 	bl	8001358 <Error_Handler>
		  }

	  HAL_TIM_MspPostInit(&htim3);
 800069a:	4807      	ldr	r0, [pc, #28]	@ (80006b8 <TIM3_Init+0x148>)
 800069c:	f001 f9c0 	bl	8001a20 <HAL_TIM_MspPostInit>

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <TIM3_Init+0x148>)
 80006a4:	f002 ff14 	bl	80034d0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	4803      	ldr	r0, [pc, #12]	@ (80006b8 <TIM3_Init+0x148>)
 80006ac:	f002 ff10 	bl	80034d0 <HAL_TIM_PWM_Start>
}
 80006b0:	bf00      	nop
 80006b2:	3738      	adds	r7, #56	@ 0x38
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000484 	.word	0x20000484
 80006bc:	40000400 	.word	0x40000400

080006c0 <MX_TIM4_Init>:
#include "delay.h"

extern TIM_HandleTypeDef htim4,htim14;
extern uint32_t time_run;
void MX_TIM4_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0


//50ms
  htim4.Instance = TIM4;
 80006c4:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_TIM4_Init+0x48>)
 80006c6:	4a11      	ldr	r2, [pc, #68]	@ (800070c <MX_TIM4_Init+0x4c>)
 80006c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_TIM4_Init+0x48>)
 80006cc:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80006d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <MX_TIM4_Init+0x48>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_TIM4_Init+0x48>)
 80006da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80006de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_TIM4_Init+0x48>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <MX_TIM4_Init+0x48>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80006ec:	4806      	ldr	r0, [pc, #24]	@ (8000708 <MX_TIM4_Init+0x48>)
 80006ee:	f002 fd1f 	bl	8003130 <HAL_TIM_Base_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM4_Init+0x3c>
  {
    Error_Handler();
 80006f8:	f000 fe2e 	bl	8001358 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80006fc:	4802      	ldr	r0, [pc, #8]	@ (8000708 <MX_TIM4_Init+0x48>)
 80006fe:	f001 f98f 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200003a4 	.word	0x200003a4
 800070c:	40000800 	.word	0x40000800

08000710 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a09      	ldr	r2, [pc, #36]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d10c      	bne.n	800073c <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		time_run++;
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800072a:	6013      	str	r3, [r2, #0]
		RUN_ABLE = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 800072c:	2120      	movs	r1, #32
 800072e:	4807      	ldr	r0, [pc, #28]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000730:	f002 f874 	bl	800281c <HAL_GPIO_ReadPin>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800073a:	701a      	strb	r2, [r3, #0]
	}
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40000800 	.word	0x40000800
 8000748:	20000274 	.word	0x20000274
 800074c:	40020c00 	.word	0x40020c00
 8000750:	2000038c 	.word	0x2000038c

08000754 <delay_us>:
{
	return time_run*50;
}

void delay_us(uint16_t us)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim14,0);
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <delay_us+0x30>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24

//	uint16_t temp = __HAL_TIM_GET_COUNTER(&htim14);
	while(__HAL_TIM_GET_COUNTER(&htim14) < us);
 8000766:	bf00      	nop
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <delay_us+0x30>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	429a      	cmp	r2, r3
 8000772:	d3f9      	bcc.n	8000768 <delay_us+0x14>

}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	200005cc 	.word	0x200005cc

08000788 <delay_ms>:
void delay_ms(uint16_t ms)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	80fb      	strh	r3, [r7, #6]
    do {
        for (uint32_t i = 0; i < ms; i++) {
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	e006      	b.n	80007a6 <delay_ms+0x1e>
            delay_us(1000);
 8000798:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800079c:	f7ff ffda 	bl	8000754 <delay_us>
        for (uint32_t i = 0; i < ms; i++) {
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3301      	adds	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d3f4      	bcc.n	8000798 <delay_ms+0x10>
        }
    } while (0);
}
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_TIM14_Init+0x44>)
 80007be:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <MX_TIM14_Init+0x48>)
 80007c0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 71;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_TIM14_Init+0x44>)
 80007c4:	2247      	movs	r2, #71	@ 0x47
 80007c6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_TIM14_Init+0x44>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_TIM14_Init+0x44>)
 80007d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_TIM14_Init+0x44>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <MX_TIM14_Init+0x44>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80007e2:	4806      	ldr	r0, [pc, #24]	@ (80007fc <MX_TIM14_Init+0x44>)
 80007e4:	f002 fca4 	bl	8003130 <HAL_TIM_Base_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80007ee:	f000 fdb3 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  HAL_TIM_Base_Start(&htim14);
 80007f2:	4802      	ldr	r0, [pc, #8]	@ (80007fc <MX_TIM14_Init+0x44>)
 80007f4:	f002 fcec 	bl	80031d0 <HAL_TIM_Base_Start>
  /* USER CODE END TIM14_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200005cc 	.word	0x200005cc
 8000800:	40002000 	.word	0x40002000

08000804 <MX_USART1_UART_Init>:
extern volatile int MotorSpeed[5];
extern volatile uint32_t countnn;


void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0


  huart1.Instance = USART1;
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <MX_USART1_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000810:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 800083c:	f003 ff56 	bl	80046ec <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 fd87 	bl	8001358 <Error_Handler>
  }

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200002dc 	.word	0x200002dc
 8000854:	40011000 	.word	0x40011000

08000858 <split_array>:

void split_array(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0



     // Mảng để lưu các giá trị
    char *token;
    char delim[] = ","; // Ký tự phân tách giữa các giá trị
 800085e:	232c      	movs	r3, #44	@ 0x2c
 8000860:	80bb      	strh	r3, [r7, #4]
    int i = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]

    // Sử dụng strtok để tách chuỗi
    token = strtok(data, delim);
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4619      	mov	r1, r3
 800086a:	480f      	ldr	r0, [pc, #60]	@ (80008a8 <split_array+0x50>)
 800086c:	f004 fff0 	bl	8005850 <strtok>
 8000870:	60f8      	str	r0, [r7, #12]

    // Duyệt qua các phần tử đã được tách
    while (token != NULL) {
 8000872:	e011      	b.n	8000898 <split_array+0x40>
        sscanf(token, "%d", &values[i]); // Chuyển đổi chuỗi thành số nguyên và lưu vào mảng
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4a0c      	ldr	r2, [pc, #48]	@ (80008ac <split_array+0x54>)
 800087a:	4413      	add	r3, r2
 800087c:	461a      	mov	r2, r3
 800087e:	490c      	ldr	r1, [pc, #48]	@ (80008b0 <split_array+0x58>)
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f004 ff6d 	bl	8005760 <siscanf>
        i++;
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	3301      	adds	r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
        token = strtok(NULL, delim); // Tiếp tục tách chuỗi
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	2000      	movs	r0, #0
 8000892:	f004 ffdd 	bl	8005850 <strtok>
 8000896:	60f8      	str	r0, [r7, #12]
    while (token != NULL) {
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1ea      	bne.n	8000874 <split_array+0x1c>
    }

}
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000338 	.word	0x20000338
 80008ac:	200001dc 	.word	0x200001dc
 80008b0:	08006fc4 	.word	0x08006fc4

080008b4 <TIM5_Init>:
void TIM5_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	@ 0x30
 80008b8:	af00      	add	r7, sp, #0



  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
  TIM_Encoder_InitTypeDef encoder_init = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2224      	movs	r2, #36	@ 0x24
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 ffb7 	bl	800583e <memset>

  htim5.Instance = TIM5;
 80008d0:	4b28      	ldr	r3, [pc, #160]	@ (8000974 <TIM5_Init+0xc0>)
 80008d2:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <TIM5_Init+0xc4>)
 80008d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80008d6:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <TIM5_Init+0xc0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <TIM5_Init+0xc0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80008e2:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <TIM5_Init+0xc0>)
 80008e4:	f04f 32ff 	mov.w	r2, #4294967295
 80008e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <TIM5_Init+0xc0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <TIM5_Init+0xc0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80008f6:	481f      	ldr	r0, [pc, #124]	@ (8000974 <TIM5_Init+0xc0>)
 80008f8:	f002 fd9b 	bl	8003432 <HAL_TIM_PWM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <TIM5_Init+0x52>
  {
    Error_Handler();
 8000902:	f000 fd29 	bl	8001358 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800090e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000912:	4619      	mov	r1, r3
 8000914:	4817      	ldr	r0, [pc, #92]	@ (8000974 <TIM5_Init+0xc0>)
 8000916:	f003 fe07 	bl	8004528 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <TIM5_Init+0x70>
  {
    Error_Handler();
 8000920:	f000 fd1a 	bl	8001358 <Error_Handler>
  }

  encoder_init.EncoderMode	=	TIM_ENCODERMODE_TI1;
 8000924:	2301      	movs	r3, #1
 8000926:	607b      	str	r3, [r7, #4]
  encoder_init.IC1Filter	=	5;
 8000928:	2305      	movs	r3, #5
 800092a:	617b      	str	r3, [r7, #20]
  encoder_init.IC1Polarity	=	TIM_ICPOLARITY_RISING;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  encoder_init.IC1Selection	=	TIM_ICSELECTION_DIRECTTI;
 8000930:	2301      	movs	r3, #1
 8000932:	60fb      	str	r3, [r7, #12]

  encoder_init.IC2Filter	=	0;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  encoder_init.IC2Polarity	=	TIM_ICPOLARITY_FALLING;
 8000938:	2302      	movs	r3, #2
 800093a:	61bb      	str	r3, [r7, #24]
  encoder_init.IC2Selection	=	TIM_ICSELECTION_INDIRECTTI;
 800093c:	2302      	movs	r3, #2
 800093e:	61fb      	str	r3, [r7, #28]

  if(HAL_TIM_Encoder_Init(&htim5, &encoder_init) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4619      	mov	r1, r3
 8000944:	480b      	ldr	r0, [pc, #44]	@ (8000974 <TIM5_Init+0xc0>)
 8000946:	f002 fe8b 	bl	8003660 <HAL_TIM_Encoder_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <TIM5_Init+0xa0>
  {
	  Error_Handler();
 8000950:	f000 fd02 	bl	8001358 <Error_Handler>
  }




  HAL_TIM_MspPostInit(&htim5);
 8000954:	4807      	ldr	r0, [pc, #28]	@ (8000974 <TIM5_Init+0xc0>)
 8000956:	f001 f863 	bl	8001a20 <HAL_TIM_MspPostInit>

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 800095a:	2100      	movs	r1, #0
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <TIM5_Init+0xc0>)
 800095e:	f002 ff2f 	bl	80037c0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000962:	2104      	movs	r1, #4
 8000964:	4803      	ldr	r0, [pc, #12]	@ (8000974 <TIM5_Init+0xc0>)
 8000966:	f002 ff2b 	bl	80037c0 <HAL_TIM_Encoder_Start>

}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	@ 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000278 	.word	0x20000278
 8000978:	40000c00 	.word	0x40000c00

0800097c <Line_PIN_Config>:

void Line_PIN_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
	/// led ngang
// E 7 8 9 10 11 12 13 ; B 2 ;
	GPIO_InitTypeDef pin_line_cf;

	pin_line_cf.Mode		=	GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
	pin_line_cf.Pin			=	GPIO_PIN_7  | GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10  | GPIO_PIN_11 |
 8000986:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 800098a:	607b      	str	r3, [r7, #4]
								GPIO_PIN_12 | GPIO_PIN_13 ;
	pin_line_cf.Pull		=	GPIO_PULLUP;
 800098c:	2301      	movs	r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
	pin_line_cf.Speed		=	GPIO_SPEED_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &pin_line_cf);
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	4619      	mov	r1, r3
 8000998:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <Line_PIN_Config+0x38>)
 800099a:	f001 fda3 	bl	80024e4 <HAL_GPIO_Init>

	pin_line_cf.Pin			=	GPIO_PIN_2;
 800099e:	2304      	movs	r3, #4
 80009a0:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOB, &pin_line_cf);
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <Line_PIN_Config+0x3c>)
 80009a8:	f001 fd9c 	bl	80024e4 <HAL_GPIO_Init>

}
 80009ac:	bf00      	nop
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40020400 	.word	0x40020400

080009bc <pid_goc>:
	if(PID_1 >40)   PID_1 =40;
	if(PID_1 <-40)   PID_1 =-40;
}

void pid_goc(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	goc = values[0];
 80009c0:	4b31      	ldr	r3, [pc, #196]	@ (8000a88 <pid_goc+0xcc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a31      	ldr	r2, [pc, #196]	@ (8000a8c <pid_goc+0xd0>)
 80009c6:	6013      	str	r3, [r2, #0]

	if ((goc < 2) && (goc >-2)) goc = 0;
 80009c8:	4b30      	ldr	r3, [pc, #192]	@ (8000a8c <pid_goc+0xd0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	dc08      	bgt.n	80009e2 <pid_goc+0x26>
 80009d0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a8c <pid_goc+0xd0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d8:	db03      	blt.n	80009e2 <pid_goc+0x26>
 80009da:	4b2c      	ldr	r3, [pc, #176]	@ (8000a8c <pid_goc+0xd0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	e003      	b.n	80009ea <pid_goc+0x2e>
	else
		goc=values[0];
 80009e2:	4b29      	ldr	r3, [pc, #164]	@ (8000a88 <pid_goc+0xcc>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a29      	ldr	r2, [pc, #164]	@ (8000a8c <pid_goc+0xd0>)
 80009e8:	6013      	str	r3, [r2, #0]

	lech_ag = goc - goc0;
 80009ea:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <pid_goc+0xd0>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <pid_goc+0xd4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	4a27      	ldr	r2, [pc, #156]	@ (8000a94 <pid_goc+0xd8>)
 80009f6:	6013      	str	r3, [r2, #0]

	if( abs(lech_ag) <=  1 ) lech_ag=0;
 80009f8:	4b26      	ldr	r3, [pc, #152]	@ (8000a94 <pid_goc+0xd8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a00:	db06      	blt.n	8000a10 <pid_goc+0x54>
 8000a02:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <pid_goc+0xd8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	dc02      	bgt.n	8000a10 <pid_goc+0x54>
 8000a0a:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <pid_goc+0xd8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]

	P_a = lech_ag*Kp_a;
 8000a10:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <pid_goc+0xd8>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4613      	mov	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a98 <pid_goc+0xdc>)
 8000a1c:	6013      	str	r3, [r2, #0]

	I_a = Ki_a*lech_ag + I_a;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <pid_goc+0xe0>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a1e      	ldr	r2, [pc, #120]	@ (8000a9c <pid_goc+0xe0>)
 8000a24:	6013      	str	r3, [r2, #0]

	D_a = (lech_ag - pre_lech_ag)*Kd_a;
 8000a26:	4b1b      	ldr	r3, [pc, #108]	@ (8000a94 <pid_goc+0xd8>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <pid_goc+0xe4>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	1ad2      	subs	r2, r2, r3
 8000a30:	4613      	mov	r3, r2
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	1a9b      	subs	r3, r3, r2
 8000a36:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa4 <pid_goc+0xe8>)
 8000a38:	6013      	str	r3, [r2, #0]

	PID_a = P_a+I_a+D_a;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <pid_goc+0xdc>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <pid_goc+0xe0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	441a      	add	r2, r3
 8000a44:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <pid_goc+0xe8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <pid_goc+0xec>)
 8000a4c:	6013      	str	r3, [r2, #0]

	pre_lech_ag = lech_ag;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <pid_goc+0xd8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a13      	ldr	r2, [pc, #76]	@ (8000aa0 <pid_goc+0xe4>)
 8000a54:	6013      	str	r3, [r2, #0]

	if(PID_a >32)   PID_a =32;
 8000a56:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <pid_goc+0xec>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b20      	cmp	r3, #32
 8000a5c:	dd02      	ble.n	8000a64 <pid_goc+0xa8>
 8000a5e:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <pid_goc+0xec>)
 8000a60:	2220      	movs	r2, #32
 8000a62:	601a      	str	r2, [r3, #0]
	if(PID_a <-32)   PID_a =-32;
 8000a64:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <pid_goc+0xec>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f113 0f20 	cmn.w	r3, #32
 8000a6c:	da03      	bge.n	8000a76 <pid_goc+0xba>
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <pid_goc+0xec>)
 8000a70:	f06f 021f 	mvn.w	r2, #31
 8000a74:	601a      	str	r2, [r3, #0]
	flag = 0;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <pid_goc+0xf0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	200001dc 	.word	0x200001dc
 8000a8c:	200002c8 	.word	0x200002c8
 8000a90:	200002c4 	.word	0x200002c4
 8000a94:	20000398 	.word	0x20000398
 8000a98:	20000328 	.word	0x20000328
 8000a9c:	2000026c 	.word	0x2000026c
 8000aa0:	20000324 	.word	0x20000324
 8000aa4:	20000374 	.word	0x20000374
 8000aa8:	20000388 	.word	0x20000388
 8000aac:	2000025c 	.word	0x2000025c

08000ab0 <motor_foward_pid>:
//
//1     3
/********************************************************PID_VALUE_TO_MOTOR****************************************************/

void motor_foward_pid(int speed)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	int x = speed;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	60fb      	str	r3, [r7, #12]
	/*--line + angle--*/
	// khi goc lech duong , pid + vao 1 2 ??
	MotorSpeed[1] = x + PID_1 - PID_a;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <motor_foward_pid+0x88>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	441a      	add	r2, r3
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <motor_foward_pid+0x8c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	4a1d      	ldr	r2, [pc, #116]	@ (8000b40 <motor_foward_pid+0x90>)
 8000acc:	6053      	str	r3, [r2, #4]
	MotorSpeed[2] = x + PID_1 - PID_a;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <motor_foward_pid+0x88>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	441a      	add	r2, r3
 8000ad6:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <motor_foward_pid+0x8c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	4a18      	ldr	r2, [pc, #96]	@ (8000b40 <motor_foward_pid+0x90>)
 8000ade:	6093      	str	r3, [r2, #8]
	MotorSpeed[3] = x - PID_1 + PID_a;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <motor_foward_pid+0x88>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	1ad2      	subs	r2, r2, r3
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <motor_foward_pid+0x8c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a14      	ldr	r2, [pc, #80]	@ (8000b40 <motor_foward_pid+0x90>)
 8000af0:	60d3      	str	r3, [r2, #12]
	MotorSpeed[4] = x - PID_1 + PID_a;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <motor_foward_pid+0x88>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	1ad2      	subs	r2, r2, r3
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <motor_foward_pid+0x8c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <motor_foward_pid+0x90>)
 8000b02:	6113      	str	r3, [r2, #16]

	st_motor1(MotorSpeed[1]);
 8000b04:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <motor_foward_pid+0x90>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fdcd 	bl	80016a8 <st_motor1>
	st_motor2(MotorSpeed[2]);
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <motor_foward_pid+0x90>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fdf8 	bl	8001708 <st_motor2>
	st_motor3(-MotorSpeed[3]);
 8000b18:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <motor_foward_pid+0x90>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	425b      	negs	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fe24 	bl	800176c <st_motor3>
	st_motor4(-MotorSpeed[4]);
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <motor_foward_pid+0x90>)
 8000b26:	691b      	ldr	r3, [r3, #16]
 8000b28:	425b      	negs	r3, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fe4e 	bl	80017cc <st_motor4>

}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200001d8 	.word	0x200001d8
 8000b3c:	20000388 	.word	0x20000388
 8000b40:	20000248 	.word	0x20000248

08000b44 <motor_backward_pid>:




void motor_backward_pid(int speed)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	int x = speed;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	60fb      	str	r3, [r7, #12]
	MotorSpeed[1] = x - PID_1 + PID_a;
 8000b50:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <motor_backward_pid+0x88>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	1ad2      	subs	r2, r2, r3
 8000b58:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <motor_backward_pid+0x8c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd4 <motor_backward_pid+0x90>)
 8000b60:	6053      	str	r3, [r2, #4]
	MotorSpeed[2] = x - PID_1 + PID_a;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <motor_backward_pid+0x88>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	1ad2      	subs	r2, r2, r3
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <motor_backward_pid+0x8c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a18      	ldr	r2, [pc, #96]	@ (8000bd4 <motor_backward_pid+0x90>)
 8000b72:	6093      	str	r3, [r2, #8]
	MotorSpeed[3] = x + PID_1 - PID_a;
 8000b74:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <motor_backward_pid+0x88>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	441a      	add	r2, r3
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <motor_backward_pid+0x8c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <motor_backward_pid+0x90>)
 8000b84:	60d3      	str	r3, [r2, #12]
	MotorSpeed[4] = x + PID_1 - PID_a;
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <motor_backward_pid+0x88>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	441a      	add	r2, r3
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <motor_backward_pid+0x8c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <motor_backward_pid+0x90>)
 8000b96:	6113      	str	r3, [r2, #16]

	st_motor1(-MotorSpeed[1]);
 8000b98:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <motor_backward_pid+0x90>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	425b      	negs	r3, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fd82 	bl	80016a8 <st_motor1>
	st_motor2(-MotorSpeed[2]);
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <motor_backward_pid+0x90>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	425b      	negs	r3, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fdac 	bl	8001708 <st_motor2>
	st_motor3(MotorSpeed[3]);
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <motor_backward_pid+0x90>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fdd9 	bl	800176c <st_motor3>
	st_motor4(MotorSpeed[4]);
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <motor_backward_pid+0x90>)
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fe04 	bl	80017cc <st_motor4>

}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200001d8 	.word	0x200001d8
 8000bd0:	20000388 	.word	0x20000388
 8000bd4:	20000248 	.word	0x20000248

08000bd8 <motor_rightside_pid>:

void motor_rightside_pid(int speed)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	int x = speed;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	60fb      	str	r3, [r7, #12]
	MotorSpeed[1] = x - PID_2 + PID_a;
 8000be4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <motor_rightside_pid+0x88>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	1ad2      	subs	r2, r2, r3
 8000bec:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <motor_rightside_pid+0x8c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c68 <motor_rightside_pid+0x90>)
 8000bf4:	6053      	str	r3, [r2, #4]
	MotorSpeed[2] = x + PID_2 - PID_a;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <motor_rightside_pid+0x88>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	441a      	add	r2, r3
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <motor_rightside_pid+0x8c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	4a18      	ldr	r2, [pc, #96]	@ (8000c68 <motor_rightside_pid+0x90>)
 8000c06:	6093      	str	r3, [r2, #8]
	MotorSpeed[3] = x - PID_2 + PID_a;
 8000c08:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <motor_rightside_pid+0x88>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	1ad2      	subs	r2, r2, r3
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <motor_rightside_pid+0x8c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a14      	ldr	r2, [pc, #80]	@ (8000c68 <motor_rightside_pid+0x90>)
 8000c18:	60d3      	str	r3, [r2, #12]
	MotorSpeed[4] = x + PID_2 - PID_a;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <motor_rightside_pid+0x88>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	441a      	add	r2, r3
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <motor_rightside_pid+0x8c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	4a0f      	ldr	r2, [pc, #60]	@ (8000c68 <motor_rightside_pid+0x90>)
 8000c2a:	6113      	str	r3, [r2, #16]

	st_motor1(-MotorSpeed[1]);
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <motor_rightside_pid+0x90>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	425b      	negs	r3, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fd38 	bl	80016a8 <st_motor1>
	st_motor2(MotorSpeed[2]);
 8000c38:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <motor_rightside_pid+0x90>)
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fd63 	bl	8001708 <st_motor2>
	st_motor3(-MotorSpeed[3]);
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <motor_rightside_pid+0x90>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	425b      	negs	r3, r3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fd8f 	bl	800176c <st_motor3>
	st_motor4(MotorSpeed[4]);
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <motor_rightside_pid+0x90>)
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fdba 	bl	80017cc <st_motor4>

}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200002cc 	.word	0x200002cc
 8000c64:	20000388 	.word	0x20000388
 8000c68:	20000248 	.word	0x20000248

08000c6c <motor_leftside_pid>:

void motor_leftside_pid(int speed)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	int x = speed;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	60fb      	str	r3, [r7, #12]
	MotorSpeed[1] = x + PID_2 - PID_a;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <motor_leftside_pid+0x88>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	441a      	add	r2, r3
 8000c80:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <motor_leftside_pid+0x8c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	4a1d      	ldr	r2, [pc, #116]	@ (8000cfc <motor_leftside_pid+0x90>)
 8000c88:	6053      	str	r3, [r2, #4]
	MotorSpeed[2] = x - PID_2 + PID_a;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <motor_leftside_pid+0x88>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	1ad2      	subs	r2, r2, r3
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <motor_leftside_pid+0x8c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a18      	ldr	r2, [pc, #96]	@ (8000cfc <motor_leftside_pid+0x90>)
 8000c9a:	6093      	str	r3, [r2, #8]
	MotorSpeed[3] = x + PID_2 - PID_a;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <motor_leftside_pid+0x88>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	441a      	add	r2, r3
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <motor_leftside_pid+0x8c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	4a14      	ldr	r2, [pc, #80]	@ (8000cfc <motor_leftside_pid+0x90>)
 8000cac:	60d3      	str	r3, [r2, #12]
	MotorSpeed[4] = x - PID_2 + PID_a;
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <motor_leftside_pid+0x88>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	1ad2      	subs	r2, r2, r3
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <motor_leftside_pid+0x8c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8000cfc <motor_leftside_pid+0x90>)
 8000cbe:	6113      	str	r3, [r2, #16]

	st_motor1(MotorSpeed[1]);
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <motor_leftside_pid+0x90>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fcef 	bl	80016a8 <st_motor1>
	st_motor2(-MotorSpeed[2]);
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <motor_leftside_pid+0x90>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	425b      	negs	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fd19 	bl	8001708 <st_motor2>
	st_motor3(MotorSpeed[3]);
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <motor_leftside_pid+0x90>)
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fd46 	bl	800176c <st_motor3>
	st_motor4(-MotorSpeed[4]);
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <motor_leftside_pid+0x90>)
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	425b      	negs	r3, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fd70 	bl	80017cc <st_motor4>

}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200002cc 	.word	0x200002cc
 8000cf8:	20000388 	.word	0x20000388
 8000cfc:	20000248 	.word	0x20000248

08000d00 <linefollow_foward>:


/**********************************-Line Follow-**************************************/

void linefollow_foward(int speed)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
//	lech_value_1();
//	lech_value_2();
//	pid_lech_1();

	pid_goc();
 8000d08:	f7ff fe58 	bl	80009bc <pid_goc>

//	if(RUN_ABLE==1)// kiem tra nut
//	{
	motor_foward_pid( speed  );
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fecf 	bl	8000ab0 <motor_foward_pid>
//	}
//	else
//		stop();
//	LCD_speed_plot();
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <linefollow_backward>:

void linefollow_backward(int speed)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	//lech_value_1();
	//lech_value_2();
	//pid_lech_1();
	pid_goc();
 8000d22:	f7ff fe4b 	bl	80009bc <pid_goc>
//	if(RUN_ABLE==1)// kiem tra nut
//	{
	motor_backward_pid( speed  );
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff0c 	bl	8000b44 <motor_backward_pid>

//	}
//	else
//		stop();
//	LCD_speed_plot();
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <linefollow_rightside>:

void linefollow_rightside(int speed)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	//lech_value_1();
//	lech_value_2();
//	pid_lech_2();
	pid_goc();
 8000d3c:	f7ff fe3e 	bl	80009bc <pid_goc>
//	if(RUN_ABLE==1)// kiem tra nut
//	{
	motor_rightside_pid( speed  );
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff49 	bl	8000bd8 <motor_rightside_pid>

//	}
//	else
//		stop();
//		LCD_speed_plot();
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <linefollow_leftside>:
void linefollow_leftside(int speed)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
//	lech_value_1();
//	lech_value_2();
//	pid_lech_2();
	pid_goc();
 8000d56:	f7ff fe31 	bl	80009bc <pid_goc>
//	if(RUN_ABLE==1)// kiem tra nut
//	{
	motor_leftside_pid( speed  );
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ff86 	bl	8000c6c <motor_leftside_pid>

//	}
//	else
//		stop();
//		LCD_speed_plot();
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <run_foward_steps>:


/***********************-Run with encoder-*************************1 vong = 2000 xung*/

void run_foward_steps(int speed, uint16_t step)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(&htim5,1000000);
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <run_foward_steps+0x58>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a12      	ldr	r2, [pc, #72]	@ (8000dc4 <run_foward_steps+0x5c>)
 8000d7a:	625a      	str	r2, [r3, #36]	@ 0x24
	//HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
	delay_ms(1);
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff fd03 	bl	8000788 <delay_ms>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8000d82:	2201      	movs	r2, #1
 8000d84:	4910      	ldr	r1, [pc, #64]	@ (8000dc8 <run_foward_steps+0x60>)
 8000d86:	4811      	ldr	r0, [pc, #68]	@ (8000dcc <run_foward_steps+0x64>)
 8000d88:	f003 fcfd 	bl	8004786 <HAL_UART_Receive_IT>
	while (-(__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000d8c:	e007      	b.n	8000d9e <run_foward_steps+0x36>
	{
		linefollow_foward(speed);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffb6 	bl	8000d00 <linefollow_foward>
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 8000d94:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <run_foward_steps+0x58>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d9a:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <run_foward_steps+0x68>)
 8000d9c:	6013      	str	r3, [r2, #0]
	while (-(__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <run_foward_steps+0x58>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da4:	f5c3 2374 	rsb	r3, r3, #999424	@ 0xf4000
 8000da8:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8000dac:	887a      	ldrh	r2, [r7, #2]
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d9ed      	bls.n	8000d8e <run_foward_steps+0x26>

	}
	stop();
 8000db2:	f000 fd3b 	bl	800182c <stop>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000278 	.word	0x20000278
 8000dc4:	000f4240 	.word	0x000f4240
 8000dc8:	200001d4 	.word	0x200001d4
 8000dcc:	200002dc 	.word	0x200002dc
 8000dd0:	20000514 	.word	0x20000514

08000dd4 <run_backward_steps>:

void run_backward_steps(uint16_t speed, uint16_t step)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	460a      	mov	r2, r1
 8000dde:	80fb      	strh	r3, [r7, #6]
 8000de0:	4613      	mov	r3, r2
 8000de2:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim5,1000000);
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <run_backward_steps+0x5c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a12      	ldr	r2, [pc, #72]	@ (8000e34 <run_backward_steps+0x60>)
 8000dea:	625a      	str	r2, [r3, #36]	@ 0x24
	delay_ms(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f7ff fccb 	bl	8000788 <delay_ms>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8000df2:	2201      	movs	r2, #1
 8000df4:	4910      	ldr	r1, [pc, #64]	@ (8000e38 <run_backward_steps+0x64>)
 8000df6:	4811      	ldr	r0, [pc, #68]	@ (8000e3c <run_backward_steps+0x68>)
 8000df8:	f003 fcc5 	bl	8004786 <HAL_UART_Receive_IT>
	while ((__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000dfc:	e008      	b.n	8000e10 <run_backward_steps+0x3c>
	{
		linefollow_backward(speed);
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff8a 	bl	8000d1a <linefollow_backward>
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <run_backward_steps+0x5c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e40 <run_backward_steps+0x6c>)
 8000e0e:	6013      	str	r3, [r2, #0]
	while ((__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000e10:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <run_backward_steps+0x5c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e16:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8000e1a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8000e1e:	88ba      	ldrh	r2, [r7, #4]
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d9ec      	bls.n	8000dfe <run_backward_steps+0x2a>
	}stop();
 8000e24:	f000 fd02 	bl	800182c <stop>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000278 	.word	0x20000278
 8000e34:	000f4240 	.word	0x000f4240
 8000e38:	200001d4 	.word	0x200001d4
 8000e3c:	200002dc 	.word	0x200002dc
 8000e40:	20000514 	.word	0x20000514

08000e44 <run_right_steps>:

void run_right_steps(uint16_t speed, uint16_t step)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	460a      	mov	r2, r1
 8000e4e:	80fb      	strh	r3, [r7, #6]
 8000e50:	4613      	mov	r3, r2
 8000e52:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim5,1000000);
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <run_right_steps+0x5c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a12      	ldr	r2, [pc, #72]	@ (8000ea4 <run_right_steps+0x60>)
 8000e5a:	625a      	str	r2, [r3, #36]	@ 0x24
	delay_ms(1);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff fc93 	bl	8000788 <delay_ms>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8000e62:	2201      	movs	r2, #1
 8000e64:	4910      	ldr	r1, [pc, #64]	@ (8000ea8 <run_right_steps+0x64>)
 8000e66:	4811      	ldr	r0, [pc, #68]	@ (8000eac <run_right_steps+0x68>)
 8000e68:	f003 fc8d 	bl	8004786 <HAL_UART_Receive_IT>
	while ((__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000e6c:	e008      	b.n	8000e80 <run_right_steps+0x3c>
	{
		linefollow_rightside(speed);
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff5f 	bl	8000d34 <linefollow_rightside>
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <run_right_steps+0x5c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb0 <run_right_steps+0x6c>)
 8000e7e:	6013      	str	r3, [r2, #0]
	while ((__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000e80:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <run_right_steps+0x5c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e86:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8000e8a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8000e8e:	88ba      	ldrh	r2, [r7, #4]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d9ec      	bls.n	8000e6e <run_right_steps+0x2a>
	}stop();
 8000e94:	f000 fcca 	bl	800182c <stop>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000278 	.word	0x20000278
 8000ea4:	000f4240 	.word	0x000f4240
 8000ea8:	200001d4 	.word	0x200001d4
 8000eac:	200002dc 	.word	0x200002dc
 8000eb0:	20000514 	.word	0x20000514

08000eb4 <run_left_steps>:

void run_left_steps(uint16_t speed, uint16_t step)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	80fb      	strh	r3, [r7, #6]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim5,1000000);
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <run_left_steps+0x5c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a12      	ldr	r2, [pc, #72]	@ (8000f14 <run_left_steps+0x60>)
 8000eca:	625a      	str	r2, [r3, #36]	@ 0x24
	delay_ms(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f7ff fc5b 	bl	8000788 <delay_ms>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4910      	ldr	r1, [pc, #64]	@ (8000f18 <run_left_steps+0x64>)
 8000ed6:	4811      	ldr	r0, [pc, #68]	@ (8000f1c <run_left_steps+0x68>)
 8000ed8:	f003 fc55 	bl	8004786 <HAL_UART_Receive_IT>
	while (-(__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000edc:	e008      	b.n	8000ef0 <run_left_steps+0x3c>
	{
		linefollow_leftside(speed);
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff34 	bl	8000d4e <linefollow_leftside>
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <run_left_steps+0x5c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eec:	4a0c      	ldr	r2, [pc, #48]	@ (8000f20 <run_left_steps+0x6c>)
 8000eee:	6013      	str	r3, [r2, #0]
	while (-(__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000ef0:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <run_left_steps+0x5c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef6:	f5c3 2374 	rsb	r3, r3, #999424	@ 0xf4000
 8000efa:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8000efe:	88ba      	ldrh	r2, [r7, #4]
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d9ec      	bls.n	8000ede <run_left_steps+0x2a>
	}stop();
 8000f04:	f000 fc92 	bl	800182c <stop>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000278 	.word	0x20000278
 8000f14:	000f4240 	.word	0x000f4240
 8000f18:	200001d4 	.word	0x200001d4
 8000f1c:	200002dc 	.word	0x200002dc
 8000f20:	20000514 	.word	0x20000514

08000f24 <main>:
static uint8_t khoi_dong(void);
//static void MX_USART2_UART_Init(void);
//static void MX_USART3_UART_Init(void);

int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0

	HAL_Init();
 8000f28:	f001 f8c6 	bl	80020b8 <HAL_Init>

	SystemClock_Config();
 8000f2c:	f000 f8b4 	bl	8001098 <SystemClock_Config>
	MX_TIM4_Init();
 8000f30:	f7ff fbc6 	bl	80006c0 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8000f34:	f7ff fc66 	bl	8000804 <MX_USART1_UART_Init>

	Line_PIN_Config();
 8000f38:	f7ff fd20 	bl	800097c <Line_PIN_Config>
	MX_GPIO_Init();
 8000f3c:	f000 f916 	bl	800116c <MX_GPIO_Init>
	TIM5_Init();
 8000f40:	f7ff fcb8 	bl	80008b4 <TIM5_Init>
	TIM3_Init();
 8000f44:	f7ff fb14 	bl	8000570 <TIM3_Init>
	MX_TIM14_Init();
 8000f48:	f7ff fc36 	bl	80007b8 <MX_TIM14_Init>
	PWM_Init();
 8000f4c:	f000 fb80 	bl	8001650 <PWM_Init>
//	khoi_dong();

		memset(&data, 0, sizeof(data));
 8000f50:	223c      	movs	r2, #60	@ 0x3c
 8000f52:	2100      	movs	r1, #0
 8000f54:	481b      	ldr	r0, [pc, #108]	@ (8000fc4 <main+0xa0>)
 8000f56:	f004 fc72 	bl	800583e <memset>
		stop();
 8000f5a:	f000 fc67 	bl	800182c <stop>
		delay_ms(2000);
 8000f5e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f62:	f7ff fc11 	bl	8000788 <delay_ms>
		HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8000f66:	2201      	movs	r2, #1
 8000f68:	4917      	ldr	r1, [pc, #92]	@ (8000fc8 <main+0xa4>)
 8000f6a:	4818      	ldr	r0, [pc, #96]	@ (8000fcc <main+0xa8>)
 8000f6c:	f003 fc0b 	bl	8004786 <HAL_UART_Receive_IT>
		HAL_TIM_Base_Start_IT(&htim4);
 8000f70:	4817      	ldr	r0, [pc, #92]	@ (8000fd0 <main+0xac>)
 8000f72:	f002 f995 	bl	80032a0 <HAL_TIM_Base_Start_IT>
		run_foward_steps(Basic_speed,7200);
 8000f76:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8000f7a:	2064      	movs	r0, #100	@ 0x64
 8000f7c:	f7ff fef4 	bl	8000d68 <run_foward_steps>
		delay_us(5000);
 8000f80:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f84:	f7ff fbe6 	bl	8000754 <delay_us>
		run_backward_steps(Basic_speed,7200);
 8000f88:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8000f8c:	2064      	movs	r0, #100	@ 0x64
 8000f8e:	f7ff ff21 	bl	8000dd4 <run_backward_steps>
		delay_us(5000);
 8000f92:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f96:	f7ff fbdd 	bl	8000754 <delay_us>
		run_left_steps(Basic_speed,7200);
 8000f9a:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8000f9e:	2064      	movs	r0, #100	@ 0x64
 8000fa0:	f7ff ff88 	bl	8000eb4 <run_left_steps>
		delay_us(5000);
 8000fa4:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000fa8:	f7ff fbd4 	bl	8000754 <delay_us>
		run_right_steps(Basic_speed,7200);
 8000fac:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8000fb0:	2064      	movs	r0, #100	@ 0x64
 8000fb2:	f7ff ff47 	bl	8000e44 <run_right_steps>
	while(1)
	{
//		linefollow_foward(Basic_speed);
//		//linefollow_rightside(Basic_speed);
//		//HAL_Delay(10);
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <main+0xb0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fbc:	4a06      	ldr	r2, [pc, #24]	@ (8000fd8 <main+0xb4>)
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	e7f9      	b.n	8000fb6 <main+0x92>
 8000fc2:	bf00      	nop
 8000fc4:	20000338 	.word	0x20000338
 8000fc8:	200001d4 	.word	0x200001d4
 8000fcc:	200002dc 	.word	0x200002dc
 8000fd0:	200003a4 	.word	0x200003a4
 8000fd4:	20000278 	.word	0x20000278
 8000fd8:	20000514 	.word	0x20000514

08000fdc <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a25      	ldr	r2, [pc, #148]	@ (8001080 <HAL_UART_RxCpltCallback+0xa4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d144      	bne.n	8001078 <HAL_UART_RxCpltCallback+0x9c>
	{

		if ((rcv_buffer == 'd') & (flag != 1))// nhan ki tu d ngung nhan
 8000fee:	4b25      	ldr	r3, [pc, #148]	@ (8001084 <HAL_UART_RxCpltCallback+0xa8>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b64      	cmp	r3, #100	@ 0x64
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2301      	moveq	r3, #1
 8000ff8:	2300      	movne	r3, #0
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <HAL_UART_RxCpltCallback+0xac>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	bf14      	ite	ne
 8001004:	2301      	movne	r3, #1
 8001006:	2300      	moveq	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4013      	ands	r3, r2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00d      	beq.n	800102e <HAL_UART_RxCpltCallback+0x52>
		{
			count = 0;
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <HAL_UART_RxCpltCallback+0xb0>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <HAL_UART_RxCpltCallback+0xac>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
			split_array();
 800101e:	f7ff fc1b 	bl	8000858 <split_array>
			HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001022:	2201      	movs	r2, #1
 8001024:	4917      	ldr	r1, [pc, #92]	@ (8001084 <HAL_UART_RxCpltCallback+0xa8>)
 8001026:	481a      	ldr	r0, [pc, #104]	@ (8001090 <HAL_UART_RxCpltCallback+0xb4>)
 8001028:	f003 fbad 	bl	8004786 <HAL_UART_Receive_IT>

		}


	}
}
 800102c:	e024      	b.n	8001078 <HAL_UART_RxCpltCallback+0x9c>
		}else if ((rcv_buffer != 'd') & (flag != 1))
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <HAL_UART_RxCpltCallback+0xa8>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b64      	cmp	r3, #100	@ 0x64
 8001034:	bf14      	ite	ne
 8001036:	2301      	movne	r3, #1
 8001038:	2300      	moveq	r3, #0
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_UART_RxCpltCallback+0xac>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4013      	ands	r3, r2
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d012      	beq.n	8001078 <HAL_UART_RxCpltCallback+0x9c>
			data[count++] = rcv_buffer;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <HAL_UART_RxCpltCallback+0xb0>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	b2d1      	uxtb	r1, r2
 800105a:	4a0c      	ldr	r2, [pc, #48]	@ (800108c <HAL_UART_RxCpltCallback+0xb0>)
 800105c:	7011      	strb	r1, [r2, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <HAL_UART_RxCpltCallback+0xa8>)
 8001062:	7819      	ldrb	r1, [r3, #0]
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <HAL_UART_RxCpltCallback+0xb8>)
 8001066:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001068:	2201      	movs	r2, #1
 800106a:	4906      	ldr	r1, [pc, #24]	@ (8001084 <HAL_UART_RxCpltCallback+0xa8>)
 800106c:	4808      	ldr	r0, [pc, #32]	@ (8001090 <HAL_UART_RxCpltCallback+0xb4>)
 800106e:	f003 fb8a 	bl	8004786 <HAL_UART_Receive_IT>
			flag = 0;
 8001072:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <HAL_UART_RxCpltCallback+0xac>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40011000 	.word	0x40011000
 8001084:	200001d4 	.word	0x200001d4
 8001088:	2000025c 	.word	0x2000025c
 800108c:	20000384 	.word	0x20000384
 8001090:	200002dc 	.word	0x200002dc
 8001094:	20000338 	.word	0x20000338

08001098 <SystemClock_Config>:
//	{
//
//	}
//}
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	@ 0x50
 800109c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	2230      	movs	r2, #48	@ 0x30
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f004 fbc9 	bl	800583e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <SystemClock_Config+0xcc>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	4a27      	ldr	r2, [pc, #156]	@ (8001164 <SystemClock_Config+0xcc>)
 80010c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80010cc:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <SystemClock_Config+0xcc>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <SystemClock_Config+0xd0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a21      	ldr	r2, [pc, #132]	@ (8001168 <SystemClock_Config+0xd0>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <SystemClock_Config+0xd0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f8:	2301      	movs	r3, #1
 80010fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fc:	2310      	movs	r3, #16
 80010fe:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001100:	2302      	movs	r3, #2
 8001102:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001104:	2300      	movs	r3, #0
 8001106:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001108:	2308      	movs	r3, #8
 800110a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 800110c:	2390      	movs	r3, #144	@ 0x90
 800110e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001114:	2304      	movs	r3, #4
 8001116:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4618      	mov	r0, r3
 800111e:	f001 fbaf 	bl	8002880 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x94>
	{
	Error_Handler();
 8001128:	f000 f916 	bl	8001358 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001138:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800113c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800113e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001142:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2104      	movs	r1, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fe10 	bl	8002d70 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xc2>
	{
	Error_Handler();
 8001156:	f000 f8ff 	bl	8001358 <Error_Handler>
	}
}
 800115a:	bf00      	nop
 800115c:	3750      	adds	r7, #80	@ 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
 *  E2   cong tac hanh trinh */



  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b6e      	ldr	r3, [pc, #440]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a6d      	ldr	r2, [pc, #436]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 800118c:	f043 0310 	orr.w	r3, r3, #16
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b6b      	ldr	r3, [pc, #428]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b67      	ldr	r3, [pc, #412]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a66      	ldr	r2, [pc, #408]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b64      	ldr	r3, [pc, #400]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b60      	ldr	r3, [pc, #384]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a5f      	ldr	r2, [pc, #380]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b59      	ldr	r3, [pc, #356]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a58      	ldr	r2, [pc, #352]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b56      	ldr	r3, [pc, #344]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b52      	ldr	r3, [pc, #328]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a51      	ldr	r2, [pc, #324]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b4f      	ldr	r3, [pc, #316]	@ (8001340 <MX_GPIO_Init+0x1d4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  // chân IO
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800120e:	233f      	movs	r3, #63	@ 0x3f
 8001210:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001216:	2302      	movs	r3, #2
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4847      	ldr	r0, [pc, #284]	@ (8001344 <MX_GPIO_Init+0x1d8>)
 8001226:	f001 f95d 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800122a:	f24f 030f 	movw	r3, #61455	@ 0xf00f
 800122e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4841      	ldr	r0, [pc, #260]	@ (8001348 <MX_GPIO_Init+0x1dc>)
 8001244:	f001 f94e 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001248:	23f0      	movs	r3, #240	@ 0xf0
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001258:	2305      	movs	r3, #5
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	483a      	ldr	r0, [pc, #232]	@ (800134c <MX_GPIO_Init+0x1e0>)
 8001264:	f001 f93e 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001268:	f24f 0304 	movw	r3, #61444	@ 0xf004
 800126c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4834      	ldr	r0, [pc, #208]	@ (8001350 <MX_GPIO_Init+0x1e4>)
 800127e:	f001 f931 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001282:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001286:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	482b      	ldr	r0, [pc, #172]	@ (8001344 <MX_GPIO_Init+0x1d8>)
 8001298:	f001 f924 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_5
 800129c:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 80012a0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4828      	ldr	r0, [pc, #160]	@ (8001354 <MX_GPIO_Init+0x1e8>)
 80012b2:	f001 f917 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD15 PD2
                           PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_2
 80012b6:	f64c 430f 	movw	r3, #52239	@ 0xcc0f
 80012ba:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3 | GPIO_PIN_14 |GPIO_PIN_0 | GPIO_PIN_1 ;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4821      	ldr	r0, [pc, #132]	@ (8001354 <MX_GPIO_Init+0x1e8>)
 80012d0:	f001 f908 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012e6:	230c      	movs	r3, #12
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4818      	ldr	r0, [pc, #96]	@ (8001354 <MX_GPIO_Init+0x1e8>)
 80012f2:	f001 f8f7 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	480f      	ldr	r0, [pc, #60]	@ (800134c <MX_GPIO_Init+0x1e0>)
 8001310:	f001 f8e8 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001314:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001326:	2308      	movs	r3, #8
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_GPIO_Init+0x1dc>)
 8001332:	f001 f8d7 	bl	80024e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	@ 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40021000 	.word	0x40021000
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020c00 	.word	0x40020c00

08001358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135c:	b672      	cpsid	i
}
 800135e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <Error_Handler+0x8>

08001364 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1,htim8,htim5;


void MX_TIM1_Init(void)//5kHz
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b096      	sub	sp, #88	@ 0x58
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001382:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]
 8001392:	615a      	str	r2, [r3, #20]
 8001394:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2220      	movs	r2, #32
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f004 fa4e 	bl	800583e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a2:	4b50      	ldr	r3, [pc, #320]	@ (80014e4 <MX_TIM1_Init+0x180>)
 80013a4:	4a50      	ldr	r2, [pc, #320]	@ (80014e8 <MX_TIM1_Init+0x184>)
 80013a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80013a8:	4b4e      	ldr	r3, [pc, #312]	@ (80014e4 <MX_TIM1_Init+0x180>)
 80013aa:	2247      	movs	r2, #71	@ 0x47
 80013ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b4d      	ldr	r3, [pc, #308]	@ (80014e4 <MX_TIM1_Init+0x180>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400;
 80013b4:	4b4b      	ldr	r3, [pc, #300]	@ (80014e4 <MX_TIM1_Init+0x180>)
 80013b6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80013ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	4b49      	ldr	r3, [pc, #292]	@ (80014e4 <MX_TIM1_Init+0x180>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c2:	4b48      	ldr	r3, [pc, #288]	@ (80014e4 <MX_TIM1_Init+0x180>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c8:	4b46      	ldr	r3, [pc, #280]	@ (80014e4 <MX_TIM1_Init+0x180>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ce:	4845      	ldr	r0, [pc, #276]	@ (80014e4 <MX_TIM1_Init+0x180>)
 80013d0:	f001 feae 	bl	8003130 <HAL_TIM_Base_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013da:	f7ff ffbd 	bl	8001358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013e4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013e8:	4619      	mov	r1, r3
 80013ea:	483e      	ldr	r0, [pc, #248]	@ (80014e4 <MX_TIM1_Init+0x180>)
 80013ec:	f002 fc9c 	bl	8003d28 <HAL_TIM_ConfigClockSource>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013f6:	f7ff ffaf 	bl	8001358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013fa:	483a      	ldr	r0, [pc, #232]	@ (80014e4 <MX_TIM1_Init+0x180>)
 80013fc:	f002 f819 	bl	8003432 <HAL_TIM_PWM_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001406:	f7ff ffa7 	bl	8001358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001412:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001416:	4619      	mov	r1, r3
 8001418:	4832      	ldr	r0, [pc, #200]	@ (80014e4 <MX_TIM1_Init+0x180>)
 800141a:	f003 f885 	bl	8004528 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001424:	f7ff ff98 	bl	8001358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001428:	2360      	movs	r3, #96	@ 0x60
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001434:	2300      	movs	r3, #0
 8001436:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	4825      	ldr	r0, [pc, #148]	@ (80014e4 <MX_TIM1_Init+0x180>)
 800144e:	f002 fba9 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001458:	f7ff ff7e 	bl	8001358 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800145c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001460:	2204      	movs	r2, #4
 8001462:	4619      	mov	r1, r3
 8001464:	481f      	ldr	r0, [pc, #124]	@ (80014e4 <MX_TIM1_Init+0x180>)
 8001466:	f002 fb9d 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001470:	f7ff ff72 	bl	8001358 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001478:	2208      	movs	r2, #8
 800147a:	4619      	mov	r1, r3
 800147c:	4819      	ldr	r0, [pc, #100]	@ (80014e4 <MX_TIM1_Init+0x180>)
 800147e:	f002 fb91 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001488:	f7ff ff66 	bl	8001358 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800148c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001490:	220c      	movs	r2, #12
 8001492:	4619      	mov	r1, r3
 8001494:	4813      	ldr	r0, [pc, #76]	@ (80014e4 <MX_TIM1_Init+0x180>)
 8001496:	f002 fb85 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80014a0:	f7ff ff5a 	bl	8001358 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <MX_TIM1_Init+0x180>)
 80014c8:	f003 f8aa 	bl	8004620 <HAL_TIMEx_ConfigBreakDeadTime>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80014d2:	f7ff ff41 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014d6:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <MX_TIM1_Init+0x180>)
 80014d8:	f000 faa2 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 80014dc:	bf00      	nop
 80014de:	3758      	adds	r7, #88	@ 0x58
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	2000065c 	.word	0x2000065c
 80014e8:	40010000 	.word	0x40010000

080014ec <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b092      	sub	sp, #72	@ 0x48
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]
 800150e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2220      	movs	r2, #32
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f004 f991 	bl	800583e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800151c:	4b4a      	ldr	r3, [pc, #296]	@ (8001648 <MX_TIM8_Init+0x15c>)
 800151e:	4a4b      	ldr	r2, [pc, #300]	@ (800164c <MX_TIM8_Init+0x160>)
 8001520:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15;
 8001522:	4b49      	ldr	r3, [pc, #292]	@ (8001648 <MX_TIM8_Init+0x15c>)
 8001524:	220f      	movs	r2, #15
 8001526:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b47      	ldr	r3, [pc, #284]	@ (8001648 <MX_TIM8_Init+0x15c>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 400;
 800152e:	4b46      	ldr	r3, [pc, #280]	@ (8001648 <MX_TIM8_Init+0x15c>)
 8001530:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001534:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b44      	ldr	r3, [pc, #272]	@ (8001648 <MX_TIM8_Init+0x15c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800153c:	4b42      	ldr	r3, [pc, #264]	@ (8001648 <MX_TIM8_Init+0x15c>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b41      	ldr	r3, [pc, #260]	@ (8001648 <MX_TIM8_Init+0x15c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001548:	483f      	ldr	r0, [pc, #252]	@ (8001648 <MX_TIM8_Init+0x15c>)
 800154a:	f001 ff72 	bl	8003432 <HAL_TIM_PWM_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001554:	f7ff ff00 	bl	8001358 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001558:	483b      	ldr	r0, [pc, #236]	@ (8001648 <MX_TIM8_Init+0x15c>)
 800155a:	f001 ff11 	bl	8003380 <HAL_TIM_OC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001564:	f7ff fef8 	bl	8001358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001570:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001574:	4619      	mov	r1, r3
 8001576:	4834      	ldr	r0, [pc, #208]	@ (8001648 <MX_TIM8_Init+0x15c>)
 8001578:	f002 ffd6 	bl	8004528 <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001582:	f7ff fee9 	bl	8001358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001586:	2360      	movs	r3, #96	@ 0x60
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4827      	ldr	r0, [pc, #156]	@ (8001648 <MX_TIM8_Init+0x15c>)
 80015ac:	f002 fafa 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM8_Init+0xce>
  {
    Error_Handler();
 80015b6:	f7ff fecf 	bl	8001358 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015be:	2204      	movs	r2, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4821      	ldr	r0, [pc, #132]	@ (8001648 <MX_TIM8_Init+0x15c>)
 80015c4:	f002 faee 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 80015ce:	f7ff fec3 	bl	8001358 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d6:	2208      	movs	r2, #8
 80015d8:	4619      	mov	r1, r3
 80015da:	481b      	ldr	r0, [pc, #108]	@ (8001648 <MX_TIM8_Init+0x15c>)
 80015dc:	f002 fae2 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80015e6:	f7ff feb7 	bl	8001358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f2:	220c      	movs	r2, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	4814      	ldr	r0, [pc, #80]	@ (8001648 <MX_TIM8_Init+0x15c>)
 80015f8:	f002 fa78 	bl	8003aec <HAL_TIM_OC_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM8_Init+0x11a>
  {
    Error_Handler();
 8001602:	f7ff fea9 	bl	8001358 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800161a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800161e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4619      	mov	r1, r3
 8001628:	4807      	ldr	r0, [pc, #28]	@ (8001648 <MX_TIM8_Init+0x15c>)
 800162a:	f002 fff9 	bl	8004620 <HAL_TIMEx_ConfigBreakDeadTime>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM8_Init+0x14c>
  {
    Error_Handler();
 8001634:	f7ff fe90 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001638:	4803      	ldr	r0, [pc, #12]	@ (8001648 <MX_TIM8_Init+0x15c>)
 800163a:	f000 f9f1 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 800163e:	bf00      	nop
 8001640:	3748      	adds	r7, #72	@ 0x48
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000614 	.word	0x20000614
 800164c:	40010400 	.word	0x40010400

08001650 <PWM_Init>:




void PWM_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 8001654:	f7ff fe86 	bl	8001364 <MX_TIM1_Init>
	MX_TIM8_Init();
 8001658:	f7ff ff48 	bl	80014ec <MX_TIM8_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800165c:	2100      	movs	r1, #0
 800165e:	4810      	ldr	r0, [pc, #64]	@ (80016a0 <PWM_Init+0x50>)
 8001660:	f001 ff36 	bl	80034d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001664:	2104      	movs	r1, #4
 8001666:	480e      	ldr	r0, [pc, #56]	@ (80016a0 <PWM_Init+0x50>)
 8001668:	f001 ff32 	bl	80034d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800166c:	2108      	movs	r1, #8
 800166e:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <PWM_Init+0x50>)
 8001670:	f001 ff2e 	bl	80034d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001674:	210c      	movs	r1, #12
 8001676:	480a      	ldr	r0, [pc, #40]	@ (80016a0 <PWM_Init+0x50>)
 8001678:	f001 ff2a 	bl	80034d0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800167c:	2100      	movs	r1, #0
 800167e:	4809      	ldr	r0, [pc, #36]	@ (80016a4 <PWM_Init+0x54>)
 8001680:	f001 ff26 	bl	80034d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001684:	2104      	movs	r1, #4
 8001686:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <PWM_Init+0x54>)
 8001688:	f001 ff22 	bl	80034d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800168c:	2108      	movs	r1, #8
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <PWM_Init+0x54>)
 8001690:	f001 ff1e 	bl	80034d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001694:	210c      	movs	r1, #12
 8001696:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <PWM_Init+0x54>)
 8001698:	f001 ff1a 	bl	80034d0 <HAL_TIM_PWM_Start>
//	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,120);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
//	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,120);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000065c 	.word	0x2000065c
 80016a4:	20000614 	.word	0x20000614

080016a8 <st_motor1>:

void st_motor1(int speed)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);}
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f8d5 	bl	8001860 <speed_shift>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	dd05      	ble.n	80016c8 <st_motor1+0x20>
 80016bc:	2201      	movs	r2, #1
 80016be:	2101      	movs	r1, #1
 80016c0:	480f      	ldr	r0, [pc, #60]	@ (8001700 <st_motor1+0x58>)
 80016c2:	f001 f8c3 	bl	800284c <HAL_GPIO_WritePin>
 80016c6:	e00a      	b.n	80016de <st_motor1+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);}
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f8c9 	bl	8001860 <speed_shift>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da04      	bge.n	80016de <st_motor1+0x36>
 80016d4:	2200      	movs	r2, #0
 80016d6:	2101      	movs	r1, #1
 80016d8:	4809      	ldr	r0, [pc, #36]	@ (8001700 <st_motor1+0x58>)
 80016da:	f001 f8b7 	bl	800284c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(speed_shift(speed))-12);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f8be 	bl	8001860 <speed_shift>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	bfb8      	it	lt
 80016ea:	425b      	neglt	r3, r3
 80016ec:	f1a3 020c 	sub.w	r2, r3, #12
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <st_motor1+0x5c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40020c00 	.word	0x40020c00
 8001704:	2000065c 	.word	0x2000065c

08001708 <st_motor2>:

void st_motor2(int speed)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);}
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f8a5 	bl	8001860 <speed_shift>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	dd06      	ble.n	800172a <st_motor2+0x22>
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001722:	4810      	ldr	r0, [pc, #64]	@ (8001764 <st_motor2+0x5c>)
 8001724:	f001 f892 	bl	800284c <HAL_GPIO_WritePin>
 8001728:	e00b      	b.n	8001742 <st_motor2+0x3a>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);}
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f898 	bl	8001860 <speed_shift>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	da05      	bge.n	8001742 <st_motor2+0x3a>
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800173c:	4809      	ldr	r0, [pc, #36]	@ (8001764 <st_motor2+0x5c>)
 800173e:	f001 f885 	bl	800284c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,abs(speed_shift(speed))-12);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f88c 	bl	8001860 <speed_shift>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	bfb8      	it	lt
 800174e:	425b      	neglt	r3, r3
 8001750:	f1a3 020c 	sub.w	r2, r3, #12
 8001754:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <st_motor2+0x60>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	639a      	str	r2, [r3, #56]	@ 0x38

}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40020000 	.word	0x40020000
 8001768:	2000065c 	.word	0x2000065c

0800176c <st_motor3>:

void st_motor3(int speed)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);}
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f873 	bl	8001860 <speed_shift>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	dd05      	ble.n	800178c <st_motor3+0x20>
 8001780:	2201      	movs	r2, #1
 8001782:	2108      	movs	r1, #8
 8001784:	480f      	ldr	r0, [pc, #60]	@ (80017c4 <st_motor3+0x58>)
 8001786:	f001 f861 	bl	800284c <HAL_GPIO_WritePin>
 800178a:	e00a      	b.n	80017a2 <st_motor3+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);}
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f867 	bl	8001860 <speed_shift>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	da04      	bge.n	80017a2 <st_motor3+0x36>
 8001798:	2200      	movs	r2, #0
 800179a:	2108      	movs	r1, #8
 800179c:	4809      	ldr	r0, [pc, #36]	@ (80017c4 <st_motor3+0x58>)
 800179e:	f001 f855 	bl	800284c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,abs(speed_shift(speed))-12);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f85c 	bl	8001860 <speed_shift>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bfb8      	it	lt
 80017ae:	425b      	neglt	r3, r3
 80017b0:	f1a3 020c 	sub.w	r2, r3, #12
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <st_motor3+0x5c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	2000065c 	.word	0x2000065c

080017cc <st_motor4>:

void st_motor4(int speed)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);}
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f843 	bl	8001860 <speed_shift>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	dd05      	ble.n	80017ec <st_motor4+0x20>
 80017e0:	2201      	movs	r2, #1
 80017e2:	2102      	movs	r1, #2
 80017e4:	480f      	ldr	r0, [pc, #60]	@ (8001824 <st_motor4+0x58>)
 80017e6:	f001 f831 	bl	800284c <HAL_GPIO_WritePin>
 80017ea:	e00a      	b.n	8001802 <st_motor4+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);}
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f837 	bl	8001860 <speed_shift>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da04      	bge.n	8001802 <st_motor4+0x36>
 80017f8:	2200      	movs	r2, #0
 80017fa:	2102      	movs	r1, #2
 80017fc:	4809      	ldr	r0, [pc, #36]	@ (8001824 <st_motor4+0x58>)
 80017fe:	f001 f825 	bl	800284c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,abs(speed_shift(speed))-12);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f82c 	bl	8001860 <speed_shift>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	bfb8      	it	lt
 800180e:	425b      	neglt	r3, r3
 8001810:	f1a3 020c 	sub.w	r2, r3, #12
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <st_motor4+0x5c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40020c00 	.word	0x40020c00
 8001828:	2000065c 	.word	0x2000065c

0800182c <stop>:
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,8);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,8);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,8);
}
void stop(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,12);
 8001830:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <stop+0x30>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	220c      	movs	r2, #12
 8001836:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,12);
 8001838:	4b08      	ldr	r3, [pc, #32]	@ (800185c <stop+0x30>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	220c      	movs	r2, #12
 800183e:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,12);
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <stop+0x30>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	220c      	movs	r2, #12
 8001846:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,12);
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <stop+0x30>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	220c      	movs	r2, #12
 800184e:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	2000065c 	.word	0x2000065c

08001860 <speed_shift>:
///////////////////////////////////////Loai truong hop khoa cung dong co/////////////////////////////////

int speed_shift(int speed)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	if(speed <0){return (speed - 12);}
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	da02      	bge.n	8001874 <speed_shift+0x14>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3b0c      	subs	r3, #12
 8001872:	e007      	b.n	8001884 <speed_shift+0x24>
	if(speed >0){return (speed + 12);}
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	dd02      	ble.n	8001880 <speed_shift+0x20>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	330c      	adds	r3, #12
 800187e:	e001      	b.n	8001884 <speed_shift+0x24>
	else {return (speed + 12);}
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	330c      	adds	r3, #12

}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_MspInit>:




void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_MspInit+0x4c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	4a0f      	ldr	r2, [pc, #60]	@ (80018dc <HAL_MspInit+0x4c>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a6:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_MspInit+0x4c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <HAL_MspInit+0x4c>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a36      	ldr	r2, [pc, #216]	@ (80019c8 <HAL_TIM_Base_MspInit+0xe8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10e      	bne.n	8001910 <HAL_TIM_Base_MspInit+0x30>
  {

    __HAL_RCC_TIM1_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	4a34      	ldr	r2, [pc, #208]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6453      	str	r3, [r2, #68]	@ 0x44
 8001902:	4b32      	ldr	r3, [pc, #200]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	69fb      	ldr	r3, [r7, #28]
//    HAL_NVIC_EnableIRQ(TIM4_IRQn);
//    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 1);

  }

}
 800190e:	e056      	b.n	80019be <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001918:	d10e      	bne.n	8001938 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	4b2b      	ldr	r3, [pc, #172]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	4a2a      	ldr	r2, [pc, #168]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6413      	str	r3, [r2, #64]	@ 0x40
 800192a:	4b28      	ldr	r3, [pc, #160]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	69bb      	ldr	r3, [r7, #24]
}
 8001936:	e042      	b.n	80019be <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a24      	ldr	r2, [pc, #144]	@ (80019d0 <HAL_TIM_Base_MspInit+0xf0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d10e      	bne.n	8001960 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	4a20      	ldr	r2, [pc, #128]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6413      	str	r3, [r2, #64]	@ 0x40
 8001952:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697b      	ldr	r3, [r7, #20]
}
 800195e:	e02e      	b.n	80019be <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <HAL_TIM_Base_MspInit+0xf4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d116      	bne.n	8001998 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	4a16      	ldr	r2, [pc, #88]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	6413      	str	r3, [r2, #64]	@ 0x40
 800197a:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001986:	201e      	movs	r0, #30
 8001988:	f000 fcff 	bl	800238a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 1);
 800198c:	2201      	movs	r2, #1
 800198e:	2105      	movs	r1, #5
 8001990:	201e      	movs	r0, #30
 8001992:	f000 fcde 	bl	8002352 <HAL_NVIC_SetPriority>
}
 8001996:	e012      	b.n	80019be <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM14)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0e      	ldr	r2, [pc, #56]	@ (80019d8 <HAL_TIM_Base_MspInit+0xf8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d10d      	bne.n	80019be <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	4a08      	ldr	r2, [pc, #32]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_TIM_Base_MspInit+0xec>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
}
 80019be:	bf00      	nop
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40010000 	.word	0x40010000
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40000400 	.word	0x40000400
 80019d4:	40000800 	.word	0x40000800
 80019d8:	40002000 	.word	0x40002000

080019dc <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a18 <HAL_TIM_PWM_MspInit+0x3c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10d      	bne.n	8001a0a <HAL_TIM_PWM_MspInit+0x2e>
  {

    __HAL_RCC_TIM5_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_TIM_PWM_MspInit+0x40>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	4a09      	ldr	r2, [pc, #36]	@ (8001a1c <HAL_TIM_PWM_MspInit+0x40>)
 80019f8:	f043 0308 	orr.w	r3, r3, #8
 80019fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fe:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <HAL_TIM_PWM_MspInit+0x40>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]

  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40000c00 	.word	0x40000c00
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b090      	sub	sp, #64	@ 0x40
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a7f      	ldr	r2, [pc, #508]	@ (8001c3c <HAL_TIM_MspPostInit+0x21c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12d      	bne.n	8001a9e <HAL_TIM_MspPostInit+0x7e>
  {

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a46:	4b7e      	ldr	r3, [pc, #504]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a7d      	ldr	r2, [pc, #500]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b7b      	ldr	r3, [pc, #492]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001a5e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4872      	ldr	r0, [pc, #456]	@ (8001c44 <HAL_TIM_MspPostInit+0x224>)
 8001a7c:	f000 fd32 	bl	80024e4 <HAL_GPIO_Init>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a84:	4b6e      	ldr	r3, [pc, #440]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a88:	4a6d      	ldr	r2, [pc, #436]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a90:	4b6b      	ldr	r3, [pc, #428]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
        __HAL_RCC_TIM8_CLK_ENABLE();
  }


}
 8001a9c:	e0ca      	b.n	8001c34 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM2)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aa6:	d13d      	bne.n	8001b24 <HAL_TIM_MspPostInit+0x104>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
 8001aac:	4b64      	ldr	r3, [pc, #400]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab0:	4a63      	ldr	r2, [pc, #396]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab8:	4b61      	ldr	r3, [pc, #388]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	623b      	str	r3, [r7, #32]
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	4b5d      	ldr	r3, [pc, #372]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001acc:	4a5c      	ldr	r2, [pc, #368]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad4:	4b5a      	ldr	r3, [pc, #360]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ae0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001af2:	2301      	movs	r3, #1
 8001af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001afa:	4619      	mov	r1, r3
 8001afc:	4851      	ldr	r0, [pc, #324]	@ (8001c44 <HAL_TIM_MspPostInit+0x224>)
 8001afe:	f000 fcf1 	bl	80024e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b02:	2308      	movs	r3, #8
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b12:	2301      	movs	r3, #1
 8001b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	484a      	ldr	r0, [pc, #296]	@ (8001c48 <HAL_TIM_MspPostInit+0x228>)
 8001b1e:	f000 fce1 	bl	80024e4 <HAL_GPIO_Init>
}
 8001b22:	e087      	b.n	8001c34 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM3)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a48      	ldr	r2, [pc, #288]	@ (8001c4c <HAL_TIM_MspPostInit+0x22c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d12c      	bne.n	8001b88 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a42      	ldr	r2, [pc, #264]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b40      	ldr	r3, [pc, #256]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;//|GPIO_PIN_8|GPIO_PIN_9;
 8001b4a:	2330      	movs	r3, #48	@ 0x30
 8001b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	4838      	ldr	r0, [pc, #224]	@ (8001c48 <HAL_TIM_MspPostInit+0x228>)
 8001b66:	f000 fcbd 	bl	80024e4 <HAL_GPIO_Init>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	4a33      	ldr	r2, [pc, #204]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7a:	4b31      	ldr	r3, [pc, #196]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697b      	ldr	r3, [r7, #20]
}
 8001b86:	e055      	b.n	8001c34 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM5)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a30      	ldr	r2, [pc, #192]	@ (8001c50 <HAL_TIM_MspPostInit+0x230>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d11e      	bne.n	8001bd0 <HAL_TIM_MspPostInit+0x1b0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a29      	ldr	r2, [pc, #164]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	481e      	ldr	r0, [pc, #120]	@ (8001c44 <HAL_TIM_MspPostInit+0x224>)
 8001bca:	f000 fc8b 	bl	80024e4 <HAL_GPIO_Init>
}
 8001bce:	e031      	b.n	8001c34 <HAL_TIM_MspPostInit+0x214>
    else if(htim->Instance==TIM8)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c54 <HAL_TIM_MspPostInit+0x234>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12c      	bne.n	8001c34 <HAL_TIM_MspPostInit+0x214>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	4a17      	ldr	r2, [pc, #92]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001bf6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	633b      	str	r3, [r7, #48]	@ 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	637b      	str	r3, [r7, #52]	@ 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	63bb      	str	r3, [r7, #56]	@ 0x38
        GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c10:	4619      	mov	r1, r3
 8001c12:	4811      	ldr	r0, [pc, #68]	@ (8001c58 <HAL_TIM_MspPostInit+0x238>)
 8001c14:	f000 fc66 	bl	80024e4 <HAL_GPIO_Init>
        __HAL_RCC_TIM8_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c20:	4a07      	ldr	r2, [pc, #28]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <HAL_TIM_MspPostInit+0x220>)
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
}
 8001c34:	bf00      	nop
 8001c36:	3740      	adds	r7, #64	@ 0x40
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40000400 	.word	0x40000400
 8001c50:	40000c00 	.word	0x40000c00
 8001c54:	40010400 	.word	0x40010400
 8001c58:	40020800 	.word	0x40020800

08001c5c <HAL_UART_MspInit>:

}


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08e      	sub	sp, #56	@ 0x38
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a57      	ldr	r2, [pc, #348]	@ (8001dd8 <HAL_UART_MspInit+0x17c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d134      	bne.n	8001ce8 <HAL_UART_MspInit+0x8c>
  {
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
 8001c82:	4b56      	ldr	r3, [pc, #344]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	4a55      	ldr	r2, [pc, #340]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001c88:	f043 0310 	orr.w	r3, r3, #16
 8001c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8e:	4b53      	ldr	r3, [pc, #332]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	623b      	str	r3, [r7, #32]
 8001c98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a4e      	ldr	r2, [pc, #312]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b4c      	ldr	r3, [pc, #304]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cb6:	23c0      	movs	r3, #192	@ 0xc0
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4843      	ldr	r0, [pc, #268]	@ (8001de0 <HAL_UART_MspInit+0x184>)
 8001cd2:	f000 fc07 	bl	80024e4 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2101      	movs	r1, #1
 8001cda:	2025      	movs	r0, #37	@ 0x25
 8001cdc:	f000 fb39 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ce0:	2025      	movs	r0, #37	@ 0x25
 8001ce2:	f000 fb52 	bl	800238a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);

  }

}
 8001ce6:	e073      	b.n	8001dd0 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a3d      	ldr	r2, [pc, #244]	@ (8001de4 <HAL_UART_MspInit+0x188>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d134      	bne.n	8001d5c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	4b39      	ldr	r3, [pc, #228]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a38      	ldr	r2, [pc, #224]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b36      	ldr	r3, [pc, #216]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	4b32      	ldr	r3, [pc, #200]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	4a31      	ldr	r2, [pc, #196]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d2a:	230c      	movs	r3, #12
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d42:	4619      	mov	r1, r3
 8001d44:	4828      	ldr	r0, [pc, #160]	@ (8001de8 <HAL_UART_MspInit+0x18c>)
 8001d46:	f000 fbcd 	bl	80024e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2026      	movs	r0, #38	@ 0x26
 8001d50:	f000 faff 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d54:	2026      	movs	r0, #38	@ 0x26
 8001d56:	f000 fb18 	bl	800238a <HAL_NVIC_EnableIRQ>
}
 8001d5a:	e039      	b.n	8001dd0 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a22      	ldr	r2, [pc, #136]	@ (8001dec <HAL_UART_MspInit+0x190>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d134      	bne.n	8001dd0 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d76:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a14      	ldr	r2, [pc, #80]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_UART_MspInit+0x180>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d9e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001db0:	2307      	movs	r3, #7
 8001db2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db8:	4619      	mov	r1, r3
 8001dba:	4809      	ldr	r0, [pc, #36]	@ (8001de0 <HAL_UART_MspInit+0x184>)
 8001dbc:	f000 fb92 	bl	80024e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2027      	movs	r0, #39	@ 0x27
 8001dc6:	f000 fac4 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dca:	2027      	movs	r0, #39	@ 0x27
 8001dcc:	f000 fadd 	bl	800238a <HAL_NVIC_EnableIRQ>
}
 8001dd0:	bf00      	nop
 8001dd2:	3738      	adds	r7, #56	@ 0x38
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40011000 	.word	0x40011000
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020400 	.word	0x40020400
 8001de4:	40004400 	.word	0x40004400
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40004800 	.word	0x40004800

08001df0 <NMI_Handler>:
extern UART_HandleTypeDef huart3;

extern TIM_HandleTypeDef  htim3;
extern TIM_HandleTypeDef  htim4;
void NMI_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <NMI_Handler+0x4>

08001df8 <TIM4_IRQHandler>:
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

void TIM4_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim4);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <TIM4_IRQHandler+0x10>)
 8001dfe:	f001 fd6d 	bl	80038dc <HAL_TIM_IRQHandler>
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200003a4 	.word	0x200003a4

08001e0c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim3);
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <TIM3_IRQHandler+0x10>)
 8001e12:	f001 fd63 	bl	80038dc <HAL_TIM_IRQHandler>
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000484 	.word	0x20000484

08001e20 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <HardFault_Handler+0x4>

08001e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <MemManage_Handler+0x4>

08001e30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <BusFault_Handler+0x4>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <UsageFault_Handler+0x4>

08001e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6e:	f000 f975 	bl	800215c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e7c:	4802      	ldr	r0, [pc, #8]	@ (8001e88 <USART1_IRQHandler+0x10>)
 8001e7e:	f002 fcb3 	bl	80047e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200002dc 	.word	0x200002dc

08001e8c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e90:	4802      	ldr	r0, [pc, #8]	@ (8001e9c <USART2_IRQHandler+0x10>)
 8001e92:	f002 fca9 	bl	80047e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000560 	.word	0x20000560

08001ea0 <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <USART3_IRQHandler+0x10>)
 8001ea6:	f002 fc9f 	bl	80047e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200003ec 	.word	0x200003ec

08001eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return 1;
 8001eb8:	2301      	movs	r3, #1
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_kill>:

int _kill(int pid, int sig)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ece:	f003 fd61 	bl	8005994 <__errno>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2216      	movs	r2, #22
 8001ed6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_exit>:

void _exit (int status)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ffe7 	bl	8001ec4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ef6:	bf00      	nop
 8001ef8:	e7fd      	b.n	8001ef6 <_exit+0x12>

08001efa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e00a      	b.n	8001f22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f0c:	f3af 8000 	nop.w
 8001f10:	4601      	mov	r1, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	60ba      	str	r2, [r7, #8]
 8001f18:	b2ca      	uxtb	r2, r1
 8001f1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	dbf0      	blt.n	8001f0c <_read+0x12>
  }

  return len;
 8001f2a:	687b      	ldr	r3, [r7, #4]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e009      	b.n	8001f5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	60ba      	str	r2, [r7, #8]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3301      	adds	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	dbf1      	blt.n	8001f46 <_write+0x12>
  }
  return len;
 8001f62:	687b      	ldr	r3, [r7, #4]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_close>:

int _close(int file)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f94:	605a      	str	r2, [r3, #4]
  return 0;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_isatty>:

int _isatty(int file)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fac:	2301      	movs	r3, #1
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b085      	sub	sp, #20
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fdc:	4a14      	ldr	r2, [pc, #80]	@ (8002030 <_sbrk+0x5c>)
 8001fde:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <_sbrk+0x60>)
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe8:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <_sbrk+0x64>)
 8001ff2:	4a12      	ldr	r2, [pc, #72]	@ (800203c <_sbrk+0x68>)
 8001ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff6:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	429a      	cmp	r2, r3
 8002002:	d207      	bcs.n	8002014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002004:	f003 fcc6 	bl	8005994 <__errno>
 8002008:	4603      	mov	r3, r0
 800200a:	220c      	movs	r2, #12
 800200c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	e009      	b.n	8002028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201a:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <_sbrk+0x64>)
 8002024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002026:	68fb      	ldr	r3, [r7, #12]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20020000 	.word	0x20020000
 8002034:	00000400 	.word	0x00000400
 8002038:	20000084 	.word	0x20000084
 800203c:	200006b0 	.word	0x200006b0

08002040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <SystemInit+0x20>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204a:	4a05      	ldr	r2, [pc, #20]	@ (8002060 <SystemInit+0x20>)
 800204c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800209c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002068:	480d      	ldr	r0, [pc, #52]	@ (80020a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800206a:	490e      	ldr	r1, [pc, #56]	@ (80020a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800206c:	4a0e      	ldr	r2, [pc, #56]	@ (80020a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002070:	e002      	b.n	8002078 <LoopCopyDataInit>

08002072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002076:	3304      	adds	r3, #4

08002078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800207c:	d3f9      	bcc.n	8002072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207e:	4a0b      	ldr	r2, [pc, #44]	@ (80020ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002080:	4c0b      	ldr	r4, [pc, #44]	@ (80020b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002084:	e001      	b.n	800208a <LoopFillZerobss>

08002086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002088:	3204      	adds	r2, #4

0800208a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800208c:	d3fb      	bcc.n	8002086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800208e:	f7ff ffd7 	bl	8002040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002092:	f003 fc85 	bl	80059a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002096:	f7fe ff45 	bl	8000f24 <main>
  bx  lr    
 800209a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800209c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80020a8:	080071f8 	.word	0x080071f8
  ldr r2, =_sbss
 80020ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80020b0:	200006ac 	.word	0x200006ac

080020b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b4:	e7fe      	b.n	80020b4 <ADC_IRQHandler>
	...

080020b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020bc:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <HAL_Init+0x40>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0d      	ldr	r2, [pc, #52]	@ (80020f8 <HAL_Init+0x40>)
 80020c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <HAL_Init+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <HAL_Init+0x40>)
 80020ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a07      	ldr	r2, [pc, #28]	@ (80020f8 <HAL_Init+0x40>)
 80020da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e0:	2003      	movs	r0, #3
 80020e2:	f000 f92b 	bl	800233c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e6:	200f      	movs	r0, #15
 80020e8:	f000 f808 	bl	80020fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ec:	f7ff fbd0 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023c00 	.word	0x40023c00

080020fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002104:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_InitTick+0x54>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <HAL_InitTick+0x58>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	4619      	mov	r1, r3
 800210e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002112:	fbb3 f3f1 	udiv	r3, r3, r1
 8002116:	fbb2 f3f3 	udiv	r3, r2, r3
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f943 	bl	80023a6 <HAL_SYSTICK_Config>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e00e      	b.n	8002148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b0f      	cmp	r3, #15
 800212e:	d80a      	bhi.n	8002146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002130:	2200      	movs	r2, #0
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f000 f90b 	bl	8002352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800213c:	4a06      	ldr	r2, [pc, #24]	@ (8002158 <HAL_InitTick+0x5c>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e000      	b.n	8002148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000000 	.word	0x20000000
 8002154:	20000008 	.word	0x20000008
 8002158:	20000004 	.word	0x20000004

0800215c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_IncTick+0x20>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_IncTick+0x24>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4413      	add	r3, r2
 800216c:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <HAL_IncTick+0x24>)
 800216e:	6013      	str	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000008 	.word	0x20000008
 8002180:	200006a8 	.word	0x200006a8

08002184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return uwTick;
 8002188:	4b03      	ldr	r3, [pc, #12]	@ (8002198 <HAL_GetTick+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	200006a8 	.word	0x200006a8

0800219c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021b8:	4013      	ands	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ce:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	60d3      	str	r3, [r2, #12]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e8:	4b04      	ldr	r3, [pc, #16]	@ (80021fc <__NVIC_GetPriorityGrouping+0x18>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 0307 	and.w	r3, r3, #7
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db0b      	blt.n	800222a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	f003 021f 	and.w	r2, r3, #31
 8002218:	4907      	ldr	r1, [pc, #28]	@ (8002238 <__NVIC_EnableIRQ+0x38>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	2001      	movs	r0, #1
 8002222:	fa00 f202 	lsl.w	r2, r0, r2
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000e100 	.word	0xe000e100

0800223c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	db0a      	blt.n	8002266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	490c      	ldr	r1, [pc, #48]	@ (8002288 <__NVIC_SetPriority+0x4c>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	0112      	lsls	r2, r2, #4
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	440b      	add	r3, r1
 8002260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002264:	e00a      	b.n	800227c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4908      	ldr	r1, [pc, #32]	@ (800228c <__NVIC_SetPriority+0x50>)
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	3b04      	subs	r3, #4
 8002274:	0112      	lsls	r2, r2, #4
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	440b      	add	r3, r1
 800227a:	761a      	strb	r2, [r3, #24]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000e100 	.word	0xe000e100
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	@ 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f1c3 0307 	rsb	r3, r3, #7
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	bf28      	it	cs
 80022ae:	2304      	movcs	r3, #4
 80022b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3304      	adds	r3, #4
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d902      	bls.n	80022c0 <NVIC_EncodePriority+0x30>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3b03      	subs	r3, #3
 80022be:	e000      	b.n	80022c2 <NVIC_EncodePriority+0x32>
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	f04f 32ff 	mov.w	r2, #4294967295
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	401a      	ands	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa01 f303 	lsl.w	r3, r1, r3
 80022e2:	43d9      	mvns	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	4313      	orrs	r3, r2
         );
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3724      	adds	r7, #36	@ 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002308:	d301      	bcc.n	800230e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230a:	2301      	movs	r3, #1
 800230c:	e00f      	b.n	800232e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800230e:	4a0a      	ldr	r2, [pc, #40]	@ (8002338 <SysTick_Config+0x40>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002316:	210f      	movs	r1, #15
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f7ff ff8e 	bl	800223c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002320:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <SysTick_Config+0x40>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002326:	4b04      	ldr	r3, [pc, #16]	@ (8002338 <SysTick_Config+0x40>)
 8002328:	2207      	movs	r2, #7
 800232a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	e000e010 	.word	0xe000e010

0800233c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff29 	bl	800219c <__NVIC_SetPriorityGrouping>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002364:	f7ff ff3e 	bl	80021e4 <__NVIC_GetPriorityGrouping>
 8002368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f7ff ff8e 	bl	8002290 <NVIC_EncodePriority>
 8002374:	4602      	mov	r2, r0
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff5d 	bl	800223c <__NVIC_SetPriority>
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff31 	bl	8002200 <__NVIC_EnableIRQ>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ffa2 	bl	80022f8 <SysTick_Config>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff feda 	bl	8002184 <HAL_GetTick>
 80023d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d008      	beq.n	80023f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2280      	movs	r2, #128	@ 0x80
 80023e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e052      	b.n	8002496 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0216 	bic.w	r2, r2, #22
 80023fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800240e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <HAL_DMA_Abort+0x62>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0208 	bic.w	r2, r2, #8
 800242e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002440:	e013      	b.n	800246a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002442:	f7ff fe9f 	bl	8002184 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b05      	cmp	r3, #5
 800244e:	d90c      	bls.n	800246a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2203      	movs	r2, #3
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e015      	b.n	8002496 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1e4      	bne.n	8002442 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247c:	223f      	movs	r2, #63	@ 0x3f
 800247e:	409a      	lsls	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d004      	beq.n	80024bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2280      	movs	r2, #128	@ 0x80
 80024b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e00c      	b.n	80024d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2205      	movs	r2, #5
 80024c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	@ 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	e16b      	b.n	80027d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002500:	2201      	movs	r2, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	429a      	cmp	r2, r3
 800251a:	f040 815a 	bne.w	80027d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d005      	beq.n	8002536 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002532:	2b02      	cmp	r3, #2
 8002534:	d130      	bne.n	8002598 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800256c:	2201      	movs	r2, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 0201 	and.w	r2, r3, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d017      	beq.n	80025d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d123      	bne.n	8002628 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	08da      	lsrs	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3208      	adds	r2, #8
 80025e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	220f      	movs	r2, #15
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	08da      	lsrs	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3208      	adds	r2, #8
 8002622:	69b9      	ldr	r1, [r7, #24]
 8002624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	2203      	movs	r2, #3
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0203 	and.w	r2, r3, #3
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80b4 	beq.w	80027d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b60      	ldr	r3, [pc, #384]	@ (80027f0 <HAL_GPIO_Init+0x30c>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	4a5f      	ldr	r2, [pc, #380]	@ (80027f0 <HAL_GPIO_Init+0x30c>)
 8002674:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002678:	6453      	str	r3, [r2, #68]	@ 0x44
 800267a:	4b5d      	ldr	r3, [pc, #372]	@ (80027f0 <HAL_GPIO_Init+0x30c>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002686:	4a5b      	ldr	r2, [pc, #364]	@ (80027f4 <HAL_GPIO_Init+0x310>)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	220f      	movs	r2, #15
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	@ (80027f8 <HAL_GPIO_Init+0x314>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d02b      	beq.n	800270a <HAL_GPIO_Init+0x226>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a51      	ldr	r2, [pc, #324]	@ (80027fc <HAL_GPIO_Init+0x318>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d025      	beq.n	8002706 <HAL_GPIO_Init+0x222>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a50      	ldr	r2, [pc, #320]	@ (8002800 <HAL_GPIO_Init+0x31c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01f      	beq.n	8002702 <HAL_GPIO_Init+0x21e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002804 <HAL_GPIO_Init+0x320>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d019      	beq.n	80026fe <HAL_GPIO_Init+0x21a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002808 <HAL_GPIO_Init+0x324>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <HAL_GPIO_Init+0x216>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4d      	ldr	r2, [pc, #308]	@ (800280c <HAL_GPIO_Init+0x328>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00d      	beq.n	80026f6 <HAL_GPIO_Init+0x212>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002810 <HAL_GPIO_Init+0x32c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d007      	beq.n	80026f2 <HAL_GPIO_Init+0x20e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002814 <HAL_GPIO_Init+0x330>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_GPIO_Init+0x20a>
 80026ea:	2307      	movs	r3, #7
 80026ec:	e00e      	b.n	800270c <HAL_GPIO_Init+0x228>
 80026ee:	2308      	movs	r3, #8
 80026f0:	e00c      	b.n	800270c <HAL_GPIO_Init+0x228>
 80026f2:	2306      	movs	r3, #6
 80026f4:	e00a      	b.n	800270c <HAL_GPIO_Init+0x228>
 80026f6:	2305      	movs	r3, #5
 80026f8:	e008      	b.n	800270c <HAL_GPIO_Init+0x228>
 80026fa:	2304      	movs	r3, #4
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x228>
 80026fe:	2303      	movs	r3, #3
 8002700:	e004      	b.n	800270c <HAL_GPIO_Init+0x228>
 8002702:	2302      	movs	r3, #2
 8002704:	e002      	b.n	800270c <HAL_GPIO_Init+0x228>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_GPIO_Init+0x228>
 800270a:	2300      	movs	r3, #0
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	f002 0203 	and.w	r2, r2, #3
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	4093      	lsls	r3, r2
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800271c:	4935      	ldr	r1, [pc, #212]	@ (80027f4 <HAL_GPIO_Init+0x310>)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272a:	4b3b      	ldr	r3, [pc, #236]	@ (8002818 <HAL_GPIO_Init+0x334>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274e:	4a32      	ldr	r2, [pc, #200]	@ (8002818 <HAL_GPIO_Init+0x334>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002754:	4b30      	ldr	r3, [pc, #192]	@ (8002818 <HAL_GPIO_Init+0x334>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002778:	4a27      	ldr	r2, [pc, #156]	@ (8002818 <HAL_GPIO_Init+0x334>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800277e:	4b26      	ldr	r3, [pc, #152]	@ (8002818 <HAL_GPIO_Init+0x334>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002818 <HAL_GPIO_Init+0x334>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <HAL_GPIO_Init+0x334>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027cc:	4a12      	ldr	r2, [pc, #72]	@ (8002818 <HAL_GPIO_Init+0x334>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	f67f ae90 	bls.w	8002500 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3724      	adds	r7, #36	@ 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40013800 	.word	0x40013800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40020400 	.word	0x40020400
 8002800:	40020800 	.word	0x40020800
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40021000 	.word	0x40021000
 800280c:	40021400 	.word	0x40021400
 8002810:	40021800 	.word	0x40021800
 8002814:	40021c00 	.word	0x40021c00
 8002818:	40013c00 	.word	0x40013c00

0800281c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	887b      	ldrh	r3, [r7, #2]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	e001      	b.n	800283e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
 8002858:	4613      	mov	r3, r2
 800285a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800285c:	787b      	ldrb	r3, [r7, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002868:	e003      	b.n	8002872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800286a:	887b      	ldrh	r3, [r7, #2]
 800286c:	041a      	lsls	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	619a      	str	r2, [r3, #24]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e267      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d075      	beq.n	800298a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800289e:	4b88      	ldr	r3, [pc, #544]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d00c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b85      	ldr	r3, [pc, #532]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d112      	bne.n	80028dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b6:	4b82      	ldr	r3, [pc, #520]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028c2:	d10b      	bne.n	80028dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d05b      	beq.n	8002988 <HAL_RCC_OscConfig+0x108>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d157      	bne.n	8002988 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e242      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e4:	d106      	bne.n	80028f4 <HAL_RCC_OscConfig+0x74>
 80028e6:	4b76      	ldr	r3, [pc, #472]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a75      	ldr	r2, [pc, #468]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e01d      	b.n	8002930 <HAL_RCC_OscConfig+0xb0>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x98>
 80028fe:	4b70      	ldr	r3, [pc, #448]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6f      	ldr	r2, [pc, #444]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a6c      	ldr	r2, [pc, #432]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0xb0>
 8002918:	4b69      	ldr	r3, [pc, #420]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a68      	ldr	r2, [pc, #416]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 800291e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b66      	ldr	r3, [pc, #408]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a65      	ldr	r2, [pc, #404]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 800292a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800292e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7ff fc24 	bl	8002184 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002940:	f7ff fc20 	bl	8002184 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	@ 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e207      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b5b      	ldr	r3, [pc, #364]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0xc0>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7ff fc10 	bl	8002184 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002968:	f7ff fc0c 	bl	8002184 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	@ 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e1f3      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	4b51      	ldr	r3, [pc, #324]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0xe8>
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d063      	beq.n	8002a5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002996:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b47      	ldr	r3, [pc, #284]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d11c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ae:	4b44      	ldr	r3, [pc, #272]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d116      	bne.n	80029e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_RCC_OscConfig+0x152>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e1c7      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4937      	ldr	r1, [pc, #220]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	e03a      	b.n	8002a5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f0:	4b34      	ldr	r3, [pc, #208]	@ (8002ac4 <HAL_RCC_OscConfig+0x244>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7ff fbc5 	bl	8002184 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fe:	f7ff fbc1 	bl	8002184 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e1a8      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4925      	ldr	r1, [pc, #148]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]
 8002a30:	e015      	b.n	8002a5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a32:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <HAL_RCC_OscConfig+0x244>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7ff fba4 	bl	8002184 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a40:	f7ff fba0 	bl	8002184 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e187      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d036      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <HAL_RCC_OscConfig+0x248>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7ff fb84 	bl	8002184 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a80:	f7ff fb80 	bl	8002184 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e167      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x200>
 8002a9e:	e01b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa0:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_RCC_OscConfig+0x248>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa6:	f7ff fb6d 	bl	8002184 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	e00e      	b.n	8002acc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aae:	f7ff fb69 	bl	8002184 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d907      	bls.n	8002acc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e150      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	42470000 	.word	0x42470000
 8002ac8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002acc:	4b88      	ldr	r3, [pc, #544]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ea      	bne.n	8002aae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8097 	beq.w	8002c14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aea:	4b81      	ldr	r3, [pc, #516]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b7d      	ldr	r3, [pc, #500]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	4a7c      	ldr	r2, [pc, #496]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b06:	4b7a      	ldr	r3, [pc, #488]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b12:	2301      	movs	r3, #1
 8002b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	4b77      	ldr	r3, [pc, #476]	@ (8002cf4 <HAL_RCC_OscConfig+0x474>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d118      	bne.n	8002b54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b22:	4b74      	ldr	r3, [pc, #464]	@ (8002cf4 <HAL_RCC_OscConfig+0x474>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a73      	ldr	r2, [pc, #460]	@ (8002cf4 <HAL_RCC_OscConfig+0x474>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2e:	f7ff fb29 	bl	8002184 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b36:	f7ff fb25 	bl	8002184 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e10c      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	4b6a      	ldr	r3, [pc, #424]	@ (8002cf4 <HAL_RCC_OscConfig+0x474>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x2ea>
 8002b5c:	4b64      	ldr	r3, [pc, #400]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b60:	4a63      	ldr	r2, [pc, #396]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b68:	e01c      	b.n	8002ba4 <HAL_RCC_OscConfig+0x324>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x30c>
 8002b72:	4b5f      	ldr	r3, [pc, #380]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b76:	4a5e      	ldr	r2, [pc, #376]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7e:	4b5c      	ldr	r3, [pc, #368]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b82:	4a5b      	ldr	r2, [pc, #364]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x324>
 8002b8c:	4b58      	ldr	r3, [pc, #352]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b90:	4a57      	ldr	r2, [pc, #348]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b98:	4b55      	ldr	r3, [pc, #340]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9c:	4a54      	ldr	r2, [pc, #336]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	f023 0304 	bic.w	r3, r3, #4
 8002ba2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7ff faea 	bl	8002184 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb4:	f7ff fae6 	bl	8002184 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e0cb      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	4b49      	ldr	r3, [pc, #292]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ee      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x334>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd8:	f7ff fad4 	bl	8002184 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f7ff fad0 	bl	8002184 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e0b5      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1ee      	bne.n	8002be0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c08:	4b39      	ldr	r3, [pc, #228]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	4a38      	ldr	r2, [pc, #224]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80a1 	beq.w	8002d60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c1e:	4b34      	ldr	r3, [pc, #208]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d05c      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d141      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c32:	4b31      	ldr	r3, [pc, #196]	@ (8002cf8 <HAL_RCC_OscConfig+0x478>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7ff faa4 	bl	8002184 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c40:	f7ff faa0 	bl	8002184 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e087      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	4b27      	ldr	r3, [pc, #156]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	3b01      	subs	r3, #1
 8002c78:	041b      	lsls	r3, r3, #16
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	491b      	ldr	r1, [pc, #108]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c88:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf8 <HAL_RCC_OscConfig+0x478>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7ff fa79 	bl	8002184 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c96:	f7ff fa75 	bl	8002184 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e05c      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca8:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x416>
 8002cb4:	e054      	b.n	8002d60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb6:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <HAL_RCC_OscConfig+0x478>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7ff fa62 	bl	8002184 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7ff fa5e 	bl	8002184 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e045      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x444>
 8002ce2:	e03d      	b.n	8002d60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e038      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40007000 	.word	0x40007000
 8002cf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d6c <HAL_RCC_OscConfig+0x4ec>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d028      	beq.n	8002d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d121      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d11a      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d111      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	3b01      	subs	r3, #1
 8002d46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d107      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800

08002d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0cc      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d84:	4b68      	ldr	r3, [pc, #416]	@ (8002f28 <HAL_RCC_ClockConfig+0x1b8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d90c      	bls.n	8002dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b65      	ldr	r3, [pc, #404]	@ (8002f28 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b63      	ldr	r3, [pc, #396]	@ (8002f28 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0b8      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d020      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc4:	4b59      	ldr	r3, [pc, #356]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a58      	ldr	r2, [pc, #352]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ddc:	4b53      	ldr	r3, [pc, #332]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a52      	ldr	r2, [pc, #328]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de8:	4b50      	ldr	r3, [pc, #320]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	494d      	ldr	r1, [pc, #308]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d044      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	4b47      	ldr	r3, [pc, #284]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d119      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e07f      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d003      	beq.n	8002e2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e06f      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e067      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e4e:	4b37      	ldr	r3, [pc, #220]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f023 0203 	bic.w	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4934      	ldr	r1, [pc, #208]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e60:	f7ff f990 	bl	8002184 <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e68:	f7ff f98c 	bl	8002184 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e04f      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 020c 	and.w	r2, r3, #12
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d1eb      	bne.n	8002e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e90:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <HAL_RCC_ClockConfig+0x1b8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d20c      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b22      	ldr	r3, [pc, #136]	@ (8002f28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b20      	ldr	r3, [pc, #128]	@ (8002f28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e032      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec4:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4916      	ldr	r1, [pc, #88]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ee2:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	490e      	ldr	r1, [pc, #56]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ef6:	f000 f821 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002efa:	4602      	mov	r2, r0
 8002efc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	490a      	ldr	r1, [pc, #40]	@ (8002f30 <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	5ccb      	ldrb	r3, [r1, r3]
 8002f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0e:	4a09      	ldr	r2, [pc, #36]	@ (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f12:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <HAL_RCC_ClockConfig+0x1c8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff f8f0 	bl	80020fc <HAL_InitTick>

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40023c00 	.word	0x40023c00
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	08006fd4 	.word	0x08006fd4
 8002f34:	20000000 	.word	0x20000000
 8002f38:	20000004 	.word	0x20000004

08002f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f40:	b090      	sub	sp, #64	@ 0x40
 8002f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f48:	2300      	movs	r3, #0
 8002f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f54:	4b59      	ldr	r3, [pc, #356]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 030c 	and.w	r3, r3, #12
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d00d      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x40>
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	f200 80a1 	bhi.w	80030a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x34>
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f6e:	e09b      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f70:	4b53      	ldr	r3, [pc, #332]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f72:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002f74:	e09b      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f76:	4b53      	ldr	r3, [pc, #332]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f7a:	e098      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f84:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f86:	4b4d      	ldr	r3, [pc, #308]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d028      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f92:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	099b      	lsrs	r3, r3, #6
 8002f98:	2200      	movs	r2, #0
 8002f9a:	623b      	str	r3, [r7, #32]
 8002f9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4b47      	ldr	r3, [pc, #284]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fa8:	fb03 f201 	mul.w	r2, r3, r1
 8002fac:	2300      	movs	r3, #0
 8002fae:	fb00 f303 	mul.w	r3, r0, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a43      	ldr	r2, [pc, #268]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fb6:	fba0 1202 	umull	r1, r2, r0, r2
 8002fba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002fc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc2:	4413      	add	r3, r2
 8002fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc8:	2200      	movs	r2, #0
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	61fa      	str	r2, [r7, #28]
 8002fce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002fd6:	f7fd f953 	bl	8000280 <__aeabi_uldivmod>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4613      	mov	r3, r2
 8002fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fe2:	e053      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe4:	4b35      	ldr	r3, [pc, #212]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	2200      	movs	r2, #0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	617a      	str	r2, [r7, #20]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ff6:	f04f 0b00 	mov.w	fp, #0
 8002ffa:	4652      	mov	r2, sl
 8002ffc:	465b      	mov	r3, fp
 8002ffe:	f04f 0000 	mov.w	r0, #0
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	0159      	lsls	r1, r3, #5
 8003008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800300c:	0150      	lsls	r0, r2, #5
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	ebb2 080a 	subs.w	r8, r2, sl
 8003016:	eb63 090b 	sbc.w	r9, r3, fp
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003026:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800302a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800302e:	ebb2 0408 	subs.w	r4, r2, r8
 8003032:	eb63 0509 	sbc.w	r5, r3, r9
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	00eb      	lsls	r3, r5, #3
 8003040:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003044:	00e2      	lsls	r2, r4, #3
 8003046:	4614      	mov	r4, r2
 8003048:	461d      	mov	r5, r3
 800304a:	eb14 030a 	adds.w	r3, r4, sl
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	eb45 030b 	adc.w	r3, r5, fp
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003062:	4629      	mov	r1, r5
 8003064:	028b      	lsls	r3, r1, #10
 8003066:	4621      	mov	r1, r4
 8003068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800306c:	4621      	mov	r1, r4
 800306e:	028a      	lsls	r2, r1, #10
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003076:	2200      	movs	r2, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	60fa      	str	r2, [r7, #12]
 800307c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003080:	f7fd f8fe 	bl	8000280 <__aeabi_uldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4613      	mov	r3, r2
 800308a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800308c:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x180>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	3301      	adds	r3, #1
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800309c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030a6:	e002      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a8:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80030aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3740      	adds	r7, #64	@ 0x40
 80030b4:	46bd      	mov	sp, r7
 80030b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	017d7840 	.word	0x017d7840

080030c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b03      	ldr	r3, [pc, #12]	@ (80030dc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000000 	.word	0x20000000

080030e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030e4:	f7ff fff0 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0a9b      	lsrs	r3, r3, #10
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4903      	ldr	r1, [pc, #12]	@ (8003104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	08006fe4 	.word	0x08006fe4

08003108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800310c:	f7ff ffdc 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0b5b      	lsrs	r3, r3, #13
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4903      	ldr	r1, [pc, #12]	@ (800312c <HAL_RCC_GetPCLK2Freq+0x24>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	08006fe4 	.word	0x08006fe4

08003130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e041      	b.n	80031c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fbc2 	bl	80018e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3304      	adds	r3, #4
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f000 feca 	bl	8003f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d001      	beq.n	80031e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e046      	b.n	8003276 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a23      	ldr	r2, [pc, #140]	@ (8003284 <HAL_TIM_Base_Start+0xb4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d022      	beq.n	8003240 <HAL_TIM_Base_Start+0x70>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003202:	d01d      	beq.n	8003240 <HAL_TIM_Base_Start+0x70>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1f      	ldr	r2, [pc, #124]	@ (8003288 <HAL_TIM_Base_Start+0xb8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d018      	beq.n	8003240 <HAL_TIM_Base_Start+0x70>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1e      	ldr	r2, [pc, #120]	@ (800328c <HAL_TIM_Base_Start+0xbc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d013      	beq.n	8003240 <HAL_TIM_Base_Start+0x70>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1c      	ldr	r2, [pc, #112]	@ (8003290 <HAL_TIM_Base_Start+0xc0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00e      	beq.n	8003240 <HAL_TIM_Base_Start+0x70>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1b      	ldr	r2, [pc, #108]	@ (8003294 <HAL_TIM_Base_Start+0xc4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d009      	beq.n	8003240 <HAL_TIM_Base_Start+0x70>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a19      	ldr	r2, [pc, #100]	@ (8003298 <HAL_TIM_Base_Start+0xc8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d004      	beq.n	8003240 <HAL_TIM_Base_Start+0x70>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a18      	ldr	r2, [pc, #96]	@ (800329c <HAL_TIM_Base_Start+0xcc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d111      	bne.n	8003264 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b06      	cmp	r3, #6
 8003250:	d010      	beq.n	8003274 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003262:	e007      	b.n	8003274 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40010000 	.word	0x40010000
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40000c00 	.word	0x40000c00
 8003294:	40010400 	.word	0x40010400
 8003298:	40014000 	.word	0x40014000
 800329c:	40001800 	.word	0x40001800

080032a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d001      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e04e      	b.n	8003356 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a23      	ldr	r2, [pc, #140]	@ (8003364 <HAL_TIM_Base_Start_IT+0xc4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d022      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e2:	d01d      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003368 <HAL_TIM_Base_Start_IT+0xc8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d018      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1e      	ldr	r2, [pc, #120]	@ (800336c <HAL_TIM_Base_Start_IT+0xcc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003370 <HAL_TIM_Base_Start_IT+0xd0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1b      	ldr	r2, [pc, #108]	@ (8003374 <HAL_TIM_Base_Start_IT+0xd4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a19      	ldr	r2, [pc, #100]	@ (8003378 <HAL_TIM_Base_Start_IT+0xd8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a18      	ldr	r2, [pc, #96]	@ (800337c <HAL_TIM_Base_Start_IT+0xdc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d111      	bne.n	8003344 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b06      	cmp	r3, #6
 8003330:	d010      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003342:	e007      	b.n	8003354 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800
 8003370:	40000c00 	.word	0x40000c00
 8003374:	40010400 	.word	0x40010400
 8003378:	40014000 	.word	0x40014000
 800337c:	40001800 	.word	0x40001800

08003380 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e041      	b.n	8003416 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f839 	bl	800341e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f000 fda2 	bl	8003f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e041      	b.n	80034c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d106      	bne.n	800345e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fe fabf 	bl	80019dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	4619      	mov	r1, r3
 8003470:	4610      	mov	r0, r2
 8003472:	f000 fd49 	bl	8003f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <HAL_TIM_PWM_Start+0x24>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	e022      	b.n	800353a <HAL_TIM_PWM_Start+0x6a>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d109      	bne.n	800350e <HAL_TIM_PWM_Start+0x3e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	bf14      	ite	ne
 8003506:	2301      	movne	r3, #1
 8003508:	2300      	moveq	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	e015      	b.n	800353a <HAL_TIM_PWM_Start+0x6a>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b08      	cmp	r3, #8
 8003512:	d109      	bne.n	8003528 <HAL_TIM_PWM_Start+0x58>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	bf14      	ite	ne
 8003520:	2301      	movne	r3, #1
 8003522:	2300      	moveq	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	e008      	b.n	800353a <HAL_TIM_PWM_Start+0x6a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e07c      	b.n	800363c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d104      	bne.n	8003552 <HAL_TIM_PWM_Start+0x82>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003550:	e013      	b.n	800357a <HAL_TIM_PWM_Start+0xaa>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b04      	cmp	r3, #4
 8003556:	d104      	bne.n	8003562 <HAL_TIM_PWM_Start+0x92>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003560:	e00b      	b.n	800357a <HAL_TIM_PWM_Start+0xaa>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b08      	cmp	r3, #8
 8003566:	d104      	bne.n	8003572 <HAL_TIM_PWM_Start+0xa2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003570:	e003      	b.n	800357a <HAL_TIM_PWM_Start+0xaa>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2201      	movs	r2, #1
 8003580:	6839      	ldr	r1, [r7, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f000 ffaa 	bl	80044dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2d      	ldr	r2, [pc, #180]	@ (8003644 <HAL_TIM_PWM_Start+0x174>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <HAL_TIM_PWM_Start+0xcc>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2c      	ldr	r2, [pc, #176]	@ (8003648 <HAL_TIM_PWM_Start+0x178>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_TIM_PWM_Start+0xd0>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_TIM_PWM_Start+0xd2>
 80035a0:	2300      	movs	r3, #0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a22      	ldr	r2, [pc, #136]	@ (8003644 <HAL_TIM_PWM_Start+0x174>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d022      	beq.n	8003606 <HAL_TIM_PWM_Start+0x136>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c8:	d01d      	beq.n	8003606 <HAL_TIM_PWM_Start+0x136>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1f      	ldr	r2, [pc, #124]	@ (800364c <HAL_TIM_PWM_Start+0x17c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d018      	beq.n	8003606 <HAL_TIM_PWM_Start+0x136>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003650 <HAL_TIM_PWM_Start+0x180>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d013      	beq.n	8003606 <HAL_TIM_PWM_Start+0x136>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003654 <HAL_TIM_PWM_Start+0x184>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00e      	beq.n	8003606 <HAL_TIM_PWM_Start+0x136>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a16      	ldr	r2, [pc, #88]	@ (8003648 <HAL_TIM_PWM_Start+0x178>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d009      	beq.n	8003606 <HAL_TIM_PWM_Start+0x136>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a18      	ldr	r2, [pc, #96]	@ (8003658 <HAL_TIM_PWM_Start+0x188>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d004      	beq.n	8003606 <HAL_TIM_PWM_Start+0x136>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a16      	ldr	r2, [pc, #88]	@ (800365c <HAL_TIM_PWM_Start+0x18c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d111      	bne.n	800362a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b06      	cmp	r3, #6
 8003616:	d010      	beq.n	800363a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003628:	e007      	b.n	800363a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0201 	orr.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40010000 	.word	0x40010000
 8003648:	40010400 	.word	0x40010400
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40014000 	.word	0x40014000
 800365c:	40001800 	.word	0x40001800

08003660 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e097      	b.n	80037a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f88f 	bl	80037ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036a4:	f023 0307 	bic.w	r3, r3, #7
 80036a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	4619      	mov	r1, r3
 80036b4:	4610      	mov	r0, r2
 80036b6:	f000 fc27 	bl	8003f08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036e2:	f023 0303 	bic.w	r3, r3, #3
 80036e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	4313      	orrs	r3, r2
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003700:	f023 030c 	bic.w	r3, r3, #12
 8003704:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800370c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	4313      	orrs	r3, r2
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	011a      	lsls	r2, r3, #4
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	031b      	lsls	r3, r3, #12
 8003730:	4313      	orrs	r3, r2
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800373e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003746:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	4313      	orrs	r3, r2
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d110      	bne.n	8003812 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d102      	bne.n	80037fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80037f6:	7b7b      	ldrb	r3, [r7, #13]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d001      	beq.n	8003800 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e069      	b.n	80038d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003810:	e031      	b.n	8003876 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b04      	cmp	r3, #4
 8003816:	d110      	bne.n	800383a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003818:	7bbb      	ldrb	r3, [r7, #14]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800381e:	7b3b      	ldrb	r3, [r7, #12]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d001      	beq.n	8003828 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e055      	b.n	80038d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003838:	e01d      	b.n	8003876 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d108      	bne.n	8003852 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003840:	7bbb      	ldrb	r3, [r7, #14]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d105      	bne.n	8003852 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003846:	7b7b      	ldrb	r3, [r7, #13]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d102      	bne.n	8003852 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800384c:	7b3b      	ldrb	r3, [r7, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d001      	beq.n	8003856 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e03e      	b.n	80038d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_TIM_Encoder_Start+0xc4>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b04      	cmp	r3, #4
 8003880:	d008      	beq.n	8003894 <HAL_TIM_Encoder_Start+0xd4>
 8003882:	e00f      	b.n	80038a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2201      	movs	r2, #1
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fe25 	bl	80044dc <TIM_CCxChannelCmd>
      break;
 8003892:	e016      	b.n	80038c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2201      	movs	r2, #1
 800389a:	2104      	movs	r1, #4
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fe1d 	bl	80044dc <TIM_CCxChannelCmd>
      break;
 80038a2:	e00e      	b.n	80038c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2201      	movs	r2, #1
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fe15 	bl	80044dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2201      	movs	r2, #1
 80038b8:	2104      	movs	r1, #4
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fe0e 	bl	80044dc <TIM_CCxChannelCmd>
      break;
 80038c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d122      	bne.n	8003938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d11b      	bne.n	8003938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0202 	mvn.w	r2, #2
 8003908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fad3 	bl	8003eca <HAL_TIM_IC_CaptureCallback>
 8003924:	e005      	b.n	8003932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fac5 	bl	8003eb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fad6 	bl	8003ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b04      	cmp	r3, #4
 8003944:	d122      	bne.n	800398c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b04      	cmp	r3, #4
 8003952:	d11b      	bne.n	800398c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0204 	mvn.w	r2, #4
 800395c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 faa9 	bl	8003eca <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fa9b 	bl	8003eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 faac 	bl	8003ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b08      	cmp	r3, #8
 8003998:	d122      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d11b      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0208 	mvn.w	r2, #8
 80039b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2204      	movs	r2, #4
 80039b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fa7f 	bl	8003eca <HAL_TIM_IC_CaptureCallback>
 80039cc:	e005      	b.n	80039da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fa71 	bl	8003eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fa82 	bl	8003ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d122      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d11b      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0210 	mvn.w	r2, #16
 8003a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fa55 	bl	8003eca <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fa47 	bl	8003eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fa58 	bl	8003ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d10e      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d107      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0201 	mvn.w	r2, #1
 8003a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fc fe58 	bl	8000710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6a:	2b80      	cmp	r3, #128	@ 0x80
 8003a6c:	d10e      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a78:	2b80      	cmp	r3, #128	@ 0x80
 8003a7a:	d107      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fe26 	bl	80046d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a96:	2b40      	cmp	r3, #64	@ 0x40
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa4:	2b40      	cmp	r3, #64	@ 0x40
 8003aa6:	d107      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa1d 	bl	8003ef2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d107      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0220 	mvn.w	r2, #32
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fdf0 	bl	80046c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e048      	b.n	8003b9c <HAL_TIM_OC_ConfigChannel+0xb0>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b0c      	cmp	r3, #12
 8003b16:	d839      	bhi.n	8003b8c <HAL_TIM_OC_ConfigChannel+0xa0>
 8003b18:	a201      	add	r2, pc, #4	@ (adr r2, 8003b20 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1e:	bf00      	nop
 8003b20:	08003b55 	.word	0x08003b55
 8003b24:	08003b8d 	.word	0x08003b8d
 8003b28:	08003b8d 	.word	0x08003b8d
 8003b2c:	08003b8d 	.word	0x08003b8d
 8003b30:	08003b63 	.word	0x08003b63
 8003b34:	08003b8d 	.word	0x08003b8d
 8003b38:	08003b8d 	.word	0x08003b8d
 8003b3c:	08003b8d 	.word	0x08003b8d
 8003b40:	08003b71 	.word	0x08003b71
 8003b44:	08003b8d 	.word	0x08003b8d
 8003b48:	08003b8d 	.word	0x08003b8d
 8003b4c:	08003b8d 	.word	0x08003b8d
 8003b50:	08003b7f 	.word	0x08003b7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fa74 	bl	8004048 <TIM_OC1_SetConfig>
      break;
 8003b60:	e017      	b.n	8003b92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fadd 	bl	8004128 <TIM_OC2_SetConfig>
      break;
 8003b6e:	e010      	b.n	8003b92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fb4c 	bl	8004214 <TIM_OC3_SetConfig>
      break;
 8003b7c:	e009      	b.n	8003b92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fbb9 	bl	80042fc <TIM_OC4_SetConfig>
      break;
 8003b8a:	e002      	b.n	8003b92 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e0ae      	b.n	8003d20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b0c      	cmp	r3, #12
 8003bce:	f200 809f 	bhi.w	8003d10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003c0d 	.word	0x08003c0d
 8003bdc:	08003d11 	.word	0x08003d11
 8003be0:	08003d11 	.word	0x08003d11
 8003be4:	08003d11 	.word	0x08003d11
 8003be8:	08003c4d 	.word	0x08003c4d
 8003bec:	08003d11 	.word	0x08003d11
 8003bf0:	08003d11 	.word	0x08003d11
 8003bf4:	08003d11 	.word	0x08003d11
 8003bf8:	08003c8f 	.word	0x08003c8f
 8003bfc:	08003d11 	.word	0x08003d11
 8003c00:	08003d11 	.word	0x08003d11
 8003c04:	08003d11 	.word	0x08003d11
 8003c08:	08003ccf 	.word	0x08003ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fa18 	bl	8004048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0208 	orr.w	r2, r2, #8
 8003c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0204 	bic.w	r2, r2, #4
 8003c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6999      	ldr	r1, [r3, #24]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	619a      	str	r2, [r3, #24]
      break;
 8003c4a:	e064      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fa68 	bl	8004128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6999      	ldr	r1, [r3, #24]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	021a      	lsls	r2, r3, #8
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	619a      	str	r2, [r3, #24]
      break;
 8003c8c:	e043      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fabd 	bl	8004214 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0208 	orr.w	r2, r2, #8
 8003ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0204 	bic.w	r2, r2, #4
 8003cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69d9      	ldr	r1, [r3, #28]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	61da      	str	r2, [r3, #28]
      break;
 8003ccc:	e023      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fb11 	bl	80042fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69d9      	ldr	r1, [r3, #28]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	021a      	lsls	r2, r3, #8
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	61da      	str	r2, [r3, #28]
      break;
 8003d0e:	e002      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
      break;
 8003d14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_TIM_ConfigClockSource+0x1c>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e0b4      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x186>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d7c:	d03e      	beq.n	8003dfc <HAL_TIM_ConfigClockSource+0xd4>
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d82:	f200 8087 	bhi.w	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8a:	f000 8086 	beq.w	8003e9a <HAL_TIM_ConfigClockSource+0x172>
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d92:	d87f      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b70      	cmp	r3, #112	@ 0x70
 8003d96:	d01a      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0xa6>
 8003d98:	2b70      	cmp	r3, #112	@ 0x70
 8003d9a:	d87b      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003d9c:	2b60      	cmp	r3, #96	@ 0x60
 8003d9e:	d050      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x11a>
 8003da0:	2b60      	cmp	r3, #96	@ 0x60
 8003da2:	d877      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003da4:	2b50      	cmp	r3, #80	@ 0x50
 8003da6:	d03c      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0xfa>
 8003da8:	2b50      	cmp	r3, #80	@ 0x50
 8003daa:	d873      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003dac:	2b40      	cmp	r3, #64	@ 0x40
 8003dae:	d058      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x13a>
 8003db0:	2b40      	cmp	r3, #64	@ 0x40
 8003db2:	d86f      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003db4:	2b30      	cmp	r3, #48	@ 0x30
 8003db6:	d064      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x15a>
 8003db8:	2b30      	cmp	r3, #48	@ 0x30
 8003dba:	d86b      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d060      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x15a>
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d867      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d05c      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x15a>
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d05a      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x15a>
 8003dcc:	e062      	b.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6899      	ldr	r1, [r3, #8]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f000 fb5d 	bl	800449c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003df0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	609a      	str	r2, [r3, #8]
      break;
 8003dfa:	e04f      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6899      	ldr	r1, [r3, #8]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f000 fb46 	bl	800449c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e1e:	609a      	str	r2, [r3, #8]
      break;
 8003e20:	e03c      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f000 faba 	bl	80043a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2150      	movs	r1, #80	@ 0x50
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fb13 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8003e40:	e02c      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6859      	ldr	r1, [r3, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f000 fad9 	bl	8004406 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2160      	movs	r1, #96	@ 0x60
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fb03 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8003e60:	e01c      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f000 fa9a 	bl	80043a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2140      	movs	r1, #64	@ 0x40
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 faf3 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8003e80:	e00c      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f000 faea 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8003e92:	e003      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
      break;
 8003e98:	e000      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a40      	ldr	r2, [pc, #256]	@ (800401c <TIM_Base_SetConfig+0x114>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d013      	beq.n	8003f48 <TIM_Base_SetConfig+0x40>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f26:	d00f      	beq.n	8003f48 <TIM_Base_SetConfig+0x40>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a3d      	ldr	r2, [pc, #244]	@ (8004020 <TIM_Base_SetConfig+0x118>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00b      	beq.n	8003f48 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a3c      	ldr	r2, [pc, #240]	@ (8004024 <TIM_Base_SetConfig+0x11c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d007      	beq.n	8003f48 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8004028 <TIM_Base_SetConfig+0x120>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3a      	ldr	r2, [pc, #232]	@ (800402c <TIM_Base_SetConfig+0x124>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d108      	bne.n	8003f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800401c <TIM_Base_SetConfig+0x114>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d02b      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f68:	d027      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004020 <TIM_Base_SetConfig+0x118>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d023      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a2b      	ldr	r2, [pc, #172]	@ (8004024 <TIM_Base_SetConfig+0x11c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01f      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004028 <TIM_Base_SetConfig+0x120>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01b      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a29      	ldr	r2, [pc, #164]	@ (800402c <TIM_Base_SetConfig+0x124>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d017      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a28      	ldr	r2, [pc, #160]	@ (8004030 <TIM_Base_SetConfig+0x128>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a27      	ldr	r2, [pc, #156]	@ (8004034 <TIM_Base_SetConfig+0x12c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00f      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a26      	ldr	r2, [pc, #152]	@ (8004038 <TIM_Base_SetConfig+0x130>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00b      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a25      	ldr	r2, [pc, #148]	@ (800403c <TIM_Base_SetConfig+0x134>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d007      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a24      	ldr	r2, [pc, #144]	@ (8004040 <TIM_Base_SetConfig+0x138>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d003      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a23      	ldr	r2, [pc, #140]	@ (8004044 <TIM_Base_SetConfig+0x13c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d108      	bne.n	8003fcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800401c <TIM_Base_SetConfig+0x114>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_Base_SetConfig+0xf8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800402c <TIM_Base_SetConfig+0x124>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d103      	bne.n	8004008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	615a      	str	r2, [r3, #20]
}
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40010000 	.word	0x40010000
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800
 8004028:	40000c00 	.word	0x40000c00
 800402c:	40010400 	.word	0x40010400
 8004030:	40014000 	.word	0x40014000
 8004034:	40014400 	.word	0x40014400
 8004038:	40014800 	.word	0x40014800
 800403c:	40001800 	.word	0x40001800
 8004040:	40001c00 	.word	0x40001c00
 8004044:	40002000 	.word	0x40002000

08004048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f023 0201 	bic.w	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0303 	bic.w	r3, r3, #3
 800407e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f023 0302 	bic.w	r3, r3, #2
 8004090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a20      	ldr	r2, [pc, #128]	@ (8004120 <TIM_OC1_SetConfig+0xd8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <TIM_OC1_SetConfig+0x64>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004124 <TIM_OC1_SetConfig+0xdc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d10c      	bne.n	80040c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0308 	bic.w	r3, r3, #8
 80040b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f023 0304 	bic.w	r3, r3, #4
 80040c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a15      	ldr	r2, [pc, #84]	@ (8004120 <TIM_OC1_SetConfig+0xd8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d003      	beq.n	80040d6 <TIM_OC1_SetConfig+0x8e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a14      	ldr	r2, [pc, #80]	@ (8004124 <TIM_OC1_SetConfig+0xdc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d111      	bne.n	80040fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	621a      	str	r2, [r3, #32]
}
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	40010000 	.word	0x40010000
 8004124:	40010400 	.word	0x40010400

08004128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	f023 0210 	bic.w	r2, r3, #16
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800415e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0320 	bic.w	r3, r3, #32
 8004172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a22      	ldr	r2, [pc, #136]	@ (800420c <TIM_OC2_SetConfig+0xe4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_OC2_SetConfig+0x68>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a21      	ldr	r2, [pc, #132]	@ (8004210 <TIM_OC2_SetConfig+0xe8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d10d      	bne.n	80041ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a17      	ldr	r2, [pc, #92]	@ (800420c <TIM_OC2_SetConfig+0xe4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_OC2_SetConfig+0x94>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a16      	ldr	r2, [pc, #88]	@ (8004210 <TIM_OC2_SetConfig+0xe8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d113      	bne.n	80041e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	621a      	str	r2, [r3, #32]
}
 80041fe:	bf00      	nop
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40010000 	.word	0x40010000
 8004210:	40010400 	.word	0x40010400

08004214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800425c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a21      	ldr	r2, [pc, #132]	@ (80042f4 <TIM_OC3_SetConfig+0xe0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <TIM_OC3_SetConfig+0x66>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a20      	ldr	r2, [pc, #128]	@ (80042f8 <TIM_OC3_SetConfig+0xe4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d10d      	bne.n	8004296 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a16      	ldr	r2, [pc, #88]	@ (80042f4 <TIM_OC3_SetConfig+0xe0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d003      	beq.n	80042a6 <TIM_OC3_SetConfig+0x92>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a15      	ldr	r2, [pc, #84]	@ (80042f8 <TIM_OC3_SetConfig+0xe4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d113      	bne.n	80042ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	621a      	str	r2, [r3, #32]
}
 80042e8:	bf00      	nop
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40010400 	.word	0x40010400

080042fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	031b      	lsls	r3, r3, #12
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a12      	ldr	r2, [pc, #72]	@ (80043a0 <TIM_OC4_SetConfig+0xa4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d003      	beq.n	8004364 <TIM_OC4_SetConfig+0x68>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a11      	ldr	r2, [pc, #68]	@ (80043a4 <TIM_OC4_SetConfig+0xa8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d109      	bne.n	8004378 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800436a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	019b      	lsls	r3, r3, #6
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	621a      	str	r2, [r3, #32]
}
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40010000 	.word	0x40010000
 80043a4:	40010400 	.word	0x40010400

080043a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f023 0201 	bic.w	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f023 030a 	bic.w	r3, r3, #10
 80043e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004406:	b480      	push	{r7}
 8004408:	b087      	sub	sp, #28
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0210 	bic.w	r2, r3, #16
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004430:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	031b      	lsls	r3, r3, #12
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004442:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	f043 0307 	orr.w	r3, r3, #7
 8004488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	021a      	lsls	r2, r3, #8
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	431a      	orrs	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	609a      	str	r2, [r3, #8]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	2201      	movs	r2, #1
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a1a      	ldr	r2, [r3, #32]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	401a      	ands	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a1a      	ldr	r2, [r3, #32]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	fa01 f303 	lsl.w	r3, r1, r3
 8004514:	431a      	orrs	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	621a      	str	r2, [r3, #32]
}
 800451a:	bf00      	nop
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800453c:	2302      	movs	r3, #2
 800453e:	e05a      	b.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a21      	ldr	r2, [pc, #132]	@ (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d022      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800458c:	d01d      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1d      	ldr	r2, [pc, #116]	@ (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d018      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1b      	ldr	r2, [pc, #108]	@ (800460c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a18      	ldr	r2, [pc, #96]	@ (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d009      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a17      	ldr	r2, [pc, #92]	@ (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a15      	ldr	r2, [pc, #84]	@ (800461c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d10c      	bne.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40010000 	.word	0x40010000
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800
 8004610:	40000c00 	.word	0x40000c00
 8004614:	40010400 	.word	0x40010400
 8004618:	40014000 	.word	0x40014000
 800461c:	40001800 	.word	0x40001800

08004620 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004638:	2302      	movs	r3, #2
 800463a:	e03d      	b.n	80046b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e03f      	b.n	800477e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fd faa2 	bl	8001c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	@ 0x24
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800472e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fcdf 	bl	80050f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	4613      	mov	r3, r2
 8004792:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b20      	cmp	r3, #32
 800479e:	d11d      	bne.n	80047dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_UART_Receive_IT+0x26>
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e016      	b.n	80047de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_UART_Receive_IT+0x38>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e00f      	b.n	80047de <HAL_UART_Receive_IT+0x58>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	461a      	mov	r2, r3
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fab6 	bl	8004d44 <UART_Start_Receive_IT>
 80047d8:	4603      	mov	r3, r0
 80047da:	e000      	b.n	80047de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
  }
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b0ba      	sub	sp, #232	@ 0xe8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004814:	2300      	movs	r3, #0
 8004816:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10f      	bne.n	800484e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <HAL_UART_IRQHandler+0x66>
 800483a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fb99 	bl	8004f7e <UART_Receive_IT>
      return;
 800484c:	e256      	b.n	8004cfc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800484e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 80de 	beq.w	8004a14 <HAL_UART_IRQHandler+0x22c>
 8004858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004868:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80d1 	beq.w	8004a14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00b      	beq.n	8004896 <HAL_UART_IRQHandler+0xae>
 800487e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	f043 0201 	orr.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_UART_IRQHandler+0xd2>
 80048a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	f043 0202 	orr.w	r2, r3, #2
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00b      	beq.n	80048de <HAL_UART_IRQHandler+0xf6>
 80048c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d005      	beq.n	80048de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	f043 0204 	orr.w	r2, r3, #4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d011      	beq.n	800490e <HAL_UART_IRQHandler+0x126>
 80048ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d105      	bne.n	8004902 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004906:	f043 0208 	orr.w	r2, r3, #8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 81ed 	beq.w	8004cf2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_UART_IRQHandler+0x14e>
 8004924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fb24 	bl	8004f7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004940:	2b40      	cmp	r3, #64	@ 0x40
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d103      	bne.n	8004962 <HAL_UART_IRQHandler+0x17a>
 800495a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d04f      	beq.n	8004a02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa2c 	bl	8004dc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004972:	2b40      	cmp	r3, #64	@ 0x40
 8004974:	d141      	bne.n	80049fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3314      	adds	r3, #20
 800497c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800498c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004994:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3314      	adds	r3, #20
 800499e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1d9      	bne.n	8004976 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d013      	beq.n	80049f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ce:	4a7d      	ldr	r2, [pc, #500]	@ (8004bc4 <HAL_UART_IRQHandler+0x3dc>)
 80049d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fd fd61 	bl	800249e <HAL_DMA_Abort_IT>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049ec:	4610      	mov	r0, r2
 80049ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	e00e      	b.n	8004a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f990 	bl	8004d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f8:	e00a      	b.n	8004a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f98c 	bl	8004d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	e006      	b.n	8004a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f988 	bl	8004d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8004a0e:	e170      	b.n	8004cf2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a10:	bf00      	nop
    return;
 8004a12:	e16e      	b.n	8004cf2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	f040 814a 	bne.w	8004cb2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 8143 	beq.w	8004cb2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 813c 	beq.w	8004cb2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5a:	2b40      	cmp	r3, #64	@ 0x40
 8004a5c:	f040 80b4 	bne.w	8004bc8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8140 	beq.w	8004cf6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	f080 8139 	bcs.w	8004cf6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a96:	f000 8088 	beq.w	8004baa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ac6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004aca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1d9      	bne.n	8004a9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3314      	adds	r3, #20
 8004aec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004af6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3314      	adds	r3, #20
 8004b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e1      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3314      	adds	r3, #20
 8004b28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3314      	adds	r3, #20
 8004b42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e3      	bne.n	8004b22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b7a:	f023 0310 	bic.w	r3, r3, #16
 8004b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	330c      	adds	r3, #12
 8004b88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e3      	bne.n	8004b68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fd fc0a 	bl	80023be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	4619      	mov	r1, r3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f8b6 	bl	8004d2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bc0:	e099      	b.n	8004cf6 <HAL_UART_IRQHandler+0x50e>
 8004bc2:	bf00      	nop
 8004bc4:	08004e87 	.word	0x08004e87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 808b 	beq.w	8004cfa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8086 	beq.w	8004cfa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c12:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e3      	bne.n	8004bee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3314      	adds	r3, #20
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	623b      	str	r3, [r7, #32]
   return(result);
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	f023 0301 	bic.w	r3, r3, #1
 8004c3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3314      	adds	r3, #20
 8004c46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e3      	bne.n	8004c26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	330c      	adds	r3, #12
 8004c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0310 	bic.w	r3, r3, #16
 8004c82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	330c      	adds	r3, #12
 8004c8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c90:	61fa      	str	r2, [r7, #28]
 8004c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	69b9      	ldr	r1, [r7, #24]
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e3      	bne.n	8004c6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f83e 	bl	8004d2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cb0:	e023      	b.n	8004cfa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x4ea>
 8004cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f8ef 	bl	8004eae <UART_Transmit_IT>
    return;
 8004cd0:	e014      	b.n	8004cfc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00e      	beq.n	8004cfc <HAL_UART_IRQHandler+0x514>
 8004cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f92f 	bl	8004f4e <UART_EndTransmit_IT>
    return;
 8004cf0:	e004      	b.n	8004cfc <HAL_UART_IRQHandler+0x514>
    return;
 8004cf2:	bf00      	nop
 8004cf4:	e002      	b.n	8004cfc <HAL_UART_IRQHandler+0x514>
      return;
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <HAL_UART_IRQHandler+0x514>
      return;
 8004cfa:	bf00      	nop
  }
}
 8004cfc:	37e8      	adds	r7, #232	@ 0xe8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop

08004d04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	88fa      	ldrh	r2, [r7, #6]
 8004d62:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2222      	movs	r2, #34	@ 0x22
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d90:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695a      	ldr	r2, [r3, #20]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0220 	orr.w	r2, r2, #32
 8004db0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b095      	sub	sp, #84	@ 0x54
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004de8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e5      	bne.n	8004dc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3314      	adds	r3, #20
 8004e02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f023 0301 	bic.w	r3, r3, #1
 8004e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3314      	adds	r3, #20
 8004e1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e5      	bne.n	8004dfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d119      	bne.n	8004e6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	330c      	adds	r3, #12
 8004e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f023 0310 	bic.w	r3, r3, #16
 8004e4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	330c      	adds	r3, #12
 8004e56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e58:	61ba      	str	r2, [r7, #24]
 8004e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6979      	ldr	r1, [r7, #20]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	613b      	str	r3, [r7, #16]
   return(result);
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e5      	bne.n	8004e38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e7a:	bf00      	nop
 8004e7c:	3754      	adds	r7, #84	@ 0x54
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff ff39 	bl	8004d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b21      	cmp	r3, #33	@ 0x21
 8004ec0:	d13e      	bne.n	8004f40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eca:	d114      	bne.n	8004ef6 <UART_Transmit_IT+0x48>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d110      	bne.n	8004ef6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ee8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	1c9a      	adds	r2, r3, #2
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	621a      	str	r2, [r3, #32]
 8004ef4:	e008      	b.n	8004f08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	1c59      	adds	r1, r3, #1
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6211      	str	r1, [r2, #32]
 8004f00:	781a      	ldrb	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4619      	mov	r1, r3
 8004f16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10f      	bne.n	8004f3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e000      	b.n	8004f42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
  }
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff fec8 	bl	8004d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b08c      	sub	sp, #48	@ 0x30
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b22      	cmp	r3, #34	@ 0x22
 8004f90:	f040 80ab 	bne.w	80050ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f9c:	d117      	bne.n	8004fce <UART_Receive_IT+0x50>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d113      	bne.n	8004fce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc6:	1c9a      	adds	r2, r3, #2
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fcc:	e026      	b.n	800501c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fe0:	d007      	beq.n	8004ff2 <UART_Receive_IT+0x74>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <UART_Receive_IT+0x82>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	e008      	b.n	8005012 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800500c:	b2da      	uxtb	r2, r3
 800500e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005010:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29b      	uxth	r3, r3
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4619      	mov	r1, r3
 800502a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800502c:	2b00      	cmp	r3, #0
 800502e:	d15a      	bne.n	80050e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0220 	bic.w	r2, r2, #32
 800503e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800504e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0201 	bic.w	r2, r2, #1
 800505e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506c:	2b01      	cmp	r3, #1
 800506e:	d135      	bne.n	80050dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	613b      	str	r3, [r7, #16]
   return(result);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f023 0310 	bic.w	r3, r3, #16
 800508c:	627b      	str	r3, [r7, #36]	@ 0x24
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005096:	623a      	str	r2, [r7, #32]
 8005098:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	69f9      	ldr	r1, [r7, #28]
 800509c:	6a3a      	ldr	r2, [r7, #32]
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e5      	bne.n	8005076 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d10a      	bne.n	80050ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff fe29 	bl	8004d2c <HAL_UARTEx_RxEventCallback>
 80050da:	e002      	b.n	80050e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7fb ff7d 	bl	8000fdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e002      	b.n	80050ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e000      	b.n	80050ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80050ea:	2302      	movs	r3, #2
  }
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3730      	adds	r7, #48	@ 0x30
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050f8:	b0c0      	sub	sp, #256	@ 0x100
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005110:	68d9      	ldr	r1, [r3, #12]
 8005112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	ea40 0301 	orr.w	r3, r0, r1
 800511c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	431a      	orrs	r2, r3
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	431a      	orrs	r2, r3
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800514c:	f021 010c 	bic.w	r1, r1, #12
 8005150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800515a:	430b      	orrs	r3, r1
 800515c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800515e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800516a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516e:	6999      	ldr	r1, [r3, #24]
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	ea40 0301 	orr.w	r3, r0, r1
 800517a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b8f      	ldr	r3, [pc, #572]	@ (80053c0 <UART_SetConfig+0x2cc>)
 8005184:	429a      	cmp	r2, r3
 8005186:	d005      	beq.n	8005194 <UART_SetConfig+0xa0>
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4b8d      	ldr	r3, [pc, #564]	@ (80053c4 <UART_SetConfig+0x2d0>)
 8005190:	429a      	cmp	r2, r3
 8005192:	d104      	bne.n	800519e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005194:	f7fd ffb8 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 8005198:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800519c:	e003      	b.n	80051a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800519e:	f7fd ff9f 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 80051a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051b0:	f040 810c 	bne.w	80053cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80051c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80051c6:	4622      	mov	r2, r4
 80051c8:	462b      	mov	r3, r5
 80051ca:	1891      	adds	r1, r2, r2
 80051cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80051ce:	415b      	adcs	r3, r3
 80051d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051d6:	4621      	mov	r1, r4
 80051d8:	eb12 0801 	adds.w	r8, r2, r1
 80051dc:	4629      	mov	r1, r5
 80051de:	eb43 0901 	adc.w	r9, r3, r1
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051f6:	4690      	mov	r8, r2
 80051f8:	4699      	mov	r9, r3
 80051fa:	4623      	mov	r3, r4
 80051fc:	eb18 0303 	adds.w	r3, r8, r3
 8005200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005204:	462b      	mov	r3, r5
 8005206:	eb49 0303 	adc.w	r3, r9, r3
 800520a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800520e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800521a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800521e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005222:	460b      	mov	r3, r1
 8005224:	18db      	adds	r3, r3, r3
 8005226:	653b      	str	r3, [r7, #80]	@ 0x50
 8005228:	4613      	mov	r3, r2
 800522a:	eb42 0303 	adc.w	r3, r2, r3
 800522e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005230:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005234:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005238:	f7fb f822 	bl	8000280 <__aeabi_uldivmod>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4b61      	ldr	r3, [pc, #388]	@ (80053c8 <UART_SetConfig+0x2d4>)
 8005242:	fba3 2302 	umull	r2, r3, r3, r2
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	011c      	lsls	r4, r3, #4
 800524a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800524e:	2200      	movs	r2, #0
 8005250:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005254:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005258:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800525c:	4642      	mov	r2, r8
 800525e:	464b      	mov	r3, r9
 8005260:	1891      	adds	r1, r2, r2
 8005262:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005264:	415b      	adcs	r3, r3
 8005266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005268:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800526c:	4641      	mov	r1, r8
 800526e:	eb12 0a01 	adds.w	sl, r2, r1
 8005272:	4649      	mov	r1, r9
 8005274:	eb43 0b01 	adc.w	fp, r3, r1
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005284:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005288:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800528c:	4692      	mov	sl, r2
 800528e:	469b      	mov	fp, r3
 8005290:	4643      	mov	r3, r8
 8005292:	eb1a 0303 	adds.w	r3, sl, r3
 8005296:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800529a:	464b      	mov	r3, r9
 800529c:	eb4b 0303 	adc.w	r3, fp, r3
 80052a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80052b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052b8:	460b      	mov	r3, r1
 80052ba:	18db      	adds	r3, r3, r3
 80052bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80052be:	4613      	mov	r3, r2
 80052c0:	eb42 0303 	adc.w	r3, r2, r3
 80052c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80052ce:	f7fa ffd7 	bl	8000280 <__aeabi_uldivmod>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4611      	mov	r1, r2
 80052d8:	4b3b      	ldr	r3, [pc, #236]	@ (80053c8 <UART_SetConfig+0x2d4>)
 80052da:	fba3 2301 	umull	r2, r3, r3, r1
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	2264      	movs	r2, #100	@ 0x64
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	1acb      	subs	r3, r1, r3
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052ee:	4b36      	ldr	r3, [pc, #216]	@ (80053c8 <UART_SetConfig+0x2d4>)
 80052f0:	fba3 2302 	umull	r2, r3, r3, r2
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052fc:	441c      	add	r4, r3
 80052fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005302:	2200      	movs	r2, #0
 8005304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005308:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800530c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005310:	4642      	mov	r2, r8
 8005312:	464b      	mov	r3, r9
 8005314:	1891      	adds	r1, r2, r2
 8005316:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005318:	415b      	adcs	r3, r3
 800531a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800531c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005320:	4641      	mov	r1, r8
 8005322:	1851      	adds	r1, r2, r1
 8005324:	6339      	str	r1, [r7, #48]	@ 0x30
 8005326:	4649      	mov	r1, r9
 8005328:	414b      	adcs	r3, r1
 800532a:	637b      	str	r3, [r7, #52]	@ 0x34
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005338:	4659      	mov	r1, fp
 800533a:	00cb      	lsls	r3, r1, #3
 800533c:	4651      	mov	r1, sl
 800533e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005342:	4651      	mov	r1, sl
 8005344:	00ca      	lsls	r2, r1, #3
 8005346:	4610      	mov	r0, r2
 8005348:	4619      	mov	r1, r3
 800534a:	4603      	mov	r3, r0
 800534c:	4642      	mov	r2, r8
 800534e:	189b      	adds	r3, r3, r2
 8005350:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005354:	464b      	mov	r3, r9
 8005356:	460a      	mov	r2, r1
 8005358:	eb42 0303 	adc.w	r3, r2, r3
 800535c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800536c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005370:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005374:	460b      	mov	r3, r1
 8005376:	18db      	adds	r3, r3, r3
 8005378:	62bb      	str	r3, [r7, #40]	@ 0x28
 800537a:	4613      	mov	r3, r2
 800537c:	eb42 0303 	adc.w	r3, r2, r3
 8005380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005382:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005386:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800538a:	f7fa ff79 	bl	8000280 <__aeabi_uldivmod>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <UART_SetConfig+0x2d4>)
 8005394:	fba3 1302 	umull	r1, r3, r3, r2
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	2164      	movs	r1, #100	@ 0x64
 800539c:	fb01 f303 	mul.w	r3, r1, r3
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	3332      	adds	r3, #50	@ 0x32
 80053a6:	4a08      	ldr	r2, [pc, #32]	@ (80053c8 <UART_SetConfig+0x2d4>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	f003 0207 	and.w	r2, r3, #7
 80053b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4422      	add	r2, r4
 80053ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053bc:	e106      	b.n	80055cc <UART_SetConfig+0x4d8>
 80053be:	bf00      	nop
 80053c0:	40011000 	.word	0x40011000
 80053c4:	40011400 	.word	0x40011400
 80053c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053d0:	2200      	movs	r2, #0
 80053d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80053da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80053de:	4642      	mov	r2, r8
 80053e0:	464b      	mov	r3, r9
 80053e2:	1891      	adds	r1, r2, r2
 80053e4:	6239      	str	r1, [r7, #32]
 80053e6:	415b      	adcs	r3, r3
 80053e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053ee:	4641      	mov	r1, r8
 80053f0:	1854      	adds	r4, r2, r1
 80053f2:	4649      	mov	r1, r9
 80053f4:	eb43 0501 	adc.w	r5, r3, r1
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	00eb      	lsls	r3, r5, #3
 8005402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005406:	00e2      	lsls	r2, r4, #3
 8005408:	4614      	mov	r4, r2
 800540a:	461d      	mov	r5, r3
 800540c:	4643      	mov	r3, r8
 800540e:	18e3      	adds	r3, r4, r3
 8005410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005414:	464b      	mov	r3, r9
 8005416:	eb45 0303 	adc.w	r3, r5, r3
 800541a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800541e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800542a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800543a:	4629      	mov	r1, r5
 800543c:	008b      	lsls	r3, r1, #2
 800543e:	4621      	mov	r1, r4
 8005440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005444:	4621      	mov	r1, r4
 8005446:	008a      	lsls	r2, r1, #2
 8005448:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800544c:	f7fa ff18 	bl	8000280 <__aeabi_uldivmod>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4b60      	ldr	r3, [pc, #384]	@ (80055d8 <UART_SetConfig+0x4e4>)
 8005456:	fba3 2302 	umull	r2, r3, r3, r2
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	011c      	lsls	r4, r3, #4
 800545e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005462:	2200      	movs	r2, #0
 8005464:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005468:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800546c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005470:	4642      	mov	r2, r8
 8005472:	464b      	mov	r3, r9
 8005474:	1891      	adds	r1, r2, r2
 8005476:	61b9      	str	r1, [r7, #24]
 8005478:	415b      	adcs	r3, r3
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005480:	4641      	mov	r1, r8
 8005482:	1851      	adds	r1, r2, r1
 8005484:	6139      	str	r1, [r7, #16]
 8005486:	4649      	mov	r1, r9
 8005488:	414b      	adcs	r3, r1
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005498:	4659      	mov	r1, fp
 800549a:	00cb      	lsls	r3, r1, #3
 800549c:	4651      	mov	r1, sl
 800549e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054a2:	4651      	mov	r1, sl
 80054a4:	00ca      	lsls	r2, r1, #3
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	4603      	mov	r3, r0
 80054ac:	4642      	mov	r2, r8
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054b4:	464b      	mov	r3, r9
 80054b6:	460a      	mov	r2, r1
 80054b8:	eb42 0303 	adc.w	r3, r2, r3
 80054bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	f04f 0300 	mov.w	r3, #0
 80054d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80054d8:	4649      	mov	r1, r9
 80054da:	008b      	lsls	r3, r1, #2
 80054dc:	4641      	mov	r1, r8
 80054de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054e2:	4641      	mov	r1, r8
 80054e4:	008a      	lsls	r2, r1, #2
 80054e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80054ea:	f7fa fec9 	bl	8000280 <__aeabi_uldivmod>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4611      	mov	r1, r2
 80054f4:	4b38      	ldr	r3, [pc, #224]	@ (80055d8 <UART_SetConfig+0x4e4>)
 80054f6:	fba3 2301 	umull	r2, r3, r3, r1
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	2264      	movs	r2, #100	@ 0x64
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
 8005502:	1acb      	subs	r3, r1, r3
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	3332      	adds	r3, #50	@ 0x32
 8005508:	4a33      	ldr	r2, [pc, #204]	@ (80055d8 <UART_SetConfig+0x4e4>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005514:	441c      	add	r4, r3
 8005516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800551a:	2200      	movs	r2, #0
 800551c:	673b      	str	r3, [r7, #112]	@ 0x70
 800551e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005520:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005524:	4642      	mov	r2, r8
 8005526:	464b      	mov	r3, r9
 8005528:	1891      	adds	r1, r2, r2
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	415b      	adcs	r3, r3
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005534:	4641      	mov	r1, r8
 8005536:	1851      	adds	r1, r2, r1
 8005538:	6039      	str	r1, [r7, #0]
 800553a:	4649      	mov	r1, r9
 800553c:	414b      	adcs	r3, r1
 800553e:	607b      	str	r3, [r7, #4]
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800554c:	4659      	mov	r1, fp
 800554e:	00cb      	lsls	r3, r1, #3
 8005550:	4651      	mov	r1, sl
 8005552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005556:	4651      	mov	r1, sl
 8005558:	00ca      	lsls	r2, r1, #3
 800555a:	4610      	mov	r0, r2
 800555c:	4619      	mov	r1, r3
 800555e:	4603      	mov	r3, r0
 8005560:	4642      	mov	r2, r8
 8005562:	189b      	adds	r3, r3, r2
 8005564:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005566:	464b      	mov	r3, r9
 8005568:	460a      	mov	r2, r1
 800556a:	eb42 0303 	adc.w	r3, r2, r3
 800556e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	663b      	str	r3, [r7, #96]	@ 0x60
 800557a:	667a      	str	r2, [r7, #100]	@ 0x64
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005588:	4649      	mov	r1, r9
 800558a:	008b      	lsls	r3, r1, #2
 800558c:	4641      	mov	r1, r8
 800558e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005592:	4641      	mov	r1, r8
 8005594:	008a      	lsls	r2, r1, #2
 8005596:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800559a:	f7fa fe71 	bl	8000280 <__aeabi_uldivmod>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4b0d      	ldr	r3, [pc, #52]	@ (80055d8 <UART_SetConfig+0x4e4>)
 80055a4:	fba3 1302 	umull	r1, r3, r3, r2
 80055a8:	095b      	lsrs	r3, r3, #5
 80055aa:	2164      	movs	r1, #100	@ 0x64
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	3332      	adds	r3, #50	@ 0x32
 80055b6:	4a08      	ldr	r2, [pc, #32]	@ (80055d8 <UART_SetConfig+0x4e4>)
 80055b8:	fba2 2303 	umull	r2, r3, r2, r3
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	f003 020f 	and.w	r2, r3, #15
 80055c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4422      	add	r2, r4
 80055ca:	609a      	str	r2, [r3, #8]
}
 80055cc:	bf00      	nop
 80055ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80055d2:	46bd      	mov	sp, r7
 80055d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055d8:	51eb851f 	.word	0x51eb851f

080055dc <std>:
 80055dc:	2300      	movs	r3, #0
 80055de:	b510      	push	{r4, lr}
 80055e0:	4604      	mov	r4, r0
 80055e2:	e9c0 3300 	strd	r3, r3, [r0]
 80055e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055ea:	6083      	str	r3, [r0, #8]
 80055ec:	8181      	strh	r1, [r0, #12]
 80055ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80055f0:	81c2      	strh	r2, [r0, #14]
 80055f2:	6183      	str	r3, [r0, #24]
 80055f4:	4619      	mov	r1, r3
 80055f6:	2208      	movs	r2, #8
 80055f8:	305c      	adds	r0, #92	@ 0x5c
 80055fa:	f000 f920 	bl	800583e <memset>
 80055fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005634 <std+0x58>)
 8005600:	6263      	str	r3, [r4, #36]	@ 0x24
 8005602:	4b0d      	ldr	r3, [pc, #52]	@ (8005638 <std+0x5c>)
 8005604:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005606:	4b0d      	ldr	r3, [pc, #52]	@ (800563c <std+0x60>)
 8005608:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800560a:	4b0d      	ldr	r3, [pc, #52]	@ (8005640 <std+0x64>)
 800560c:	6323      	str	r3, [r4, #48]	@ 0x30
 800560e:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <std+0x68>)
 8005610:	6224      	str	r4, [r4, #32]
 8005612:	429c      	cmp	r4, r3
 8005614:	d006      	beq.n	8005624 <std+0x48>
 8005616:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800561a:	4294      	cmp	r4, r2
 800561c:	d002      	beq.n	8005624 <std+0x48>
 800561e:	33d0      	adds	r3, #208	@ 0xd0
 8005620:	429c      	cmp	r4, r3
 8005622:	d105      	bne.n	8005630 <std+0x54>
 8005624:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800562c:	f000 b9dc 	b.w	80059e8 <__retarget_lock_init_recursive>
 8005630:	bd10      	pop	{r4, pc}
 8005632:	bf00      	nop
 8005634:	080057b5 	.word	0x080057b5
 8005638:	080057db 	.word	0x080057db
 800563c:	08005813 	.word	0x08005813
 8005640:	08005837 	.word	0x08005837
 8005644:	20000088 	.word	0x20000088

08005648 <stdio_exit_handler>:
 8005648:	4a02      	ldr	r2, [pc, #8]	@ (8005654 <stdio_exit_handler+0xc>)
 800564a:	4903      	ldr	r1, [pc, #12]	@ (8005658 <stdio_exit_handler+0x10>)
 800564c:	4803      	ldr	r0, [pc, #12]	@ (800565c <stdio_exit_handler+0x14>)
 800564e:	f000 b869 	b.w	8005724 <_fwalk_sglue>
 8005652:	bf00      	nop
 8005654:	2000000c 	.word	0x2000000c
 8005658:	08006369 	.word	0x08006369
 800565c:	2000001c 	.word	0x2000001c

08005660 <cleanup_stdio>:
 8005660:	6841      	ldr	r1, [r0, #4]
 8005662:	4b0c      	ldr	r3, [pc, #48]	@ (8005694 <cleanup_stdio+0x34>)
 8005664:	4299      	cmp	r1, r3
 8005666:	b510      	push	{r4, lr}
 8005668:	4604      	mov	r4, r0
 800566a:	d001      	beq.n	8005670 <cleanup_stdio+0x10>
 800566c:	f000 fe7c 	bl	8006368 <_fflush_r>
 8005670:	68a1      	ldr	r1, [r4, #8]
 8005672:	4b09      	ldr	r3, [pc, #36]	@ (8005698 <cleanup_stdio+0x38>)
 8005674:	4299      	cmp	r1, r3
 8005676:	d002      	beq.n	800567e <cleanup_stdio+0x1e>
 8005678:	4620      	mov	r0, r4
 800567a:	f000 fe75 	bl	8006368 <_fflush_r>
 800567e:	68e1      	ldr	r1, [r4, #12]
 8005680:	4b06      	ldr	r3, [pc, #24]	@ (800569c <cleanup_stdio+0x3c>)
 8005682:	4299      	cmp	r1, r3
 8005684:	d004      	beq.n	8005690 <cleanup_stdio+0x30>
 8005686:	4620      	mov	r0, r4
 8005688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800568c:	f000 be6c 	b.w	8006368 <_fflush_r>
 8005690:	bd10      	pop	{r4, pc}
 8005692:	bf00      	nop
 8005694:	20000088 	.word	0x20000088
 8005698:	200000f0 	.word	0x200000f0
 800569c:	20000158 	.word	0x20000158

080056a0 <global_stdio_init.part.0>:
 80056a0:	b510      	push	{r4, lr}
 80056a2:	4b0b      	ldr	r3, [pc, #44]	@ (80056d0 <global_stdio_init.part.0+0x30>)
 80056a4:	4c0b      	ldr	r4, [pc, #44]	@ (80056d4 <global_stdio_init.part.0+0x34>)
 80056a6:	4a0c      	ldr	r2, [pc, #48]	@ (80056d8 <global_stdio_init.part.0+0x38>)
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	4620      	mov	r0, r4
 80056ac:	2200      	movs	r2, #0
 80056ae:	2104      	movs	r1, #4
 80056b0:	f7ff ff94 	bl	80055dc <std>
 80056b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056b8:	2201      	movs	r2, #1
 80056ba:	2109      	movs	r1, #9
 80056bc:	f7ff ff8e 	bl	80055dc <std>
 80056c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056c4:	2202      	movs	r2, #2
 80056c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ca:	2112      	movs	r1, #18
 80056cc:	f7ff bf86 	b.w	80055dc <std>
 80056d0:	200001c0 	.word	0x200001c0
 80056d4:	20000088 	.word	0x20000088
 80056d8:	08005649 	.word	0x08005649

080056dc <__sfp_lock_acquire>:
 80056dc:	4801      	ldr	r0, [pc, #4]	@ (80056e4 <__sfp_lock_acquire+0x8>)
 80056de:	f000 b984 	b.w	80059ea <__retarget_lock_acquire_recursive>
 80056e2:	bf00      	nop
 80056e4:	200001c9 	.word	0x200001c9

080056e8 <__sfp_lock_release>:
 80056e8:	4801      	ldr	r0, [pc, #4]	@ (80056f0 <__sfp_lock_release+0x8>)
 80056ea:	f000 b97f 	b.w	80059ec <__retarget_lock_release_recursive>
 80056ee:	bf00      	nop
 80056f0:	200001c9 	.word	0x200001c9

080056f4 <__sinit>:
 80056f4:	b510      	push	{r4, lr}
 80056f6:	4604      	mov	r4, r0
 80056f8:	f7ff fff0 	bl	80056dc <__sfp_lock_acquire>
 80056fc:	6a23      	ldr	r3, [r4, #32]
 80056fe:	b11b      	cbz	r3, 8005708 <__sinit+0x14>
 8005700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005704:	f7ff bff0 	b.w	80056e8 <__sfp_lock_release>
 8005708:	4b04      	ldr	r3, [pc, #16]	@ (800571c <__sinit+0x28>)
 800570a:	6223      	str	r3, [r4, #32]
 800570c:	4b04      	ldr	r3, [pc, #16]	@ (8005720 <__sinit+0x2c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f5      	bne.n	8005700 <__sinit+0xc>
 8005714:	f7ff ffc4 	bl	80056a0 <global_stdio_init.part.0>
 8005718:	e7f2      	b.n	8005700 <__sinit+0xc>
 800571a:	bf00      	nop
 800571c:	08005661 	.word	0x08005661
 8005720:	200001c0 	.word	0x200001c0

08005724 <_fwalk_sglue>:
 8005724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005728:	4607      	mov	r7, r0
 800572a:	4688      	mov	r8, r1
 800572c:	4614      	mov	r4, r2
 800572e:	2600      	movs	r6, #0
 8005730:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005734:	f1b9 0901 	subs.w	r9, r9, #1
 8005738:	d505      	bpl.n	8005746 <_fwalk_sglue+0x22>
 800573a:	6824      	ldr	r4, [r4, #0]
 800573c:	2c00      	cmp	r4, #0
 800573e:	d1f7      	bne.n	8005730 <_fwalk_sglue+0xc>
 8005740:	4630      	mov	r0, r6
 8005742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005746:	89ab      	ldrh	r3, [r5, #12]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d907      	bls.n	800575c <_fwalk_sglue+0x38>
 800574c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005750:	3301      	adds	r3, #1
 8005752:	d003      	beq.n	800575c <_fwalk_sglue+0x38>
 8005754:	4629      	mov	r1, r5
 8005756:	4638      	mov	r0, r7
 8005758:	47c0      	blx	r8
 800575a:	4306      	orrs	r6, r0
 800575c:	3568      	adds	r5, #104	@ 0x68
 800575e:	e7e9      	b.n	8005734 <_fwalk_sglue+0x10>

08005760 <siscanf>:
 8005760:	b40e      	push	{r1, r2, r3}
 8005762:	b530      	push	{r4, r5, lr}
 8005764:	b09c      	sub	sp, #112	@ 0x70
 8005766:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005768:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800576c:	f854 5b04 	ldr.w	r5, [r4], #4
 8005770:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005774:	9002      	str	r0, [sp, #8]
 8005776:	9006      	str	r0, [sp, #24]
 8005778:	f7fa fd2a 	bl	80001d0 <strlen>
 800577c:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <siscanf+0x4c>)
 800577e:	9003      	str	r0, [sp, #12]
 8005780:	9007      	str	r0, [sp, #28]
 8005782:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005784:	480a      	ldr	r0, [pc, #40]	@ (80057b0 <siscanf+0x50>)
 8005786:	9401      	str	r4, [sp, #4]
 8005788:	2300      	movs	r3, #0
 800578a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800578c:	9314      	str	r3, [sp, #80]	@ 0x50
 800578e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005792:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005796:	462a      	mov	r2, r5
 8005798:	4623      	mov	r3, r4
 800579a:	a902      	add	r1, sp, #8
 800579c:	6800      	ldr	r0, [r0, #0]
 800579e:	f000 fa9d 	bl	8005cdc <__ssvfiscanf_r>
 80057a2:	b01c      	add	sp, #112	@ 0x70
 80057a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057a8:	b003      	add	sp, #12
 80057aa:	4770      	bx	lr
 80057ac:	080057d7 	.word	0x080057d7
 80057b0:	20000018 	.word	0x20000018

080057b4 <__sread>:
 80057b4:	b510      	push	{r4, lr}
 80057b6:	460c      	mov	r4, r1
 80057b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057bc:	f000 f8c6 	bl	800594c <_read_r>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	bfab      	itete	ge
 80057c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057c6:	89a3      	ldrhlt	r3, [r4, #12]
 80057c8:	181b      	addge	r3, r3, r0
 80057ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057ce:	bfac      	ite	ge
 80057d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057d2:	81a3      	strhlt	r3, [r4, #12]
 80057d4:	bd10      	pop	{r4, pc}

080057d6 <__seofread>:
 80057d6:	2000      	movs	r0, #0
 80057d8:	4770      	bx	lr

080057da <__swrite>:
 80057da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057de:	461f      	mov	r7, r3
 80057e0:	898b      	ldrh	r3, [r1, #12]
 80057e2:	05db      	lsls	r3, r3, #23
 80057e4:	4605      	mov	r5, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	4616      	mov	r6, r2
 80057ea:	d505      	bpl.n	80057f8 <__swrite+0x1e>
 80057ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f0:	2302      	movs	r3, #2
 80057f2:	2200      	movs	r2, #0
 80057f4:	f000 f898 	bl	8005928 <_lseek_r>
 80057f8:	89a3      	ldrh	r3, [r4, #12]
 80057fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005802:	81a3      	strh	r3, [r4, #12]
 8005804:	4632      	mov	r2, r6
 8005806:	463b      	mov	r3, r7
 8005808:	4628      	mov	r0, r5
 800580a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800580e:	f000 b8af 	b.w	8005970 <_write_r>

08005812 <__sseek>:
 8005812:	b510      	push	{r4, lr}
 8005814:	460c      	mov	r4, r1
 8005816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800581a:	f000 f885 	bl	8005928 <_lseek_r>
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	bf15      	itete	ne
 8005824:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005826:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800582a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800582e:	81a3      	strheq	r3, [r4, #12]
 8005830:	bf18      	it	ne
 8005832:	81a3      	strhne	r3, [r4, #12]
 8005834:	bd10      	pop	{r4, pc}

08005836 <__sclose>:
 8005836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583a:	f000 b865 	b.w	8005908 <_close_r>

0800583e <memset>:
 800583e:	4402      	add	r2, r0
 8005840:	4603      	mov	r3, r0
 8005842:	4293      	cmp	r3, r2
 8005844:	d100      	bne.n	8005848 <memset+0xa>
 8005846:	4770      	bx	lr
 8005848:	f803 1b01 	strb.w	r1, [r3], #1
 800584c:	e7f9      	b.n	8005842 <memset+0x4>
	...

08005850 <strtok>:
 8005850:	4b16      	ldr	r3, [pc, #88]	@ (80058ac <strtok+0x5c>)
 8005852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005856:	681f      	ldr	r7, [r3, #0]
 8005858:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800585a:	4605      	mov	r5, r0
 800585c:	460e      	mov	r6, r1
 800585e:	b9ec      	cbnz	r4, 800589c <strtok+0x4c>
 8005860:	2050      	movs	r0, #80	@ 0x50
 8005862:	f000 f92d 	bl	8005ac0 <malloc>
 8005866:	4602      	mov	r2, r0
 8005868:	6478      	str	r0, [r7, #68]	@ 0x44
 800586a:	b920      	cbnz	r0, 8005876 <strtok+0x26>
 800586c:	4b10      	ldr	r3, [pc, #64]	@ (80058b0 <strtok+0x60>)
 800586e:	4811      	ldr	r0, [pc, #68]	@ (80058b4 <strtok+0x64>)
 8005870:	215b      	movs	r1, #91	@ 0x5b
 8005872:	f000 f8bd 	bl	80059f0 <__assert_func>
 8005876:	e9c0 4400 	strd	r4, r4, [r0]
 800587a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800587e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005882:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005886:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800588a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800588e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005892:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005896:	6184      	str	r4, [r0, #24]
 8005898:	7704      	strb	r4, [r0, #28]
 800589a:	6244      	str	r4, [r0, #36]	@ 0x24
 800589c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800589e:	4631      	mov	r1, r6
 80058a0:	4628      	mov	r0, r5
 80058a2:	2301      	movs	r3, #1
 80058a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058a8:	f000 b806 	b.w	80058b8 <__strtok_r>
 80058ac:	20000018 	.word	0x20000018
 80058b0:	08006fec 	.word	0x08006fec
 80058b4:	08007003 	.word	0x08007003

080058b8 <__strtok_r>:
 80058b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ba:	4604      	mov	r4, r0
 80058bc:	b908      	cbnz	r0, 80058c2 <__strtok_r+0xa>
 80058be:	6814      	ldr	r4, [r2, #0]
 80058c0:	b144      	cbz	r4, 80058d4 <__strtok_r+0x1c>
 80058c2:	4620      	mov	r0, r4
 80058c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80058c8:	460f      	mov	r7, r1
 80058ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80058ce:	b91e      	cbnz	r6, 80058d8 <__strtok_r+0x20>
 80058d0:	b965      	cbnz	r5, 80058ec <__strtok_r+0x34>
 80058d2:	6015      	str	r5, [r2, #0]
 80058d4:	2000      	movs	r0, #0
 80058d6:	e005      	b.n	80058e4 <__strtok_r+0x2c>
 80058d8:	42b5      	cmp	r5, r6
 80058da:	d1f6      	bne.n	80058ca <__strtok_r+0x12>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1f0      	bne.n	80058c2 <__strtok_r+0xa>
 80058e0:	6014      	str	r4, [r2, #0]
 80058e2:	7003      	strb	r3, [r0, #0]
 80058e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e6:	461c      	mov	r4, r3
 80058e8:	e00c      	b.n	8005904 <__strtok_r+0x4c>
 80058ea:	b915      	cbnz	r5, 80058f2 <__strtok_r+0x3a>
 80058ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80058f0:	460e      	mov	r6, r1
 80058f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80058f6:	42ab      	cmp	r3, r5
 80058f8:	d1f7      	bne.n	80058ea <__strtok_r+0x32>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f3      	beq.n	80058e6 <__strtok_r+0x2e>
 80058fe:	2300      	movs	r3, #0
 8005900:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005904:	6014      	str	r4, [r2, #0]
 8005906:	e7ed      	b.n	80058e4 <__strtok_r+0x2c>

08005908 <_close_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4d06      	ldr	r5, [pc, #24]	@ (8005924 <_close_r+0x1c>)
 800590c:	2300      	movs	r3, #0
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	602b      	str	r3, [r5, #0]
 8005914:	f7fc fb2a 	bl	8001f6c <_close>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_close_r+0x1a>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_close_r+0x1a>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	200001c4 	.word	0x200001c4

08005928 <_lseek_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d07      	ldr	r5, [pc, #28]	@ (8005948 <_lseek_r+0x20>)
 800592c:	4604      	mov	r4, r0
 800592e:	4608      	mov	r0, r1
 8005930:	4611      	mov	r1, r2
 8005932:	2200      	movs	r2, #0
 8005934:	602a      	str	r2, [r5, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	f7fc fb3f 	bl	8001fba <_lseek>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_lseek_r+0x1e>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_lseek_r+0x1e>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	200001c4 	.word	0x200001c4

0800594c <_read_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	@ (800596c <_read_r+0x20>)
 8005950:	4604      	mov	r4, r0
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	2200      	movs	r2, #0
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fc facd 	bl	8001efa <_read>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_read_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_read_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	200001c4 	.word	0x200001c4

08005970 <_write_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d07      	ldr	r5, [pc, #28]	@ (8005990 <_write_r+0x20>)
 8005974:	4604      	mov	r4, r0
 8005976:	4608      	mov	r0, r1
 8005978:	4611      	mov	r1, r2
 800597a:	2200      	movs	r2, #0
 800597c:	602a      	str	r2, [r5, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f7fc fad8 	bl	8001f34 <_write>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_write_r+0x1e>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_write_r+0x1e>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	200001c4 	.word	0x200001c4

08005994 <__errno>:
 8005994:	4b01      	ldr	r3, [pc, #4]	@ (800599c <__errno+0x8>)
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	20000018 	.word	0x20000018

080059a0 <__libc_init_array>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	4d0d      	ldr	r5, [pc, #52]	@ (80059d8 <__libc_init_array+0x38>)
 80059a4:	4c0d      	ldr	r4, [pc, #52]	@ (80059dc <__libc_init_array+0x3c>)
 80059a6:	1b64      	subs	r4, r4, r5
 80059a8:	10a4      	asrs	r4, r4, #2
 80059aa:	2600      	movs	r6, #0
 80059ac:	42a6      	cmp	r6, r4
 80059ae:	d109      	bne.n	80059c4 <__libc_init_array+0x24>
 80059b0:	4d0b      	ldr	r5, [pc, #44]	@ (80059e0 <__libc_init_array+0x40>)
 80059b2:	4c0c      	ldr	r4, [pc, #48]	@ (80059e4 <__libc_init_array+0x44>)
 80059b4:	f001 fafa 	bl	8006fac <_init>
 80059b8:	1b64      	subs	r4, r4, r5
 80059ba:	10a4      	asrs	r4, r4, #2
 80059bc:	2600      	movs	r6, #0
 80059be:	42a6      	cmp	r6, r4
 80059c0:	d105      	bne.n	80059ce <__libc_init_array+0x2e>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c8:	4798      	blx	r3
 80059ca:	3601      	adds	r6, #1
 80059cc:	e7ee      	b.n	80059ac <__libc_init_array+0xc>
 80059ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d2:	4798      	blx	r3
 80059d4:	3601      	adds	r6, #1
 80059d6:	e7f2      	b.n	80059be <__libc_init_array+0x1e>
 80059d8:	080071f0 	.word	0x080071f0
 80059dc:	080071f0 	.word	0x080071f0
 80059e0:	080071f0 	.word	0x080071f0
 80059e4:	080071f4 	.word	0x080071f4

080059e8 <__retarget_lock_init_recursive>:
 80059e8:	4770      	bx	lr

080059ea <__retarget_lock_acquire_recursive>:
 80059ea:	4770      	bx	lr

080059ec <__retarget_lock_release_recursive>:
 80059ec:	4770      	bx	lr
	...

080059f0 <__assert_func>:
 80059f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059f2:	4614      	mov	r4, r2
 80059f4:	461a      	mov	r2, r3
 80059f6:	4b09      	ldr	r3, [pc, #36]	@ (8005a1c <__assert_func+0x2c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4605      	mov	r5, r0
 80059fc:	68d8      	ldr	r0, [r3, #12]
 80059fe:	b954      	cbnz	r4, 8005a16 <__assert_func+0x26>
 8005a00:	4b07      	ldr	r3, [pc, #28]	@ (8005a20 <__assert_func+0x30>)
 8005a02:	461c      	mov	r4, r3
 8005a04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a08:	9100      	str	r1, [sp, #0]
 8005a0a:	462b      	mov	r3, r5
 8005a0c:	4905      	ldr	r1, [pc, #20]	@ (8005a24 <__assert_func+0x34>)
 8005a0e:	f000 fcd3 	bl	80063b8 <fiprintf>
 8005a12:	f000 fd75 	bl	8006500 <abort>
 8005a16:	4b04      	ldr	r3, [pc, #16]	@ (8005a28 <__assert_func+0x38>)
 8005a18:	e7f4      	b.n	8005a04 <__assert_func+0x14>
 8005a1a:	bf00      	nop
 8005a1c:	20000018 	.word	0x20000018
 8005a20:	08007098 	.word	0x08007098
 8005a24:	0800706a 	.word	0x0800706a
 8005a28:	0800705d 	.word	0x0800705d

08005a2c <_free_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4605      	mov	r5, r0
 8005a30:	2900      	cmp	r1, #0
 8005a32:	d041      	beq.n	8005ab8 <_free_r+0x8c>
 8005a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a38:	1f0c      	subs	r4, r1, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bfb8      	it	lt
 8005a3e:	18e4      	addlt	r4, r4, r3
 8005a40:	f000 f8e8 	bl	8005c14 <__malloc_lock>
 8005a44:	4a1d      	ldr	r2, [pc, #116]	@ (8005abc <_free_r+0x90>)
 8005a46:	6813      	ldr	r3, [r2, #0]
 8005a48:	b933      	cbnz	r3, 8005a58 <_free_r+0x2c>
 8005a4a:	6063      	str	r3, [r4, #4]
 8005a4c:	6014      	str	r4, [r2, #0]
 8005a4e:	4628      	mov	r0, r5
 8005a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a54:	f000 b8e4 	b.w	8005c20 <__malloc_unlock>
 8005a58:	42a3      	cmp	r3, r4
 8005a5a:	d908      	bls.n	8005a6e <_free_r+0x42>
 8005a5c:	6820      	ldr	r0, [r4, #0]
 8005a5e:	1821      	adds	r1, r4, r0
 8005a60:	428b      	cmp	r3, r1
 8005a62:	bf01      	itttt	eq
 8005a64:	6819      	ldreq	r1, [r3, #0]
 8005a66:	685b      	ldreq	r3, [r3, #4]
 8005a68:	1809      	addeq	r1, r1, r0
 8005a6a:	6021      	streq	r1, [r4, #0]
 8005a6c:	e7ed      	b.n	8005a4a <_free_r+0x1e>
 8005a6e:	461a      	mov	r2, r3
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	b10b      	cbz	r3, 8005a78 <_free_r+0x4c>
 8005a74:	42a3      	cmp	r3, r4
 8005a76:	d9fa      	bls.n	8005a6e <_free_r+0x42>
 8005a78:	6811      	ldr	r1, [r2, #0]
 8005a7a:	1850      	adds	r0, r2, r1
 8005a7c:	42a0      	cmp	r0, r4
 8005a7e:	d10b      	bne.n	8005a98 <_free_r+0x6c>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	4401      	add	r1, r0
 8005a84:	1850      	adds	r0, r2, r1
 8005a86:	4283      	cmp	r3, r0
 8005a88:	6011      	str	r1, [r2, #0]
 8005a8a:	d1e0      	bne.n	8005a4e <_free_r+0x22>
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	6053      	str	r3, [r2, #4]
 8005a92:	4408      	add	r0, r1
 8005a94:	6010      	str	r0, [r2, #0]
 8005a96:	e7da      	b.n	8005a4e <_free_r+0x22>
 8005a98:	d902      	bls.n	8005aa0 <_free_r+0x74>
 8005a9a:	230c      	movs	r3, #12
 8005a9c:	602b      	str	r3, [r5, #0]
 8005a9e:	e7d6      	b.n	8005a4e <_free_r+0x22>
 8005aa0:	6820      	ldr	r0, [r4, #0]
 8005aa2:	1821      	adds	r1, r4, r0
 8005aa4:	428b      	cmp	r3, r1
 8005aa6:	bf04      	itt	eq
 8005aa8:	6819      	ldreq	r1, [r3, #0]
 8005aaa:	685b      	ldreq	r3, [r3, #4]
 8005aac:	6063      	str	r3, [r4, #4]
 8005aae:	bf04      	itt	eq
 8005ab0:	1809      	addeq	r1, r1, r0
 8005ab2:	6021      	streq	r1, [r4, #0]
 8005ab4:	6054      	str	r4, [r2, #4]
 8005ab6:	e7ca      	b.n	8005a4e <_free_r+0x22>
 8005ab8:	bd38      	pop	{r3, r4, r5, pc}
 8005aba:	bf00      	nop
 8005abc:	200001d0 	.word	0x200001d0

08005ac0 <malloc>:
 8005ac0:	4b02      	ldr	r3, [pc, #8]	@ (8005acc <malloc+0xc>)
 8005ac2:	4601      	mov	r1, r0
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	f000 b825 	b.w	8005b14 <_malloc_r>
 8005aca:	bf00      	nop
 8005acc:	20000018 	.word	0x20000018

08005ad0 <sbrk_aligned>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	4e0f      	ldr	r6, [pc, #60]	@ (8005b10 <sbrk_aligned+0x40>)
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	6831      	ldr	r1, [r6, #0]
 8005ad8:	4605      	mov	r5, r0
 8005ada:	b911      	cbnz	r1, 8005ae2 <sbrk_aligned+0x12>
 8005adc:	f000 fcf2 	bl	80064c4 <_sbrk_r>
 8005ae0:	6030      	str	r0, [r6, #0]
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f000 fced 	bl	80064c4 <_sbrk_r>
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	d103      	bne.n	8005af6 <sbrk_aligned+0x26>
 8005aee:	f04f 34ff 	mov.w	r4, #4294967295
 8005af2:	4620      	mov	r0, r4
 8005af4:	bd70      	pop	{r4, r5, r6, pc}
 8005af6:	1cc4      	adds	r4, r0, #3
 8005af8:	f024 0403 	bic.w	r4, r4, #3
 8005afc:	42a0      	cmp	r0, r4
 8005afe:	d0f8      	beq.n	8005af2 <sbrk_aligned+0x22>
 8005b00:	1a21      	subs	r1, r4, r0
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 fcde 	bl	80064c4 <_sbrk_r>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d1f2      	bne.n	8005af2 <sbrk_aligned+0x22>
 8005b0c:	e7ef      	b.n	8005aee <sbrk_aligned+0x1e>
 8005b0e:	bf00      	nop
 8005b10:	200001cc 	.word	0x200001cc

08005b14 <_malloc_r>:
 8005b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b18:	1ccd      	adds	r5, r1, #3
 8005b1a:	f025 0503 	bic.w	r5, r5, #3
 8005b1e:	3508      	adds	r5, #8
 8005b20:	2d0c      	cmp	r5, #12
 8005b22:	bf38      	it	cc
 8005b24:	250c      	movcc	r5, #12
 8005b26:	2d00      	cmp	r5, #0
 8005b28:	4606      	mov	r6, r0
 8005b2a:	db01      	blt.n	8005b30 <_malloc_r+0x1c>
 8005b2c:	42a9      	cmp	r1, r5
 8005b2e:	d904      	bls.n	8005b3a <_malloc_r+0x26>
 8005b30:	230c      	movs	r3, #12
 8005b32:	6033      	str	r3, [r6, #0]
 8005b34:	2000      	movs	r0, #0
 8005b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c10 <_malloc_r+0xfc>
 8005b3e:	f000 f869 	bl	8005c14 <__malloc_lock>
 8005b42:	f8d8 3000 	ldr.w	r3, [r8]
 8005b46:	461c      	mov	r4, r3
 8005b48:	bb44      	cbnz	r4, 8005b9c <_malloc_r+0x88>
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f7ff ffbf 	bl	8005ad0 <sbrk_aligned>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	4604      	mov	r4, r0
 8005b56:	d158      	bne.n	8005c0a <_malloc_r+0xf6>
 8005b58:	f8d8 4000 	ldr.w	r4, [r8]
 8005b5c:	4627      	mov	r7, r4
 8005b5e:	2f00      	cmp	r7, #0
 8005b60:	d143      	bne.n	8005bea <_malloc_r+0xd6>
 8005b62:	2c00      	cmp	r4, #0
 8005b64:	d04b      	beq.n	8005bfe <_malloc_r+0xea>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	4639      	mov	r1, r7
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	eb04 0903 	add.w	r9, r4, r3
 8005b70:	f000 fca8 	bl	80064c4 <_sbrk_r>
 8005b74:	4581      	cmp	r9, r0
 8005b76:	d142      	bne.n	8005bfe <_malloc_r+0xea>
 8005b78:	6821      	ldr	r1, [r4, #0]
 8005b7a:	1a6d      	subs	r5, r5, r1
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f7ff ffa6 	bl	8005ad0 <sbrk_aligned>
 8005b84:	3001      	adds	r0, #1
 8005b86:	d03a      	beq.n	8005bfe <_malloc_r+0xea>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	442b      	add	r3, r5
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	bb62      	cbnz	r2, 8005bf0 <_malloc_r+0xdc>
 8005b96:	f8c8 7000 	str.w	r7, [r8]
 8005b9a:	e00f      	b.n	8005bbc <_malloc_r+0xa8>
 8005b9c:	6822      	ldr	r2, [r4, #0]
 8005b9e:	1b52      	subs	r2, r2, r5
 8005ba0:	d420      	bmi.n	8005be4 <_malloc_r+0xd0>
 8005ba2:	2a0b      	cmp	r2, #11
 8005ba4:	d917      	bls.n	8005bd6 <_malloc_r+0xc2>
 8005ba6:	1961      	adds	r1, r4, r5
 8005ba8:	42a3      	cmp	r3, r4
 8005baa:	6025      	str	r5, [r4, #0]
 8005bac:	bf18      	it	ne
 8005bae:	6059      	strne	r1, [r3, #4]
 8005bb0:	6863      	ldr	r3, [r4, #4]
 8005bb2:	bf08      	it	eq
 8005bb4:	f8c8 1000 	streq.w	r1, [r8]
 8005bb8:	5162      	str	r2, [r4, r5]
 8005bba:	604b      	str	r3, [r1, #4]
 8005bbc:	4630      	mov	r0, r6
 8005bbe:	f000 f82f 	bl	8005c20 <__malloc_unlock>
 8005bc2:	f104 000b 	add.w	r0, r4, #11
 8005bc6:	1d23      	adds	r3, r4, #4
 8005bc8:	f020 0007 	bic.w	r0, r0, #7
 8005bcc:	1ac2      	subs	r2, r0, r3
 8005bce:	bf1c      	itt	ne
 8005bd0:	1a1b      	subne	r3, r3, r0
 8005bd2:	50a3      	strne	r3, [r4, r2]
 8005bd4:	e7af      	b.n	8005b36 <_malloc_r+0x22>
 8005bd6:	6862      	ldr	r2, [r4, #4]
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	bf0c      	ite	eq
 8005bdc:	f8c8 2000 	streq.w	r2, [r8]
 8005be0:	605a      	strne	r2, [r3, #4]
 8005be2:	e7eb      	b.n	8005bbc <_malloc_r+0xa8>
 8005be4:	4623      	mov	r3, r4
 8005be6:	6864      	ldr	r4, [r4, #4]
 8005be8:	e7ae      	b.n	8005b48 <_malloc_r+0x34>
 8005bea:	463c      	mov	r4, r7
 8005bec:	687f      	ldr	r7, [r7, #4]
 8005bee:	e7b6      	b.n	8005b5e <_malloc_r+0x4a>
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	d1fb      	bne.n	8005bf0 <_malloc_r+0xdc>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6053      	str	r3, [r2, #4]
 8005bfc:	e7de      	b.n	8005bbc <_malloc_r+0xa8>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	6033      	str	r3, [r6, #0]
 8005c02:	4630      	mov	r0, r6
 8005c04:	f000 f80c 	bl	8005c20 <__malloc_unlock>
 8005c08:	e794      	b.n	8005b34 <_malloc_r+0x20>
 8005c0a:	6005      	str	r5, [r0, #0]
 8005c0c:	e7d6      	b.n	8005bbc <_malloc_r+0xa8>
 8005c0e:	bf00      	nop
 8005c10:	200001d0 	.word	0x200001d0

08005c14 <__malloc_lock>:
 8005c14:	4801      	ldr	r0, [pc, #4]	@ (8005c1c <__malloc_lock+0x8>)
 8005c16:	f7ff bee8 	b.w	80059ea <__retarget_lock_acquire_recursive>
 8005c1a:	bf00      	nop
 8005c1c:	200001c8 	.word	0x200001c8

08005c20 <__malloc_unlock>:
 8005c20:	4801      	ldr	r0, [pc, #4]	@ (8005c28 <__malloc_unlock+0x8>)
 8005c22:	f7ff bee3 	b.w	80059ec <__retarget_lock_release_recursive>
 8005c26:	bf00      	nop
 8005c28:	200001c8 	.word	0x200001c8

08005c2c <_sungetc_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	1c4b      	adds	r3, r1, #1
 8005c30:	4614      	mov	r4, r2
 8005c32:	d103      	bne.n	8005c3c <_sungetc_r+0x10>
 8005c34:	f04f 35ff 	mov.w	r5, #4294967295
 8005c38:	4628      	mov	r0, r5
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	8993      	ldrh	r3, [r2, #12]
 8005c3e:	f023 0320 	bic.w	r3, r3, #32
 8005c42:	8193      	strh	r3, [r2, #12]
 8005c44:	6853      	ldr	r3, [r2, #4]
 8005c46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c48:	b2cd      	uxtb	r5, r1
 8005c4a:	b18a      	cbz	r2, 8005c70 <_sungetc_r+0x44>
 8005c4c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	dd08      	ble.n	8005c64 <_sungetc_r+0x38>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	1e5a      	subs	r2, r3, #1
 8005c56:	6022      	str	r2, [r4, #0]
 8005c58:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005c5c:	6863      	ldr	r3, [r4, #4]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	6063      	str	r3, [r4, #4]
 8005c62:	e7e9      	b.n	8005c38 <_sungetc_r+0xc>
 8005c64:	4621      	mov	r1, r4
 8005c66:	f000 fbf2 	bl	800644e <__submore>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d0f1      	beq.n	8005c52 <_sungetc_r+0x26>
 8005c6e:	e7e1      	b.n	8005c34 <_sungetc_r+0x8>
 8005c70:	6921      	ldr	r1, [r4, #16]
 8005c72:	6822      	ldr	r2, [r4, #0]
 8005c74:	b141      	cbz	r1, 8005c88 <_sungetc_r+0x5c>
 8005c76:	4291      	cmp	r1, r2
 8005c78:	d206      	bcs.n	8005c88 <_sungetc_r+0x5c>
 8005c7a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8005c7e:	42a9      	cmp	r1, r5
 8005c80:	d102      	bne.n	8005c88 <_sungetc_r+0x5c>
 8005c82:	3a01      	subs	r2, #1
 8005c84:	6022      	str	r2, [r4, #0]
 8005c86:	e7ea      	b.n	8005c5e <_sungetc_r+0x32>
 8005c88:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8005c8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c90:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c92:	2303      	movs	r3, #3
 8005c94:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005c96:	4623      	mov	r3, r4
 8005c98:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e7de      	b.n	8005c60 <_sungetc_r+0x34>

08005ca2 <__ssrefill_r>:
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005ca8:	b169      	cbz	r1, 8005cc6 <__ssrefill_r+0x24>
 8005caa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cae:	4299      	cmp	r1, r3
 8005cb0:	d001      	beq.n	8005cb6 <__ssrefill_r+0x14>
 8005cb2:	f7ff febb 	bl	8005a2c <_free_r>
 8005cb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cb8:	6063      	str	r3, [r4, #4]
 8005cba:	2000      	movs	r0, #0
 8005cbc:	6360      	str	r0, [r4, #52]	@ 0x34
 8005cbe:	b113      	cbz	r3, 8005cc6 <__ssrefill_r+0x24>
 8005cc0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005cc2:	6023      	str	r3, [r4, #0]
 8005cc4:	bd10      	pop	{r4, pc}
 8005cc6:	6923      	ldr	r3, [r4, #16]
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	6063      	str	r3, [r4, #4]
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	f043 0320 	orr.w	r3, r3, #32
 8005cd4:	81a3      	strh	r3, [r4, #12]
 8005cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cda:	e7f3      	b.n	8005cc4 <__ssrefill_r+0x22>

08005cdc <__ssvfiscanf_r>:
 8005cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8005cec:	49a5      	ldr	r1, [pc, #660]	@ (8005f84 <__ssvfiscanf_r+0x2a8>)
 8005cee:	91a0      	str	r1, [sp, #640]	@ 0x280
 8005cf0:	f10d 0804 	add.w	r8, sp, #4
 8005cf4:	49a4      	ldr	r1, [pc, #656]	@ (8005f88 <__ssvfiscanf_r+0x2ac>)
 8005cf6:	4fa5      	ldr	r7, [pc, #660]	@ (8005f8c <__ssvfiscanf_r+0x2b0>)
 8005cf8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	91a1      	str	r1, [sp, #644]	@ 0x284
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	7813      	ldrb	r3, [r2, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8158 	beq.w	8005fba <__ssvfiscanf_r+0x2de>
 8005d0a:	5cf9      	ldrb	r1, [r7, r3]
 8005d0c:	f011 0108 	ands.w	r1, r1, #8
 8005d10:	f102 0501 	add.w	r5, r2, #1
 8005d14:	d019      	beq.n	8005d4a <__ssvfiscanf_r+0x6e>
 8005d16:	6863      	ldr	r3, [r4, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dd0f      	ble.n	8005d3c <__ssvfiscanf_r+0x60>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	781a      	ldrb	r2, [r3, #0]
 8005d20:	5cba      	ldrb	r2, [r7, r2]
 8005d22:	0712      	lsls	r2, r2, #28
 8005d24:	d401      	bmi.n	8005d2a <__ssvfiscanf_r+0x4e>
 8005d26:	462a      	mov	r2, r5
 8005d28:	e7eb      	b.n	8005d02 <__ssvfiscanf_r+0x26>
 8005d2a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005d2c:	3201      	adds	r2, #1
 8005d2e:	9245      	str	r2, [sp, #276]	@ 0x114
 8005d30:	6862      	ldr	r2, [r4, #4]
 8005d32:	3301      	adds	r3, #1
 8005d34:	3a01      	subs	r2, #1
 8005d36:	6062      	str	r2, [r4, #4]
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	e7ec      	b.n	8005d16 <__ssvfiscanf_r+0x3a>
 8005d3c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005d3e:	4621      	mov	r1, r4
 8005d40:	4630      	mov	r0, r6
 8005d42:	4798      	blx	r3
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d0e9      	beq.n	8005d1c <__ssvfiscanf_r+0x40>
 8005d48:	e7ed      	b.n	8005d26 <__ssvfiscanf_r+0x4a>
 8005d4a:	2b25      	cmp	r3, #37	@ 0x25
 8005d4c:	d012      	beq.n	8005d74 <__ssvfiscanf_r+0x98>
 8005d4e:	4699      	mov	r9, r3
 8005d50:	6863      	ldr	r3, [r4, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f340 8093 	ble.w	8005e7e <__ssvfiscanf_r+0x1a2>
 8005d58:	6822      	ldr	r2, [r4, #0]
 8005d5a:	7813      	ldrb	r3, [r2, #0]
 8005d5c:	454b      	cmp	r3, r9
 8005d5e:	f040 812c 	bne.w	8005fba <__ssvfiscanf_r+0x2de>
 8005d62:	6863      	ldr	r3, [r4, #4]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	6063      	str	r3, [r4, #4]
 8005d68:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8005d6a:	3201      	adds	r2, #1
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	6022      	str	r2, [r4, #0]
 8005d70:	9345      	str	r3, [sp, #276]	@ 0x114
 8005d72:	e7d8      	b.n	8005d26 <__ssvfiscanf_r+0x4a>
 8005d74:	9141      	str	r1, [sp, #260]	@ 0x104
 8005d76:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005d78:	7853      	ldrb	r3, [r2, #1]
 8005d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d7c:	bf02      	ittt	eq
 8005d7e:	2310      	moveq	r3, #16
 8005d80:	1c95      	addeq	r5, r2, #2
 8005d82:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005d84:	220a      	movs	r2, #10
 8005d86:	46a9      	mov	r9, r5
 8005d88:	f819 1b01 	ldrb.w	r1, [r9], #1
 8005d8c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005d90:	2b09      	cmp	r3, #9
 8005d92:	d91e      	bls.n	8005dd2 <__ssvfiscanf_r+0xf6>
 8005d94:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8005f90 <__ssvfiscanf_r+0x2b4>
 8005d98:	2203      	movs	r2, #3
 8005d9a:	4650      	mov	r0, sl
 8005d9c:	f7fa fa20 	bl	80001e0 <memchr>
 8005da0:	b138      	cbz	r0, 8005db2 <__ssvfiscanf_r+0xd6>
 8005da2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005da4:	eba0 000a 	sub.w	r0, r0, sl
 8005da8:	2301      	movs	r3, #1
 8005daa:	4083      	lsls	r3, r0
 8005dac:	4313      	orrs	r3, r2
 8005dae:	9341      	str	r3, [sp, #260]	@ 0x104
 8005db0:	464d      	mov	r5, r9
 8005db2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005db6:	2b78      	cmp	r3, #120	@ 0x78
 8005db8:	d806      	bhi.n	8005dc8 <__ssvfiscanf_r+0xec>
 8005dba:	2b57      	cmp	r3, #87	@ 0x57
 8005dbc:	d810      	bhi.n	8005de0 <__ssvfiscanf_r+0x104>
 8005dbe:	2b25      	cmp	r3, #37	@ 0x25
 8005dc0:	d0c5      	beq.n	8005d4e <__ssvfiscanf_r+0x72>
 8005dc2:	d857      	bhi.n	8005e74 <__ssvfiscanf_r+0x198>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d065      	beq.n	8005e94 <__ssvfiscanf_r+0x1b8>
 8005dc8:	2303      	movs	r3, #3
 8005dca:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005dcc:	230a      	movs	r3, #10
 8005dce:	9342      	str	r3, [sp, #264]	@ 0x108
 8005dd0:	e078      	b.n	8005ec4 <__ssvfiscanf_r+0x1e8>
 8005dd2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005dd4:	fb02 1103 	mla	r1, r2, r3, r1
 8005dd8:	3930      	subs	r1, #48	@ 0x30
 8005dda:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005ddc:	464d      	mov	r5, r9
 8005dde:	e7d2      	b.n	8005d86 <__ssvfiscanf_r+0xaa>
 8005de0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005de4:	2a20      	cmp	r2, #32
 8005de6:	d8ef      	bhi.n	8005dc8 <__ssvfiscanf_r+0xec>
 8005de8:	a101      	add	r1, pc, #4	@ (adr r1, 8005df0 <__ssvfiscanf_r+0x114>)
 8005dea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005dee:	bf00      	nop
 8005df0:	08005ea3 	.word	0x08005ea3
 8005df4:	08005dc9 	.word	0x08005dc9
 8005df8:	08005dc9 	.word	0x08005dc9
 8005dfc:	08005efd 	.word	0x08005efd
 8005e00:	08005dc9 	.word	0x08005dc9
 8005e04:	08005dc9 	.word	0x08005dc9
 8005e08:	08005dc9 	.word	0x08005dc9
 8005e0c:	08005dc9 	.word	0x08005dc9
 8005e10:	08005dc9 	.word	0x08005dc9
 8005e14:	08005dc9 	.word	0x08005dc9
 8005e18:	08005dc9 	.word	0x08005dc9
 8005e1c:	08005f13 	.word	0x08005f13
 8005e20:	08005ef9 	.word	0x08005ef9
 8005e24:	08005e7b 	.word	0x08005e7b
 8005e28:	08005e7b 	.word	0x08005e7b
 8005e2c:	08005e7b 	.word	0x08005e7b
 8005e30:	08005dc9 	.word	0x08005dc9
 8005e34:	08005eb5 	.word	0x08005eb5
 8005e38:	08005dc9 	.word	0x08005dc9
 8005e3c:	08005dc9 	.word	0x08005dc9
 8005e40:	08005dc9 	.word	0x08005dc9
 8005e44:	08005dc9 	.word	0x08005dc9
 8005e48:	08005f23 	.word	0x08005f23
 8005e4c:	08005ebd 	.word	0x08005ebd
 8005e50:	08005e9b 	.word	0x08005e9b
 8005e54:	08005dc9 	.word	0x08005dc9
 8005e58:	08005dc9 	.word	0x08005dc9
 8005e5c:	08005f1f 	.word	0x08005f1f
 8005e60:	08005dc9 	.word	0x08005dc9
 8005e64:	08005ef9 	.word	0x08005ef9
 8005e68:	08005dc9 	.word	0x08005dc9
 8005e6c:	08005dc9 	.word	0x08005dc9
 8005e70:	08005ea3 	.word	0x08005ea3
 8005e74:	3b45      	subs	r3, #69	@ 0x45
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d8a6      	bhi.n	8005dc8 <__ssvfiscanf_r+0xec>
 8005e7a:	2305      	movs	r3, #5
 8005e7c:	e021      	b.n	8005ec2 <__ssvfiscanf_r+0x1e6>
 8005e7e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005e80:	4621      	mov	r1, r4
 8005e82:	4630      	mov	r0, r6
 8005e84:	4798      	blx	r3
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f43f af66 	beq.w	8005d58 <__ssvfiscanf_r+0x7c>
 8005e8c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	f040 808b 	bne.w	8005faa <__ssvfiscanf_r+0x2ce>
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	e08b      	b.n	8005fb2 <__ssvfiscanf_r+0x2d6>
 8005e9a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005e9c:	f042 0220 	orr.w	r2, r2, #32
 8005ea0:	9241      	str	r2, [sp, #260]	@ 0x104
 8005ea2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ea8:	9241      	str	r2, [sp, #260]	@ 0x104
 8005eaa:	2210      	movs	r2, #16
 8005eac:	2b6e      	cmp	r3, #110	@ 0x6e
 8005eae:	9242      	str	r2, [sp, #264]	@ 0x108
 8005eb0:	d902      	bls.n	8005eb8 <__ssvfiscanf_r+0x1dc>
 8005eb2:	e005      	b.n	8005ec0 <__ssvfiscanf_r+0x1e4>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	9342      	str	r3, [sp, #264]	@ 0x108
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e002      	b.n	8005ec2 <__ssvfiscanf_r+0x1e6>
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	9342      	str	r3, [sp, #264]	@ 0x108
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005ec4:	6863      	ldr	r3, [r4, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	dd39      	ble.n	8005f3e <__ssvfiscanf_r+0x262>
 8005eca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005ecc:	0659      	lsls	r1, r3, #25
 8005ece:	d404      	bmi.n	8005eda <__ssvfiscanf_r+0x1fe>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	781a      	ldrb	r2, [r3, #0]
 8005ed4:	5cba      	ldrb	r2, [r7, r2]
 8005ed6:	0712      	lsls	r2, r2, #28
 8005ed8:	d438      	bmi.n	8005f4c <__ssvfiscanf_r+0x270>
 8005eda:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	dc47      	bgt.n	8005f70 <__ssvfiscanf_r+0x294>
 8005ee0:	466b      	mov	r3, sp
 8005ee2:	4622      	mov	r2, r4
 8005ee4:	a941      	add	r1, sp, #260	@ 0x104
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f000 f86c 	bl	8005fc4 <_scanf_chars>
 8005eec:	2801      	cmp	r0, #1
 8005eee:	d064      	beq.n	8005fba <__ssvfiscanf_r+0x2de>
 8005ef0:	2802      	cmp	r0, #2
 8005ef2:	f47f af18 	bne.w	8005d26 <__ssvfiscanf_r+0x4a>
 8005ef6:	e7c9      	b.n	8005e8c <__ssvfiscanf_r+0x1b0>
 8005ef8:	220a      	movs	r2, #10
 8005efa:	e7d7      	b.n	8005eac <__ssvfiscanf_r+0x1d0>
 8005efc:	4629      	mov	r1, r5
 8005efe:	4640      	mov	r0, r8
 8005f00:	f000 fa6c 	bl	80063dc <__sccl>
 8005f04:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f0a:	9341      	str	r3, [sp, #260]	@ 0x104
 8005f0c:	4605      	mov	r5, r0
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e7d7      	b.n	8005ec2 <__ssvfiscanf_r+0x1e6>
 8005f12:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005f14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f18:	9341      	str	r3, [sp, #260]	@ 0x104
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e7d1      	b.n	8005ec2 <__ssvfiscanf_r+0x1e6>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e7cf      	b.n	8005ec2 <__ssvfiscanf_r+0x1e6>
 8005f22:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005f24:	06c3      	lsls	r3, r0, #27
 8005f26:	f53f aefe 	bmi.w	8005d26 <__ssvfiscanf_r+0x4a>
 8005f2a:	9b00      	ldr	r3, [sp, #0]
 8005f2c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005f2e:	1d19      	adds	r1, r3, #4
 8005f30:	9100      	str	r1, [sp, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	07c0      	lsls	r0, r0, #31
 8005f36:	bf4c      	ite	mi
 8005f38:	801a      	strhmi	r2, [r3, #0]
 8005f3a:	601a      	strpl	r2, [r3, #0]
 8005f3c:	e6f3      	b.n	8005d26 <__ssvfiscanf_r+0x4a>
 8005f3e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005f40:	4621      	mov	r1, r4
 8005f42:	4630      	mov	r0, r6
 8005f44:	4798      	blx	r3
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d0bf      	beq.n	8005eca <__ssvfiscanf_r+0x1ee>
 8005f4a:	e79f      	b.n	8005e8c <__ssvfiscanf_r+0x1b0>
 8005f4c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005f4e:	3201      	adds	r2, #1
 8005f50:	9245      	str	r2, [sp, #276]	@ 0x114
 8005f52:	6862      	ldr	r2, [r4, #4]
 8005f54:	3a01      	subs	r2, #1
 8005f56:	2a00      	cmp	r2, #0
 8005f58:	6062      	str	r2, [r4, #4]
 8005f5a:	dd02      	ble.n	8005f62 <__ssvfiscanf_r+0x286>
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	e7b6      	b.n	8005ed0 <__ssvfiscanf_r+0x1f4>
 8005f62:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005f64:	4621      	mov	r1, r4
 8005f66:	4630      	mov	r0, r6
 8005f68:	4798      	blx	r3
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d0b0      	beq.n	8005ed0 <__ssvfiscanf_r+0x1f4>
 8005f6e:	e78d      	b.n	8005e8c <__ssvfiscanf_r+0x1b0>
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	dc0f      	bgt.n	8005f94 <__ssvfiscanf_r+0x2b8>
 8005f74:	466b      	mov	r3, sp
 8005f76:	4622      	mov	r2, r4
 8005f78:	a941      	add	r1, sp, #260	@ 0x104
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f000 f87c 	bl	8006078 <_scanf_i>
 8005f80:	e7b4      	b.n	8005eec <__ssvfiscanf_r+0x210>
 8005f82:	bf00      	nop
 8005f84:	08005c2d 	.word	0x08005c2d
 8005f88:	08005ca3 	.word	0x08005ca3
 8005f8c:	080070b9 	.word	0x080070b9
 8005f90:	08007099 	.word	0x08007099
 8005f94:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc0 <__ssvfiscanf_r+0x2e4>)
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f43f aec5 	beq.w	8005d26 <__ssvfiscanf_r+0x4a>
 8005f9c:	466b      	mov	r3, sp
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	a941      	add	r1, sp, #260	@ 0x104
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f3af 8000 	nop.w
 8005fa8:	e7a0      	b.n	8005eec <__ssvfiscanf_r+0x210>
 8005faa:	89a3      	ldrh	r3, [r4, #12]
 8005fac:	065b      	lsls	r3, r3, #25
 8005fae:	f53f af71 	bmi.w	8005e94 <__ssvfiscanf_r+0x1b8>
 8005fb2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8005fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fba:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005fbc:	e7f9      	b.n	8005fb2 <__ssvfiscanf_r+0x2d6>
 8005fbe:	bf00      	nop
 8005fc0:	00000000 	.word	0x00000000

08005fc4 <_scanf_chars>:
 8005fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc8:	4615      	mov	r5, r2
 8005fca:	688a      	ldr	r2, [r1, #8]
 8005fcc:	4680      	mov	r8, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	b932      	cbnz	r2, 8005fe0 <_scanf_chars+0x1c>
 8005fd2:	698a      	ldr	r2, [r1, #24]
 8005fd4:	2a00      	cmp	r2, #0
 8005fd6:	bf14      	ite	ne
 8005fd8:	f04f 32ff 	movne.w	r2, #4294967295
 8005fdc:	2201      	moveq	r2, #1
 8005fde:	608a      	str	r2, [r1, #8]
 8005fe0:	6822      	ldr	r2, [r4, #0]
 8005fe2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006074 <_scanf_chars+0xb0>
 8005fe6:	06d1      	lsls	r1, r2, #27
 8005fe8:	bf5f      	itttt	pl
 8005fea:	681a      	ldrpl	r2, [r3, #0]
 8005fec:	1d11      	addpl	r1, r2, #4
 8005fee:	6019      	strpl	r1, [r3, #0]
 8005ff0:	6816      	ldrpl	r6, [r2, #0]
 8005ff2:	2700      	movs	r7, #0
 8005ff4:	69a0      	ldr	r0, [r4, #24]
 8005ff6:	b188      	cbz	r0, 800601c <_scanf_chars+0x58>
 8005ff8:	2801      	cmp	r0, #1
 8005ffa:	d107      	bne.n	800600c <_scanf_chars+0x48>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	781a      	ldrb	r2, [r3, #0]
 8006000:	6963      	ldr	r3, [r4, #20]
 8006002:	5c9b      	ldrb	r3, [r3, r2]
 8006004:	b953      	cbnz	r3, 800601c <_scanf_chars+0x58>
 8006006:	2f00      	cmp	r7, #0
 8006008:	d031      	beq.n	800606e <_scanf_chars+0xaa>
 800600a:	e022      	b.n	8006052 <_scanf_chars+0x8e>
 800600c:	2802      	cmp	r0, #2
 800600e:	d120      	bne.n	8006052 <_scanf_chars+0x8e>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006018:	071b      	lsls	r3, r3, #28
 800601a:	d41a      	bmi.n	8006052 <_scanf_chars+0x8e>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	06da      	lsls	r2, r3, #27
 8006020:	bf5e      	ittt	pl
 8006022:	682b      	ldrpl	r3, [r5, #0]
 8006024:	781b      	ldrbpl	r3, [r3, #0]
 8006026:	f806 3b01 	strbpl.w	r3, [r6], #1
 800602a:	682a      	ldr	r2, [r5, #0]
 800602c:	686b      	ldr	r3, [r5, #4]
 800602e:	3201      	adds	r2, #1
 8006030:	602a      	str	r2, [r5, #0]
 8006032:	68a2      	ldr	r2, [r4, #8]
 8006034:	3b01      	subs	r3, #1
 8006036:	3a01      	subs	r2, #1
 8006038:	606b      	str	r3, [r5, #4]
 800603a:	3701      	adds	r7, #1
 800603c:	60a2      	str	r2, [r4, #8]
 800603e:	b142      	cbz	r2, 8006052 <_scanf_chars+0x8e>
 8006040:	2b00      	cmp	r3, #0
 8006042:	dcd7      	bgt.n	8005ff4 <_scanf_chars+0x30>
 8006044:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006048:	4629      	mov	r1, r5
 800604a:	4640      	mov	r0, r8
 800604c:	4798      	blx	r3
 800604e:	2800      	cmp	r0, #0
 8006050:	d0d0      	beq.n	8005ff4 <_scanf_chars+0x30>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	f013 0310 	ands.w	r3, r3, #16
 8006058:	d105      	bne.n	8006066 <_scanf_chars+0xa2>
 800605a:	68e2      	ldr	r2, [r4, #12]
 800605c:	3201      	adds	r2, #1
 800605e:	60e2      	str	r2, [r4, #12]
 8006060:	69a2      	ldr	r2, [r4, #24]
 8006062:	b102      	cbz	r2, 8006066 <_scanf_chars+0xa2>
 8006064:	7033      	strb	r3, [r6, #0]
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	443b      	add	r3, r7
 800606a:	6123      	str	r3, [r4, #16]
 800606c:	2000      	movs	r0, #0
 800606e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006072:	bf00      	nop
 8006074:	080070b9 	.word	0x080070b9

08006078 <_scanf_i>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	4698      	mov	r8, r3
 800607e:	4b74      	ldr	r3, [pc, #464]	@ (8006250 <_scanf_i+0x1d8>)
 8006080:	460c      	mov	r4, r1
 8006082:	4682      	mov	sl, r0
 8006084:	4616      	mov	r6, r2
 8006086:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800608a:	b087      	sub	sp, #28
 800608c:	ab03      	add	r3, sp, #12
 800608e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006092:	4b70      	ldr	r3, [pc, #448]	@ (8006254 <_scanf_i+0x1dc>)
 8006094:	69a1      	ldr	r1, [r4, #24]
 8006096:	4a70      	ldr	r2, [pc, #448]	@ (8006258 <_scanf_i+0x1e0>)
 8006098:	2903      	cmp	r1, #3
 800609a:	bf08      	it	eq
 800609c:	461a      	moveq	r2, r3
 800609e:	68a3      	ldr	r3, [r4, #8]
 80060a0:	9201      	str	r2, [sp, #4]
 80060a2:	1e5a      	subs	r2, r3, #1
 80060a4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80060a8:	bf88      	it	hi
 80060aa:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80060ae:	4627      	mov	r7, r4
 80060b0:	bf82      	ittt	hi
 80060b2:	eb03 0905 	addhi.w	r9, r3, r5
 80060b6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80060ba:	60a3      	strhi	r3, [r4, #8]
 80060bc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80060c0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80060c4:	bf98      	it	ls
 80060c6:	f04f 0900 	movls.w	r9, #0
 80060ca:	6023      	str	r3, [r4, #0]
 80060cc:	463d      	mov	r5, r7
 80060ce:	f04f 0b00 	mov.w	fp, #0
 80060d2:	6831      	ldr	r1, [r6, #0]
 80060d4:	ab03      	add	r3, sp, #12
 80060d6:	7809      	ldrb	r1, [r1, #0]
 80060d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80060dc:	2202      	movs	r2, #2
 80060de:	f7fa f87f 	bl	80001e0 <memchr>
 80060e2:	b328      	cbz	r0, 8006130 <_scanf_i+0xb8>
 80060e4:	f1bb 0f01 	cmp.w	fp, #1
 80060e8:	d159      	bne.n	800619e <_scanf_i+0x126>
 80060ea:	6862      	ldr	r2, [r4, #4]
 80060ec:	b92a      	cbnz	r2, 80060fa <_scanf_i+0x82>
 80060ee:	6822      	ldr	r2, [r4, #0]
 80060f0:	2108      	movs	r1, #8
 80060f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060f6:	6061      	str	r1, [r4, #4]
 80060f8:	6022      	str	r2, [r4, #0]
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006100:	6022      	str	r2, [r4, #0]
 8006102:	68a2      	ldr	r2, [r4, #8]
 8006104:	1e51      	subs	r1, r2, #1
 8006106:	60a1      	str	r1, [r4, #8]
 8006108:	b192      	cbz	r2, 8006130 <_scanf_i+0xb8>
 800610a:	6832      	ldr	r2, [r6, #0]
 800610c:	1c51      	adds	r1, r2, #1
 800610e:	6031      	str	r1, [r6, #0]
 8006110:	7812      	ldrb	r2, [r2, #0]
 8006112:	f805 2b01 	strb.w	r2, [r5], #1
 8006116:	6872      	ldr	r2, [r6, #4]
 8006118:	3a01      	subs	r2, #1
 800611a:	2a00      	cmp	r2, #0
 800611c:	6072      	str	r2, [r6, #4]
 800611e:	dc07      	bgt.n	8006130 <_scanf_i+0xb8>
 8006120:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006124:	4631      	mov	r1, r6
 8006126:	4650      	mov	r0, sl
 8006128:	4790      	blx	r2
 800612a:	2800      	cmp	r0, #0
 800612c:	f040 8085 	bne.w	800623a <_scanf_i+0x1c2>
 8006130:	f10b 0b01 	add.w	fp, fp, #1
 8006134:	f1bb 0f03 	cmp.w	fp, #3
 8006138:	d1cb      	bne.n	80060d2 <_scanf_i+0x5a>
 800613a:	6863      	ldr	r3, [r4, #4]
 800613c:	b90b      	cbnz	r3, 8006142 <_scanf_i+0xca>
 800613e:	230a      	movs	r3, #10
 8006140:	6063      	str	r3, [r4, #4]
 8006142:	6863      	ldr	r3, [r4, #4]
 8006144:	4945      	ldr	r1, [pc, #276]	@ (800625c <_scanf_i+0x1e4>)
 8006146:	6960      	ldr	r0, [r4, #20]
 8006148:	1ac9      	subs	r1, r1, r3
 800614a:	f000 f947 	bl	80063dc <__sccl>
 800614e:	f04f 0b00 	mov.w	fp, #0
 8006152:	68a3      	ldr	r3, [r4, #8]
 8006154:	6822      	ldr	r2, [r4, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d03d      	beq.n	80061d6 <_scanf_i+0x15e>
 800615a:	6831      	ldr	r1, [r6, #0]
 800615c:	6960      	ldr	r0, [r4, #20]
 800615e:	f891 c000 	ldrb.w	ip, [r1]
 8006162:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006166:	2800      	cmp	r0, #0
 8006168:	d035      	beq.n	80061d6 <_scanf_i+0x15e>
 800616a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800616e:	d124      	bne.n	80061ba <_scanf_i+0x142>
 8006170:	0510      	lsls	r0, r2, #20
 8006172:	d522      	bpl.n	80061ba <_scanf_i+0x142>
 8006174:	f10b 0b01 	add.w	fp, fp, #1
 8006178:	f1b9 0f00 	cmp.w	r9, #0
 800617c:	d003      	beq.n	8006186 <_scanf_i+0x10e>
 800617e:	3301      	adds	r3, #1
 8006180:	f109 39ff 	add.w	r9, r9, #4294967295
 8006184:	60a3      	str	r3, [r4, #8]
 8006186:	6873      	ldr	r3, [r6, #4]
 8006188:	3b01      	subs	r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	6073      	str	r3, [r6, #4]
 800618e:	dd1b      	ble.n	80061c8 <_scanf_i+0x150>
 8006190:	6833      	ldr	r3, [r6, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	6033      	str	r3, [r6, #0]
 8006196:	68a3      	ldr	r3, [r4, #8]
 8006198:	3b01      	subs	r3, #1
 800619a:	60a3      	str	r3, [r4, #8]
 800619c:	e7d9      	b.n	8006152 <_scanf_i+0xda>
 800619e:	f1bb 0f02 	cmp.w	fp, #2
 80061a2:	d1ae      	bne.n	8006102 <_scanf_i+0x8a>
 80061a4:	6822      	ldr	r2, [r4, #0]
 80061a6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80061aa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80061ae:	d1bf      	bne.n	8006130 <_scanf_i+0xb8>
 80061b0:	2110      	movs	r1, #16
 80061b2:	6061      	str	r1, [r4, #4]
 80061b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061b8:	e7a2      	b.n	8006100 <_scanf_i+0x88>
 80061ba:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80061be:	6022      	str	r2, [r4, #0]
 80061c0:	780b      	ldrb	r3, [r1, #0]
 80061c2:	f805 3b01 	strb.w	r3, [r5], #1
 80061c6:	e7de      	b.n	8006186 <_scanf_i+0x10e>
 80061c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80061cc:	4631      	mov	r1, r6
 80061ce:	4650      	mov	r0, sl
 80061d0:	4798      	blx	r3
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d0df      	beq.n	8006196 <_scanf_i+0x11e>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	05d9      	lsls	r1, r3, #23
 80061da:	d50d      	bpl.n	80061f8 <_scanf_i+0x180>
 80061dc:	42bd      	cmp	r5, r7
 80061de:	d909      	bls.n	80061f4 <_scanf_i+0x17c>
 80061e0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80061e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061e8:	4632      	mov	r2, r6
 80061ea:	4650      	mov	r0, sl
 80061ec:	4798      	blx	r3
 80061ee:	f105 39ff 	add.w	r9, r5, #4294967295
 80061f2:	464d      	mov	r5, r9
 80061f4:	42bd      	cmp	r5, r7
 80061f6:	d028      	beq.n	800624a <_scanf_i+0x1d2>
 80061f8:	6822      	ldr	r2, [r4, #0]
 80061fa:	f012 0210 	ands.w	r2, r2, #16
 80061fe:	d113      	bne.n	8006228 <_scanf_i+0x1b0>
 8006200:	702a      	strb	r2, [r5, #0]
 8006202:	6863      	ldr	r3, [r4, #4]
 8006204:	9e01      	ldr	r6, [sp, #4]
 8006206:	4639      	mov	r1, r7
 8006208:	4650      	mov	r0, sl
 800620a:	47b0      	blx	r6
 800620c:	f8d8 3000 	ldr.w	r3, [r8]
 8006210:	6821      	ldr	r1, [r4, #0]
 8006212:	1d1a      	adds	r2, r3, #4
 8006214:	f8c8 2000 	str.w	r2, [r8]
 8006218:	f011 0f20 	tst.w	r1, #32
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	d00f      	beq.n	8006240 <_scanf_i+0x1c8>
 8006220:	6018      	str	r0, [r3, #0]
 8006222:	68e3      	ldr	r3, [r4, #12]
 8006224:	3301      	adds	r3, #1
 8006226:	60e3      	str	r3, [r4, #12]
 8006228:	6923      	ldr	r3, [r4, #16]
 800622a:	1bed      	subs	r5, r5, r7
 800622c:	445d      	add	r5, fp
 800622e:	442b      	add	r3, r5
 8006230:	6123      	str	r3, [r4, #16]
 8006232:	2000      	movs	r0, #0
 8006234:	b007      	add	sp, #28
 8006236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623a:	f04f 0b00 	mov.w	fp, #0
 800623e:	e7ca      	b.n	80061d6 <_scanf_i+0x15e>
 8006240:	07ca      	lsls	r2, r1, #31
 8006242:	bf4c      	ite	mi
 8006244:	8018      	strhmi	r0, [r3, #0]
 8006246:	6018      	strpl	r0, [r3, #0]
 8006248:	e7eb      	b.n	8006222 <_scanf_i+0x1aa>
 800624a:	2001      	movs	r0, #1
 800624c:	e7f2      	b.n	8006234 <_scanf_i+0x1bc>
 800624e:	bf00      	nop
 8006250:	08006fc8 	.word	0x08006fc8
 8006254:	08006661 	.word	0x08006661
 8006258:	08006741 	.word	0x08006741
 800625c:	080070ad 	.word	0x080070ad

08006260 <__sflush_r>:
 8006260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006268:	0716      	lsls	r6, r2, #28
 800626a:	4605      	mov	r5, r0
 800626c:	460c      	mov	r4, r1
 800626e:	d454      	bmi.n	800631a <__sflush_r+0xba>
 8006270:	684b      	ldr	r3, [r1, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	dc02      	bgt.n	800627c <__sflush_r+0x1c>
 8006276:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006278:	2b00      	cmp	r3, #0
 800627a:	dd48      	ble.n	800630e <__sflush_r+0xae>
 800627c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800627e:	2e00      	cmp	r6, #0
 8006280:	d045      	beq.n	800630e <__sflush_r+0xae>
 8006282:	2300      	movs	r3, #0
 8006284:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006288:	682f      	ldr	r7, [r5, #0]
 800628a:	6a21      	ldr	r1, [r4, #32]
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	d030      	beq.n	80062f2 <__sflush_r+0x92>
 8006290:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	0759      	lsls	r1, r3, #29
 8006296:	d505      	bpl.n	80062a4 <__sflush_r+0x44>
 8006298:	6863      	ldr	r3, [r4, #4]
 800629a:	1ad2      	subs	r2, r2, r3
 800629c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800629e:	b10b      	cbz	r3, 80062a4 <__sflush_r+0x44>
 80062a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062a2:	1ad2      	subs	r2, r2, r3
 80062a4:	2300      	movs	r3, #0
 80062a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062a8:	6a21      	ldr	r1, [r4, #32]
 80062aa:	4628      	mov	r0, r5
 80062ac:	47b0      	blx	r6
 80062ae:	1c43      	adds	r3, r0, #1
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	d106      	bne.n	80062c2 <__sflush_r+0x62>
 80062b4:	6829      	ldr	r1, [r5, #0]
 80062b6:	291d      	cmp	r1, #29
 80062b8:	d82b      	bhi.n	8006312 <__sflush_r+0xb2>
 80062ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006364 <__sflush_r+0x104>)
 80062bc:	410a      	asrs	r2, r1
 80062be:	07d6      	lsls	r6, r2, #31
 80062c0:	d427      	bmi.n	8006312 <__sflush_r+0xb2>
 80062c2:	2200      	movs	r2, #0
 80062c4:	6062      	str	r2, [r4, #4]
 80062c6:	04d9      	lsls	r1, r3, #19
 80062c8:	6922      	ldr	r2, [r4, #16]
 80062ca:	6022      	str	r2, [r4, #0]
 80062cc:	d504      	bpl.n	80062d8 <__sflush_r+0x78>
 80062ce:	1c42      	adds	r2, r0, #1
 80062d0:	d101      	bne.n	80062d6 <__sflush_r+0x76>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	b903      	cbnz	r3, 80062d8 <__sflush_r+0x78>
 80062d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80062d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062da:	602f      	str	r7, [r5, #0]
 80062dc:	b1b9      	cbz	r1, 800630e <__sflush_r+0xae>
 80062de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062e2:	4299      	cmp	r1, r3
 80062e4:	d002      	beq.n	80062ec <__sflush_r+0x8c>
 80062e6:	4628      	mov	r0, r5
 80062e8:	f7ff fba0 	bl	8005a2c <_free_r>
 80062ec:	2300      	movs	r3, #0
 80062ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80062f0:	e00d      	b.n	800630e <__sflush_r+0xae>
 80062f2:	2301      	movs	r3, #1
 80062f4:	4628      	mov	r0, r5
 80062f6:	47b0      	blx	r6
 80062f8:	4602      	mov	r2, r0
 80062fa:	1c50      	adds	r0, r2, #1
 80062fc:	d1c9      	bne.n	8006292 <__sflush_r+0x32>
 80062fe:	682b      	ldr	r3, [r5, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0c6      	beq.n	8006292 <__sflush_r+0x32>
 8006304:	2b1d      	cmp	r3, #29
 8006306:	d001      	beq.n	800630c <__sflush_r+0xac>
 8006308:	2b16      	cmp	r3, #22
 800630a:	d11e      	bne.n	800634a <__sflush_r+0xea>
 800630c:	602f      	str	r7, [r5, #0]
 800630e:	2000      	movs	r0, #0
 8006310:	e022      	b.n	8006358 <__sflush_r+0xf8>
 8006312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006316:	b21b      	sxth	r3, r3
 8006318:	e01b      	b.n	8006352 <__sflush_r+0xf2>
 800631a:	690f      	ldr	r7, [r1, #16]
 800631c:	2f00      	cmp	r7, #0
 800631e:	d0f6      	beq.n	800630e <__sflush_r+0xae>
 8006320:	0793      	lsls	r3, r2, #30
 8006322:	680e      	ldr	r6, [r1, #0]
 8006324:	bf08      	it	eq
 8006326:	694b      	ldreq	r3, [r1, #20]
 8006328:	600f      	str	r7, [r1, #0]
 800632a:	bf18      	it	ne
 800632c:	2300      	movne	r3, #0
 800632e:	eba6 0807 	sub.w	r8, r6, r7
 8006332:	608b      	str	r3, [r1, #8]
 8006334:	f1b8 0f00 	cmp.w	r8, #0
 8006338:	dde9      	ble.n	800630e <__sflush_r+0xae>
 800633a:	6a21      	ldr	r1, [r4, #32]
 800633c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800633e:	4643      	mov	r3, r8
 8006340:	463a      	mov	r2, r7
 8006342:	4628      	mov	r0, r5
 8006344:	47b0      	blx	r6
 8006346:	2800      	cmp	r0, #0
 8006348:	dc08      	bgt.n	800635c <__sflush_r+0xfc>
 800634a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800634e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006352:	81a3      	strh	r3, [r4, #12]
 8006354:	f04f 30ff 	mov.w	r0, #4294967295
 8006358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800635c:	4407      	add	r7, r0
 800635e:	eba8 0800 	sub.w	r8, r8, r0
 8006362:	e7e7      	b.n	8006334 <__sflush_r+0xd4>
 8006364:	dfbffffe 	.word	0xdfbffffe

08006368 <_fflush_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	690b      	ldr	r3, [r1, #16]
 800636c:	4605      	mov	r5, r0
 800636e:	460c      	mov	r4, r1
 8006370:	b913      	cbnz	r3, 8006378 <_fflush_r+0x10>
 8006372:	2500      	movs	r5, #0
 8006374:	4628      	mov	r0, r5
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	b118      	cbz	r0, 8006382 <_fflush_r+0x1a>
 800637a:	6a03      	ldr	r3, [r0, #32]
 800637c:	b90b      	cbnz	r3, 8006382 <_fflush_r+0x1a>
 800637e:	f7ff f9b9 	bl	80056f4 <__sinit>
 8006382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0f3      	beq.n	8006372 <_fflush_r+0xa>
 800638a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800638c:	07d0      	lsls	r0, r2, #31
 800638e:	d404      	bmi.n	800639a <_fflush_r+0x32>
 8006390:	0599      	lsls	r1, r3, #22
 8006392:	d402      	bmi.n	800639a <_fflush_r+0x32>
 8006394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006396:	f7ff fb28 	bl	80059ea <__retarget_lock_acquire_recursive>
 800639a:	4628      	mov	r0, r5
 800639c:	4621      	mov	r1, r4
 800639e:	f7ff ff5f 	bl	8006260 <__sflush_r>
 80063a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063a4:	07da      	lsls	r2, r3, #31
 80063a6:	4605      	mov	r5, r0
 80063a8:	d4e4      	bmi.n	8006374 <_fflush_r+0xc>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	059b      	lsls	r3, r3, #22
 80063ae:	d4e1      	bmi.n	8006374 <_fflush_r+0xc>
 80063b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063b2:	f7ff fb1b 	bl	80059ec <__retarget_lock_release_recursive>
 80063b6:	e7dd      	b.n	8006374 <_fflush_r+0xc>

080063b8 <fiprintf>:
 80063b8:	b40e      	push	{r1, r2, r3}
 80063ba:	b503      	push	{r0, r1, lr}
 80063bc:	4601      	mov	r1, r0
 80063be:	ab03      	add	r3, sp, #12
 80063c0:	4805      	ldr	r0, [pc, #20]	@ (80063d8 <fiprintf+0x20>)
 80063c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80063c6:	6800      	ldr	r0, [r0, #0]
 80063c8:	9301      	str	r3, [sp, #4]
 80063ca:	f000 f9e5 	bl	8006798 <_vfiprintf_r>
 80063ce:	b002      	add	sp, #8
 80063d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063d4:	b003      	add	sp, #12
 80063d6:	4770      	bx	lr
 80063d8:	20000018 	.word	0x20000018

080063dc <__sccl>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	780b      	ldrb	r3, [r1, #0]
 80063e0:	4604      	mov	r4, r0
 80063e2:	2b5e      	cmp	r3, #94	@ 0x5e
 80063e4:	bf0b      	itete	eq
 80063e6:	784b      	ldrbeq	r3, [r1, #1]
 80063e8:	1c4a      	addne	r2, r1, #1
 80063ea:	1c8a      	addeq	r2, r1, #2
 80063ec:	2100      	movne	r1, #0
 80063ee:	bf08      	it	eq
 80063f0:	2101      	moveq	r1, #1
 80063f2:	3801      	subs	r0, #1
 80063f4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80063f8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80063fc:	42a8      	cmp	r0, r5
 80063fe:	d1fb      	bne.n	80063f8 <__sccl+0x1c>
 8006400:	b90b      	cbnz	r3, 8006406 <__sccl+0x2a>
 8006402:	1e50      	subs	r0, r2, #1
 8006404:	bd70      	pop	{r4, r5, r6, pc}
 8006406:	f081 0101 	eor.w	r1, r1, #1
 800640a:	54e1      	strb	r1, [r4, r3]
 800640c:	4610      	mov	r0, r2
 800640e:	4602      	mov	r2, r0
 8006410:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006414:	2d2d      	cmp	r5, #45	@ 0x2d
 8006416:	d005      	beq.n	8006424 <__sccl+0x48>
 8006418:	2d5d      	cmp	r5, #93	@ 0x5d
 800641a:	d016      	beq.n	800644a <__sccl+0x6e>
 800641c:	2d00      	cmp	r5, #0
 800641e:	d0f1      	beq.n	8006404 <__sccl+0x28>
 8006420:	462b      	mov	r3, r5
 8006422:	e7f2      	b.n	800640a <__sccl+0x2e>
 8006424:	7846      	ldrb	r6, [r0, #1]
 8006426:	2e5d      	cmp	r6, #93	@ 0x5d
 8006428:	d0fa      	beq.n	8006420 <__sccl+0x44>
 800642a:	42b3      	cmp	r3, r6
 800642c:	dcf8      	bgt.n	8006420 <__sccl+0x44>
 800642e:	3002      	adds	r0, #2
 8006430:	461a      	mov	r2, r3
 8006432:	3201      	adds	r2, #1
 8006434:	4296      	cmp	r6, r2
 8006436:	54a1      	strb	r1, [r4, r2]
 8006438:	dcfb      	bgt.n	8006432 <__sccl+0x56>
 800643a:	1af2      	subs	r2, r6, r3
 800643c:	3a01      	subs	r2, #1
 800643e:	1c5d      	adds	r5, r3, #1
 8006440:	42b3      	cmp	r3, r6
 8006442:	bfa8      	it	ge
 8006444:	2200      	movge	r2, #0
 8006446:	18ab      	adds	r3, r5, r2
 8006448:	e7e1      	b.n	800640e <__sccl+0x32>
 800644a:	4610      	mov	r0, r2
 800644c:	e7da      	b.n	8006404 <__sccl+0x28>

0800644e <__submore>:
 800644e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006452:	460c      	mov	r4, r1
 8006454:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006456:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800645a:	4299      	cmp	r1, r3
 800645c:	d11d      	bne.n	800649a <__submore+0x4c>
 800645e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006462:	f7ff fb57 	bl	8005b14 <_malloc_r>
 8006466:	b918      	cbnz	r0, 8006470 <__submore+0x22>
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006470:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006474:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006476:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800647a:	6360      	str	r0, [r4, #52]	@ 0x34
 800647c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006480:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006484:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8006488:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800648c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006490:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006494:	6020      	str	r0, [r4, #0]
 8006496:	2000      	movs	r0, #0
 8006498:	e7e8      	b.n	800646c <__submore+0x1e>
 800649a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800649c:	0077      	lsls	r7, r6, #1
 800649e:	463a      	mov	r2, r7
 80064a0:	f000 f835 	bl	800650e <_realloc_r>
 80064a4:	4605      	mov	r5, r0
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d0de      	beq.n	8006468 <__submore+0x1a>
 80064aa:	eb00 0806 	add.w	r8, r0, r6
 80064ae:	4601      	mov	r1, r0
 80064b0:	4632      	mov	r2, r6
 80064b2:	4640      	mov	r0, r8
 80064b4:	f000 f816 	bl	80064e4 <memcpy>
 80064b8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80064bc:	f8c4 8000 	str.w	r8, [r4]
 80064c0:	e7e9      	b.n	8006496 <__submore+0x48>
	...

080064c4 <_sbrk_r>:
 80064c4:	b538      	push	{r3, r4, r5, lr}
 80064c6:	4d06      	ldr	r5, [pc, #24]	@ (80064e0 <_sbrk_r+0x1c>)
 80064c8:	2300      	movs	r3, #0
 80064ca:	4604      	mov	r4, r0
 80064cc:	4608      	mov	r0, r1
 80064ce:	602b      	str	r3, [r5, #0]
 80064d0:	f7fb fd80 	bl	8001fd4 <_sbrk>
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	d102      	bne.n	80064de <_sbrk_r+0x1a>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	b103      	cbz	r3, 80064de <_sbrk_r+0x1a>
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	bd38      	pop	{r3, r4, r5, pc}
 80064e0:	200001c4 	.word	0x200001c4

080064e4 <memcpy>:
 80064e4:	440a      	add	r2, r1
 80064e6:	4291      	cmp	r1, r2
 80064e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80064ec:	d100      	bne.n	80064f0 <memcpy+0xc>
 80064ee:	4770      	bx	lr
 80064f0:	b510      	push	{r4, lr}
 80064f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064fa:	4291      	cmp	r1, r2
 80064fc:	d1f9      	bne.n	80064f2 <memcpy+0xe>
 80064fe:	bd10      	pop	{r4, pc}

08006500 <abort>:
 8006500:	b508      	push	{r3, lr}
 8006502:	2006      	movs	r0, #6
 8006504:	f000 fcaa 	bl	8006e5c <raise>
 8006508:	2001      	movs	r0, #1
 800650a:	f7fb fceb 	bl	8001ee4 <_exit>

0800650e <_realloc_r>:
 800650e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006512:	4680      	mov	r8, r0
 8006514:	4615      	mov	r5, r2
 8006516:	460c      	mov	r4, r1
 8006518:	b921      	cbnz	r1, 8006524 <_realloc_r+0x16>
 800651a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800651e:	4611      	mov	r1, r2
 8006520:	f7ff baf8 	b.w	8005b14 <_malloc_r>
 8006524:	b92a      	cbnz	r2, 8006532 <_realloc_r+0x24>
 8006526:	f7ff fa81 	bl	8005a2c <_free_r>
 800652a:	2400      	movs	r4, #0
 800652c:	4620      	mov	r0, r4
 800652e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006532:	f000 fcaf 	bl	8006e94 <_malloc_usable_size_r>
 8006536:	4285      	cmp	r5, r0
 8006538:	4606      	mov	r6, r0
 800653a:	d802      	bhi.n	8006542 <_realloc_r+0x34>
 800653c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006540:	d8f4      	bhi.n	800652c <_realloc_r+0x1e>
 8006542:	4629      	mov	r1, r5
 8006544:	4640      	mov	r0, r8
 8006546:	f7ff fae5 	bl	8005b14 <_malloc_r>
 800654a:	4607      	mov	r7, r0
 800654c:	2800      	cmp	r0, #0
 800654e:	d0ec      	beq.n	800652a <_realloc_r+0x1c>
 8006550:	42b5      	cmp	r5, r6
 8006552:	462a      	mov	r2, r5
 8006554:	4621      	mov	r1, r4
 8006556:	bf28      	it	cs
 8006558:	4632      	movcs	r2, r6
 800655a:	f7ff ffc3 	bl	80064e4 <memcpy>
 800655e:	4621      	mov	r1, r4
 8006560:	4640      	mov	r0, r8
 8006562:	f7ff fa63 	bl	8005a2c <_free_r>
 8006566:	463c      	mov	r4, r7
 8006568:	e7e0      	b.n	800652c <_realloc_r+0x1e>
	...

0800656c <_strtol_l.constprop.0>:
 800656c:	2b24      	cmp	r3, #36	@ 0x24
 800656e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006572:	4686      	mov	lr, r0
 8006574:	4690      	mov	r8, r2
 8006576:	d801      	bhi.n	800657c <_strtol_l.constprop.0+0x10>
 8006578:	2b01      	cmp	r3, #1
 800657a:	d106      	bne.n	800658a <_strtol_l.constprop.0+0x1e>
 800657c:	f7ff fa0a 	bl	8005994 <__errno>
 8006580:	2316      	movs	r3, #22
 8006582:	6003      	str	r3, [r0, #0]
 8006584:	2000      	movs	r0, #0
 8006586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658a:	4834      	ldr	r0, [pc, #208]	@ (800665c <_strtol_l.constprop.0+0xf0>)
 800658c:	460d      	mov	r5, r1
 800658e:	462a      	mov	r2, r5
 8006590:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006594:	5d06      	ldrb	r6, [r0, r4]
 8006596:	f016 0608 	ands.w	r6, r6, #8
 800659a:	d1f8      	bne.n	800658e <_strtol_l.constprop.0+0x22>
 800659c:	2c2d      	cmp	r4, #45	@ 0x2d
 800659e:	d12d      	bne.n	80065fc <_strtol_l.constprop.0+0x90>
 80065a0:	782c      	ldrb	r4, [r5, #0]
 80065a2:	2601      	movs	r6, #1
 80065a4:	1c95      	adds	r5, r2, #2
 80065a6:	f033 0210 	bics.w	r2, r3, #16
 80065aa:	d109      	bne.n	80065c0 <_strtol_l.constprop.0+0x54>
 80065ac:	2c30      	cmp	r4, #48	@ 0x30
 80065ae:	d12a      	bne.n	8006606 <_strtol_l.constprop.0+0x9a>
 80065b0:	782a      	ldrb	r2, [r5, #0]
 80065b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80065b6:	2a58      	cmp	r2, #88	@ 0x58
 80065b8:	d125      	bne.n	8006606 <_strtol_l.constprop.0+0x9a>
 80065ba:	786c      	ldrb	r4, [r5, #1]
 80065bc:	2310      	movs	r3, #16
 80065be:	3502      	adds	r5, #2
 80065c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80065c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80065c8:	2200      	movs	r2, #0
 80065ca:	fbbc f9f3 	udiv	r9, ip, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80065d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80065d8:	2f09      	cmp	r7, #9
 80065da:	d81b      	bhi.n	8006614 <_strtol_l.constprop.0+0xa8>
 80065dc:	463c      	mov	r4, r7
 80065de:	42a3      	cmp	r3, r4
 80065e0:	dd27      	ble.n	8006632 <_strtol_l.constprop.0+0xc6>
 80065e2:	1c57      	adds	r7, r2, #1
 80065e4:	d007      	beq.n	80065f6 <_strtol_l.constprop.0+0x8a>
 80065e6:	4581      	cmp	r9, r0
 80065e8:	d320      	bcc.n	800662c <_strtol_l.constprop.0+0xc0>
 80065ea:	d101      	bne.n	80065f0 <_strtol_l.constprop.0+0x84>
 80065ec:	45a2      	cmp	sl, r4
 80065ee:	db1d      	blt.n	800662c <_strtol_l.constprop.0+0xc0>
 80065f0:	fb00 4003 	mla	r0, r0, r3, r4
 80065f4:	2201      	movs	r2, #1
 80065f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065fa:	e7eb      	b.n	80065d4 <_strtol_l.constprop.0+0x68>
 80065fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80065fe:	bf04      	itt	eq
 8006600:	782c      	ldrbeq	r4, [r5, #0]
 8006602:	1c95      	addeq	r5, r2, #2
 8006604:	e7cf      	b.n	80065a6 <_strtol_l.constprop.0+0x3a>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1da      	bne.n	80065c0 <_strtol_l.constprop.0+0x54>
 800660a:	2c30      	cmp	r4, #48	@ 0x30
 800660c:	bf0c      	ite	eq
 800660e:	2308      	moveq	r3, #8
 8006610:	230a      	movne	r3, #10
 8006612:	e7d5      	b.n	80065c0 <_strtol_l.constprop.0+0x54>
 8006614:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006618:	2f19      	cmp	r7, #25
 800661a:	d801      	bhi.n	8006620 <_strtol_l.constprop.0+0xb4>
 800661c:	3c37      	subs	r4, #55	@ 0x37
 800661e:	e7de      	b.n	80065de <_strtol_l.constprop.0+0x72>
 8006620:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006624:	2f19      	cmp	r7, #25
 8006626:	d804      	bhi.n	8006632 <_strtol_l.constprop.0+0xc6>
 8006628:	3c57      	subs	r4, #87	@ 0x57
 800662a:	e7d8      	b.n	80065de <_strtol_l.constprop.0+0x72>
 800662c:	f04f 32ff 	mov.w	r2, #4294967295
 8006630:	e7e1      	b.n	80065f6 <_strtol_l.constprop.0+0x8a>
 8006632:	1c53      	adds	r3, r2, #1
 8006634:	d108      	bne.n	8006648 <_strtol_l.constprop.0+0xdc>
 8006636:	2322      	movs	r3, #34	@ 0x22
 8006638:	f8ce 3000 	str.w	r3, [lr]
 800663c:	4660      	mov	r0, ip
 800663e:	f1b8 0f00 	cmp.w	r8, #0
 8006642:	d0a0      	beq.n	8006586 <_strtol_l.constprop.0+0x1a>
 8006644:	1e69      	subs	r1, r5, #1
 8006646:	e006      	b.n	8006656 <_strtol_l.constprop.0+0xea>
 8006648:	b106      	cbz	r6, 800664c <_strtol_l.constprop.0+0xe0>
 800664a:	4240      	negs	r0, r0
 800664c:	f1b8 0f00 	cmp.w	r8, #0
 8006650:	d099      	beq.n	8006586 <_strtol_l.constprop.0+0x1a>
 8006652:	2a00      	cmp	r2, #0
 8006654:	d1f6      	bne.n	8006644 <_strtol_l.constprop.0+0xd8>
 8006656:	f8c8 1000 	str.w	r1, [r8]
 800665a:	e794      	b.n	8006586 <_strtol_l.constprop.0+0x1a>
 800665c:	080070b9 	.word	0x080070b9

08006660 <_strtol_r>:
 8006660:	f7ff bf84 	b.w	800656c <_strtol_l.constprop.0>

08006664 <_strtoul_l.constprop.0>:
 8006664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006668:	4e34      	ldr	r6, [pc, #208]	@ (800673c <_strtoul_l.constprop.0+0xd8>)
 800666a:	4686      	mov	lr, r0
 800666c:	460d      	mov	r5, r1
 800666e:	4628      	mov	r0, r5
 8006670:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006674:	5d37      	ldrb	r7, [r6, r4]
 8006676:	f017 0708 	ands.w	r7, r7, #8
 800667a:	d1f8      	bne.n	800666e <_strtoul_l.constprop.0+0xa>
 800667c:	2c2d      	cmp	r4, #45	@ 0x2d
 800667e:	d12f      	bne.n	80066e0 <_strtoul_l.constprop.0+0x7c>
 8006680:	782c      	ldrb	r4, [r5, #0]
 8006682:	2701      	movs	r7, #1
 8006684:	1c85      	adds	r5, r0, #2
 8006686:	f033 0010 	bics.w	r0, r3, #16
 800668a:	d109      	bne.n	80066a0 <_strtoul_l.constprop.0+0x3c>
 800668c:	2c30      	cmp	r4, #48	@ 0x30
 800668e:	d12c      	bne.n	80066ea <_strtoul_l.constprop.0+0x86>
 8006690:	7828      	ldrb	r0, [r5, #0]
 8006692:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006696:	2858      	cmp	r0, #88	@ 0x58
 8006698:	d127      	bne.n	80066ea <_strtoul_l.constprop.0+0x86>
 800669a:	786c      	ldrb	r4, [r5, #1]
 800669c:	2310      	movs	r3, #16
 800669e:	3502      	adds	r5, #2
 80066a0:	f04f 38ff 	mov.w	r8, #4294967295
 80066a4:	2600      	movs	r6, #0
 80066a6:	fbb8 f8f3 	udiv	r8, r8, r3
 80066aa:	fb03 f908 	mul.w	r9, r3, r8
 80066ae:	ea6f 0909 	mvn.w	r9, r9
 80066b2:	4630      	mov	r0, r6
 80066b4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80066b8:	f1bc 0f09 	cmp.w	ip, #9
 80066bc:	d81c      	bhi.n	80066f8 <_strtoul_l.constprop.0+0x94>
 80066be:	4664      	mov	r4, ip
 80066c0:	42a3      	cmp	r3, r4
 80066c2:	dd2a      	ble.n	800671a <_strtoul_l.constprop.0+0xb6>
 80066c4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80066c8:	d007      	beq.n	80066da <_strtoul_l.constprop.0+0x76>
 80066ca:	4580      	cmp	r8, r0
 80066cc:	d322      	bcc.n	8006714 <_strtoul_l.constprop.0+0xb0>
 80066ce:	d101      	bne.n	80066d4 <_strtoul_l.constprop.0+0x70>
 80066d0:	45a1      	cmp	r9, r4
 80066d2:	db1f      	blt.n	8006714 <_strtoul_l.constprop.0+0xb0>
 80066d4:	fb00 4003 	mla	r0, r0, r3, r4
 80066d8:	2601      	movs	r6, #1
 80066da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066de:	e7e9      	b.n	80066b4 <_strtoul_l.constprop.0+0x50>
 80066e0:	2c2b      	cmp	r4, #43	@ 0x2b
 80066e2:	bf04      	itt	eq
 80066e4:	782c      	ldrbeq	r4, [r5, #0]
 80066e6:	1c85      	addeq	r5, r0, #2
 80066e8:	e7cd      	b.n	8006686 <_strtoul_l.constprop.0+0x22>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1d8      	bne.n	80066a0 <_strtoul_l.constprop.0+0x3c>
 80066ee:	2c30      	cmp	r4, #48	@ 0x30
 80066f0:	bf0c      	ite	eq
 80066f2:	2308      	moveq	r3, #8
 80066f4:	230a      	movne	r3, #10
 80066f6:	e7d3      	b.n	80066a0 <_strtoul_l.constprop.0+0x3c>
 80066f8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80066fc:	f1bc 0f19 	cmp.w	ip, #25
 8006700:	d801      	bhi.n	8006706 <_strtoul_l.constprop.0+0xa2>
 8006702:	3c37      	subs	r4, #55	@ 0x37
 8006704:	e7dc      	b.n	80066c0 <_strtoul_l.constprop.0+0x5c>
 8006706:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800670a:	f1bc 0f19 	cmp.w	ip, #25
 800670e:	d804      	bhi.n	800671a <_strtoul_l.constprop.0+0xb6>
 8006710:	3c57      	subs	r4, #87	@ 0x57
 8006712:	e7d5      	b.n	80066c0 <_strtoul_l.constprop.0+0x5c>
 8006714:	f04f 36ff 	mov.w	r6, #4294967295
 8006718:	e7df      	b.n	80066da <_strtoul_l.constprop.0+0x76>
 800671a:	1c73      	adds	r3, r6, #1
 800671c:	d106      	bne.n	800672c <_strtoul_l.constprop.0+0xc8>
 800671e:	2322      	movs	r3, #34	@ 0x22
 8006720:	f8ce 3000 	str.w	r3, [lr]
 8006724:	4630      	mov	r0, r6
 8006726:	b932      	cbnz	r2, 8006736 <_strtoul_l.constprop.0+0xd2>
 8006728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800672c:	b107      	cbz	r7, 8006730 <_strtoul_l.constprop.0+0xcc>
 800672e:	4240      	negs	r0, r0
 8006730:	2a00      	cmp	r2, #0
 8006732:	d0f9      	beq.n	8006728 <_strtoul_l.constprop.0+0xc4>
 8006734:	b106      	cbz	r6, 8006738 <_strtoul_l.constprop.0+0xd4>
 8006736:	1e69      	subs	r1, r5, #1
 8006738:	6011      	str	r1, [r2, #0]
 800673a:	e7f5      	b.n	8006728 <_strtoul_l.constprop.0+0xc4>
 800673c:	080070b9 	.word	0x080070b9

08006740 <_strtoul_r>:
 8006740:	f7ff bf90 	b.w	8006664 <_strtoul_l.constprop.0>

08006744 <__sfputc_r>:
 8006744:	6893      	ldr	r3, [r2, #8]
 8006746:	3b01      	subs	r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	b410      	push	{r4}
 800674c:	6093      	str	r3, [r2, #8]
 800674e:	da08      	bge.n	8006762 <__sfputc_r+0x1e>
 8006750:	6994      	ldr	r4, [r2, #24]
 8006752:	42a3      	cmp	r3, r4
 8006754:	db01      	blt.n	800675a <__sfputc_r+0x16>
 8006756:	290a      	cmp	r1, #10
 8006758:	d103      	bne.n	8006762 <__sfputc_r+0x1e>
 800675a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800675e:	f000 bac1 	b.w	8006ce4 <__swbuf_r>
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	1c58      	adds	r0, r3, #1
 8006766:	6010      	str	r0, [r2, #0]
 8006768:	7019      	strb	r1, [r3, #0]
 800676a:	4608      	mov	r0, r1
 800676c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006770:	4770      	bx	lr

08006772 <__sfputs_r>:
 8006772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006774:	4606      	mov	r6, r0
 8006776:	460f      	mov	r7, r1
 8006778:	4614      	mov	r4, r2
 800677a:	18d5      	adds	r5, r2, r3
 800677c:	42ac      	cmp	r4, r5
 800677e:	d101      	bne.n	8006784 <__sfputs_r+0x12>
 8006780:	2000      	movs	r0, #0
 8006782:	e007      	b.n	8006794 <__sfputs_r+0x22>
 8006784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006788:	463a      	mov	r2, r7
 800678a:	4630      	mov	r0, r6
 800678c:	f7ff ffda 	bl	8006744 <__sfputc_r>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d1f3      	bne.n	800677c <__sfputs_r+0xa>
 8006794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006798 <_vfiprintf_r>:
 8006798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679c:	460d      	mov	r5, r1
 800679e:	b09d      	sub	sp, #116	@ 0x74
 80067a0:	4614      	mov	r4, r2
 80067a2:	4698      	mov	r8, r3
 80067a4:	4606      	mov	r6, r0
 80067a6:	b118      	cbz	r0, 80067b0 <_vfiprintf_r+0x18>
 80067a8:	6a03      	ldr	r3, [r0, #32]
 80067aa:	b90b      	cbnz	r3, 80067b0 <_vfiprintf_r+0x18>
 80067ac:	f7fe ffa2 	bl	80056f4 <__sinit>
 80067b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067b2:	07d9      	lsls	r1, r3, #31
 80067b4:	d405      	bmi.n	80067c2 <_vfiprintf_r+0x2a>
 80067b6:	89ab      	ldrh	r3, [r5, #12]
 80067b8:	059a      	lsls	r2, r3, #22
 80067ba:	d402      	bmi.n	80067c2 <_vfiprintf_r+0x2a>
 80067bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067be:	f7ff f914 	bl	80059ea <__retarget_lock_acquire_recursive>
 80067c2:	89ab      	ldrh	r3, [r5, #12]
 80067c4:	071b      	lsls	r3, r3, #28
 80067c6:	d501      	bpl.n	80067cc <_vfiprintf_r+0x34>
 80067c8:	692b      	ldr	r3, [r5, #16]
 80067ca:	b99b      	cbnz	r3, 80067f4 <_vfiprintf_r+0x5c>
 80067cc:	4629      	mov	r1, r5
 80067ce:	4630      	mov	r0, r6
 80067d0:	f000 fac6 	bl	8006d60 <__swsetup_r>
 80067d4:	b170      	cbz	r0, 80067f4 <_vfiprintf_r+0x5c>
 80067d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067d8:	07dc      	lsls	r4, r3, #31
 80067da:	d504      	bpl.n	80067e6 <_vfiprintf_r+0x4e>
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	b01d      	add	sp, #116	@ 0x74
 80067e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e6:	89ab      	ldrh	r3, [r5, #12]
 80067e8:	0598      	lsls	r0, r3, #22
 80067ea:	d4f7      	bmi.n	80067dc <_vfiprintf_r+0x44>
 80067ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ee:	f7ff f8fd 	bl	80059ec <__retarget_lock_release_recursive>
 80067f2:	e7f3      	b.n	80067dc <_vfiprintf_r+0x44>
 80067f4:	2300      	movs	r3, #0
 80067f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80067f8:	2320      	movs	r3, #32
 80067fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006802:	2330      	movs	r3, #48	@ 0x30
 8006804:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80069b4 <_vfiprintf_r+0x21c>
 8006808:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800680c:	f04f 0901 	mov.w	r9, #1
 8006810:	4623      	mov	r3, r4
 8006812:	469a      	mov	sl, r3
 8006814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006818:	b10a      	cbz	r2, 800681e <_vfiprintf_r+0x86>
 800681a:	2a25      	cmp	r2, #37	@ 0x25
 800681c:	d1f9      	bne.n	8006812 <_vfiprintf_r+0x7a>
 800681e:	ebba 0b04 	subs.w	fp, sl, r4
 8006822:	d00b      	beq.n	800683c <_vfiprintf_r+0xa4>
 8006824:	465b      	mov	r3, fp
 8006826:	4622      	mov	r2, r4
 8006828:	4629      	mov	r1, r5
 800682a:	4630      	mov	r0, r6
 800682c:	f7ff ffa1 	bl	8006772 <__sfputs_r>
 8006830:	3001      	adds	r0, #1
 8006832:	f000 80a7 	beq.w	8006984 <_vfiprintf_r+0x1ec>
 8006836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006838:	445a      	add	r2, fp
 800683a:	9209      	str	r2, [sp, #36]	@ 0x24
 800683c:	f89a 3000 	ldrb.w	r3, [sl]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 809f 	beq.w	8006984 <_vfiprintf_r+0x1ec>
 8006846:	2300      	movs	r3, #0
 8006848:	f04f 32ff 	mov.w	r2, #4294967295
 800684c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006850:	f10a 0a01 	add.w	sl, sl, #1
 8006854:	9304      	str	r3, [sp, #16]
 8006856:	9307      	str	r3, [sp, #28]
 8006858:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800685c:	931a      	str	r3, [sp, #104]	@ 0x68
 800685e:	4654      	mov	r4, sl
 8006860:	2205      	movs	r2, #5
 8006862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006866:	4853      	ldr	r0, [pc, #332]	@ (80069b4 <_vfiprintf_r+0x21c>)
 8006868:	f7f9 fcba 	bl	80001e0 <memchr>
 800686c:	9a04      	ldr	r2, [sp, #16]
 800686e:	b9d8      	cbnz	r0, 80068a8 <_vfiprintf_r+0x110>
 8006870:	06d1      	lsls	r1, r2, #27
 8006872:	bf44      	itt	mi
 8006874:	2320      	movmi	r3, #32
 8006876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800687a:	0713      	lsls	r3, r2, #28
 800687c:	bf44      	itt	mi
 800687e:	232b      	movmi	r3, #43	@ 0x2b
 8006880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006884:	f89a 3000 	ldrb.w	r3, [sl]
 8006888:	2b2a      	cmp	r3, #42	@ 0x2a
 800688a:	d015      	beq.n	80068b8 <_vfiprintf_r+0x120>
 800688c:	9a07      	ldr	r2, [sp, #28]
 800688e:	4654      	mov	r4, sl
 8006890:	2000      	movs	r0, #0
 8006892:	f04f 0c0a 	mov.w	ip, #10
 8006896:	4621      	mov	r1, r4
 8006898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800689c:	3b30      	subs	r3, #48	@ 0x30
 800689e:	2b09      	cmp	r3, #9
 80068a0:	d94b      	bls.n	800693a <_vfiprintf_r+0x1a2>
 80068a2:	b1b0      	cbz	r0, 80068d2 <_vfiprintf_r+0x13a>
 80068a4:	9207      	str	r2, [sp, #28]
 80068a6:	e014      	b.n	80068d2 <_vfiprintf_r+0x13a>
 80068a8:	eba0 0308 	sub.w	r3, r0, r8
 80068ac:	fa09 f303 	lsl.w	r3, r9, r3
 80068b0:	4313      	orrs	r3, r2
 80068b2:	9304      	str	r3, [sp, #16]
 80068b4:	46a2      	mov	sl, r4
 80068b6:	e7d2      	b.n	800685e <_vfiprintf_r+0xc6>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	1d19      	adds	r1, r3, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	9103      	str	r1, [sp, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bfbb      	ittet	lt
 80068c4:	425b      	neglt	r3, r3
 80068c6:	f042 0202 	orrlt.w	r2, r2, #2
 80068ca:	9307      	strge	r3, [sp, #28]
 80068cc:	9307      	strlt	r3, [sp, #28]
 80068ce:	bfb8      	it	lt
 80068d0:	9204      	strlt	r2, [sp, #16]
 80068d2:	7823      	ldrb	r3, [r4, #0]
 80068d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80068d6:	d10a      	bne.n	80068ee <_vfiprintf_r+0x156>
 80068d8:	7863      	ldrb	r3, [r4, #1]
 80068da:	2b2a      	cmp	r3, #42	@ 0x2a
 80068dc:	d132      	bne.n	8006944 <_vfiprintf_r+0x1ac>
 80068de:	9b03      	ldr	r3, [sp, #12]
 80068e0:	1d1a      	adds	r2, r3, #4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	9203      	str	r2, [sp, #12]
 80068e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068ea:	3402      	adds	r4, #2
 80068ec:	9305      	str	r3, [sp, #20]
 80068ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80069c4 <_vfiprintf_r+0x22c>
 80068f2:	7821      	ldrb	r1, [r4, #0]
 80068f4:	2203      	movs	r2, #3
 80068f6:	4650      	mov	r0, sl
 80068f8:	f7f9 fc72 	bl	80001e0 <memchr>
 80068fc:	b138      	cbz	r0, 800690e <_vfiprintf_r+0x176>
 80068fe:	9b04      	ldr	r3, [sp, #16]
 8006900:	eba0 000a 	sub.w	r0, r0, sl
 8006904:	2240      	movs	r2, #64	@ 0x40
 8006906:	4082      	lsls	r2, r0
 8006908:	4313      	orrs	r3, r2
 800690a:	3401      	adds	r4, #1
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006912:	4829      	ldr	r0, [pc, #164]	@ (80069b8 <_vfiprintf_r+0x220>)
 8006914:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006918:	2206      	movs	r2, #6
 800691a:	f7f9 fc61 	bl	80001e0 <memchr>
 800691e:	2800      	cmp	r0, #0
 8006920:	d03f      	beq.n	80069a2 <_vfiprintf_r+0x20a>
 8006922:	4b26      	ldr	r3, [pc, #152]	@ (80069bc <_vfiprintf_r+0x224>)
 8006924:	bb1b      	cbnz	r3, 800696e <_vfiprintf_r+0x1d6>
 8006926:	9b03      	ldr	r3, [sp, #12]
 8006928:	3307      	adds	r3, #7
 800692a:	f023 0307 	bic.w	r3, r3, #7
 800692e:	3308      	adds	r3, #8
 8006930:	9303      	str	r3, [sp, #12]
 8006932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006934:	443b      	add	r3, r7
 8006936:	9309      	str	r3, [sp, #36]	@ 0x24
 8006938:	e76a      	b.n	8006810 <_vfiprintf_r+0x78>
 800693a:	fb0c 3202 	mla	r2, ip, r2, r3
 800693e:	460c      	mov	r4, r1
 8006940:	2001      	movs	r0, #1
 8006942:	e7a8      	b.n	8006896 <_vfiprintf_r+0xfe>
 8006944:	2300      	movs	r3, #0
 8006946:	3401      	adds	r4, #1
 8006948:	9305      	str	r3, [sp, #20]
 800694a:	4619      	mov	r1, r3
 800694c:	f04f 0c0a 	mov.w	ip, #10
 8006950:	4620      	mov	r0, r4
 8006952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006956:	3a30      	subs	r2, #48	@ 0x30
 8006958:	2a09      	cmp	r2, #9
 800695a:	d903      	bls.n	8006964 <_vfiprintf_r+0x1cc>
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0c6      	beq.n	80068ee <_vfiprintf_r+0x156>
 8006960:	9105      	str	r1, [sp, #20]
 8006962:	e7c4      	b.n	80068ee <_vfiprintf_r+0x156>
 8006964:	fb0c 2101 	mla	r1, ip, r1, r2
 8006968:	4604      	mov	r4, r0
 800696a:	2301      	movs	r3, #1
 800696c:	e7f0      	b.n	8006950 <_vfiprintf_r+0x1b8>
 800696e:	ab03      	add	r3, sp, #12
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	462a      	mov	r2, r5
 8006974:	4b12      	ldr	r3, [pc, #72]	@ (80069c0 <_vfiprintf_r+0x228>)
 8006976:	a904      	add	r1, sp, #16
 8006978:	4630      	mov	r0, r6
 800697a:	f3af 8000 	nop.w
 800697e:	4607      	mov	r7, r0
 8006980:	1c78      	adds	r0, r7, #1
 8006982:	d1d6      	bne.n	8006932 <_vfiprintf_r+0x19a>
 8006984:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006986:	07d9      	lsls	r1, r3, #31
 8006988:	d405      	bmi.n	8006996 <_vfiprintf_r+0x1fe>
 800698a:	89ab      	ldrh	r3, [r5, #12]
 800698c:	059a      	lsls	r2, r3, #22
 800698e:	d402      	bmi.n	8006996 <_vfiprintf_r+0x1fe>
 8006990:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006992:	f7ff f82b 	bl	80059ec <__retarget_lock_release_recursive>
 8006996:	89ab      	ldrh	r3, [r5, #12]
 8006998:	065b      	lsls	r3, r3, #25
 800699a:	f53f af1f 	bmi.w	80067dc <_vfiprintf_r+0x44>
 800699e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069a0:	e71e      	b.n	80067e0 <_vfiprintf_r+0x48>
 80069a2:	ab03      	add	r3, sp, #12
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	462a      	mov	r2, r5
 80069a8:	4b05      	ldr	r3, [pc, #20]	@ (80069c0 <_vfiprintf_r+0x228>)
 80069aa:	a904      	add	r1, sp, #16
 80069ac:	4630      	mov	r0, r6
 80069ae:	f000 f879 	bl	8006aa4 <_printf_i>
 80069b2:	e7e4      	b.n	800697e <_vfiprintf_r+0x1e6>
 80069b4:	080071b9 	.word	0x080071b9
 80069b8:	080071bf 	.word	0x080071bf
 80069bc:	00000000 	.word	0x00000000
 80069c0:	08006773 	.word	0x08006773
 80069c4:	08007099 	.word	0x08007099

080069c8 <_printf_common>:
 80069c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	4616      	mov	r6, r2
 80069ce:	4698      	mov	r8, r3
 80069d0:	688a      	ldr	r2, [r1, #8]
 80069d2:	690b      	ldr	r3, [r1, #16]
 80069d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069d8:	4293      	cmp	r3, r2
 80069da:	bfb8      	it	lt
 80069dc:	4613      	movlt	r3, r2
 80069de:	6033      	str	r3, [r6, #0]
 80069e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069e4:	4607      	mov	r7, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	b10a      	cbz	r2, 80069ee <_printf_common+0x26>
 80069ea:	3301      	adds	r3, #1
 80069ec:	6033      	str	r3, [r6, #0]
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	0699      	lsls	r1, r3, #26
 80069f2:	bf42      	ittt	mi
 80069f4:	6833      	ldrmi	r3, [r6, #0]
 80069f6:	3302      	addmi	r3, #2
 80069f8:	6033      	strmi	r3, [r6, #0]
 80069fa:	6825      	ldr	r5, [r4, #0]
 80069fc:	f015 0506 	ands.w	r5, r5, #6
 8006a00:	d106      	bne.n	8006a10 <_printf_common+0x48>
 8006a02:	f104 0a19 	add.w	sl, r4, #25
 8006a06:	68e3      	ldr	r3, [r4, #12]
 8006a08:	6832      	ldr	r2, [r6, #0]
 8006a0a:	1a9b      	subs	r3, r3, r2
 8006a0c:	42ab      	cmp	r3, r5
 8006a0e:	dc26      	bgt.n	8006a5e <_printf_common+0x96>
 8006a10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a14:	6822      	ldr	r2, [r4, #0]
 8006a16:	3b00      	subs	r3, #0
 8006a18:	bf18      	it	ne
 8006a1a:	2301      	movne	r3, #1
 8006a1c:	0692      	lsls	r2, r2, #26
 8006a1e:	d42b      	bmi.n	8006a78 <_printf_common+0xb0>
 8006a20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a24:	4641      	mov	r1, r8
 8006a26:	4638      	mov	r0, r7
 8006a28:	47c8      	blx	r9
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	d01e      	beq.n	8006a6c <_printf_common+0xa4>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	6922      	ldr	r2, [r4, #16]
 8006a32:	f003 0306 	and.w	r3, r3, #6
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	bf02      	ittt	eq
 8006a3a:	68e5      	ldreq	r5, [r4, #12]
 8006a3c:	6833      	ldreq	r3, [r6, #0]
 8006a3e:	1aed      	subeq	r5, r5, r3
 8006a40:	68a3      	ldr	r3, [r4, #8]
 8006a42:	bf0c      	ite	eq
 8006a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a48:	2500      	movne	r5, #0
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	bfc4      	itt	gt
 8006a4e:	1a9b      	subgt	r3, r3, r2
 8006a50:	18ed      	addgt	r5, r5, r3
 8006a52:	2600      	movs	r6, #0
 8006a54:	341a      	adds	r4, #26
 8006a56:	42b5      	cmp	r5, r6
 8006a58:	d11a      	bne.n	8006a90 <_printf_common+0xc8>
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	e008      	b.n	8006a70 <_printf_common+0xa8>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4652      	mov	r2, sl
 8006a62:	4641      	mov	r1, r8
 8006a64:	4638      	mov	r0, r7
 8006a66:	47c8      	blx	r9
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d103      	bne.n	8006a74 <_printf_common+0xac>
 8006a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a74:	3501      	adds	r5, #1
 8006a76:	e7c6      	b.n	8006a06 <_printf_common+0x3e>
 8006a78:	18e1      	adds	r1, r4, r3
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	2030      	movs	r0, #48	@ 0x30
 8006a7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a82:	4422      	add	r2, r4
 8006a84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a8c:	3302      	adds	r3, #2
 8006a8e:	e7c7      	b.n	8006a20 <_printf_common+0x58>
 8006a90:	2301      	movs	r3, #1
 8006a92:	4622      	mov	r2, r4
 8006a94:	4641      	mov	r1, r8
 8006a96:	4638      	mov	r0, r7
 8006a98:	47c8      	blx	r9
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	d0e6      	beq.n	8006a6c <_printf_common+0xa4>
 8006a9e:	3601      	adds	r6, #1
 8006aa0:	e7d9      	b.n	8006a56 <_printf_common+0x8e>
	...

08006aa4 <_printf_i>:
 8006aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa8:	7e0f      	ldrb	r7, [r1, #24]
 8006aaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006aac:	2f78      	cmp	r7, #120	@ 0x78
 8006aae:	4691      	mov	r9, r2
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	469a      	mov	sl, r3
 8006ab6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006aba:	d807      	bhi.n	8006acc <_printf_i+0x28>
 8006abc:	2f62      	cmp	r7, #98	@ 0x62
 8006abe:	d80a      	bhi.n	8006ad6 <_printf_i+0x32>
 8006ac0:	2f00      	cmp	r7, #0
 8006ac2:	f000 80d2 	beq.w	8006c6a <_printf_i+0x1c6>
 8006ac6:	2f58      	cmp	r7, #88	@ 0x58
 8006ac8:	f000 80b9 	beq.w	8006c3e <_printf_i+0x19a>
 8006acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ad0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ad4:	e03a      	b.n	8006b4c <_printf_i+0xa8>
 8006ad6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ada:	2b15      	cmp	r3, #21
 8006adc:	d8f6      	bhi.n	8006acc <_printf_i+0x28>
 8006ade:	a101      	add	r1, pc, #4	@ (adr r1, 8006ae4 <_printf_i+0x40>)
 8006ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ae4:	08006b3d 	.word	0x08006b3d
 8006ae8:	08006b51 	.word	0x08006b51
 8006aec:	08006acd 	.word	0x08006acd
 8006af0:	08006acd 	.word	0x08006acd
 8006af4:	08006acd 	.word	0x08006acd
 8006af8:	08006acd 	.word	0x08006acd
 8006afc:	08006b51 	.word	0x08006b51
 8006b00:	08006acd 	.word	0x08006acd
 8006b04:	08006acd 	.word	0x08006acd
 8006b08:	08006acd 	.word	0x08006acd
 8006b0c:	08006acd 	.word	0x08006acd
 8006b10:	08006c51 	.word	0x08006c51
 8006b14:	08006b7b 	.word	0x08006b7b
 8006b18:	08006c0b 	.word	0x08006c0b
 8006b1c:	08006acd 	.word	0x08006acd
 8006b20:	08006acd 	.word	0x08006acd
 8006b24:	08006c73 	.word	0x08006c73
 8006b28:	08006acd 	.word	0x08006acd
 8006b2c:	08006b7b 	.word	0x08006b7b
 8006b30:	08006acd 	.word	0x08006acd
 8006b34:	08006acd 	.word	0x08006acd
 8006b38:	08006c13 	.word	0x08006c13
 8006b3c:	6833      	ldr	r3, [r6, #0]
 8006b3e:	1d1a      	adds	r2, r3, #4
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6032      	str	r2, [r6, #0]
 8006b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e09d      	b.n	8006c8c <_printf_i+0x1e8>
 8006b50:	6833      	ldr	r3, [r6, #0]
 8006b52:	6820      	ldr	r0, [r4, #0]
 8006b54:	1d19      	adds	r1, r3, #4
 8006b56:	6031      	str	r1, [r6, #0]
 8006b58:	0606      	lsls	r6, r0, #24
 8006b5a:	d501      	bpl.n	8006b60 <_printf_i+0xbc>
 8006b5c:	681d      	ldr	r5, [r3, #0]
 8006b5e:	e003      	b.n	8006b68 <_printf_i+0xc4>
 8006b60:	0645      	lsls	r5, r0, #25
 8006b62:	d5fb      	bpl.n	8006b5c <_printf_i+0xb8>
 8006b64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b68:	2d00      	cmp	r5, #0
 8006b6a:	da03      	bge.n	8006b74 <_printf_i+0xd0>
 8006b6c:	232d      	movs	r3, #45	@ 0x2d
 8006b6e:	426d      	negs	r5, r5
 8006b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b74:	4859      	ldr	r0, [pc, #356]	@ (8006cdc <_printf_i+0x238>)
 8006b76:	230a      	movs	r3, #10
 8006b78:	e011      	b.n	8006b9e <_printf_i+0xfa>
 8006b7a:	6821      	ldr	r1, [r4, #0]
 8006b7c:	6833      	ldr	r3, [r6, #0]
 8006b7e:	0608      	lsls	r0, r1, #24
 8006b80:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b84:	d402      	bmi.n	8006b8c <_printf_i+0xe8>
 8006b86:	0649      	lsls	r1, r1, #25
 8006b88:	bf48      	it	mi
 8006b8a:	b2ad      	uxthmi	r5, r5
 8006b8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b8e:	4853      	ldr	r0, [pc, #332]	@ (8006cdc <_printf_i+0x238>)
 8006b90:	6033      	str	r3, [r6, #0]
 8006b92:	bf14      	ite	ne
 8006b94:	230a      	movne	r3, #10
 8006b96:	2308      	moveq	r3, #8
 8006b98:	2100      	movs	r1, #0
 8006b9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b9e:	6866      	ldr	r6, [r4, #4]
 8006ba0:	60a6      	str	r6, [r4, #8]
 8006ba2:	2e00      	cmp	r6, #0
 8006ba4:	bfa2      	ittt	ge
 8006ba6:	6821      	ldrge	r1, [r4, #0]
 8006ba8:	f021 0104 	bicge.w	r1, r1, #4
 8006bac:	6021      	strge	r1, [r4, #0]
 8006bae:	b90d      	cbnz	r5, 8006bb4 <_printf_i+0x110>
 8006bb0:	2e00      	cmp	r6, #0
 8006bb2:	d04b      	beq.n	8006c4c <_printf_i+0x1a8>
 8006bb4:	4616      	mov	r6, r2
 8006bb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bba:	fb03 5711 	mls	r7, r3, r1, r5
 8006bbe:	5dc7      	ldrb	r7, [r0, r7]
 8006bc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bc4:	462f      	mov	r7, r5
 8006bc6:	42bb      	cmp	r3, r7
 8006bc8:	460d      	mov	r5, r1
 8006bca:	d9f4      	bls.n	8006bb6 <_printf_i+0x112>
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d10b      	bne.n	8006be8 <_printf_i+0x144>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	07df      	lsls	r7, r3, #31
 8006bd4:	d508      	bpl.n	8006be8 <_printf_i+0x144>
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	6861      	ldr	r1, [r4, #4]
 8006bda:	4299      	cmp	r1, r3
 8006bdc:	bfde      	ittt	le
 8006bde:	2330      	movle	r3, #48	@ 0x30
 8006be0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006be4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006be8:	1b92      	subs	r2, r2, r6
 8006bea:	6122      	str	r2, [r4, #16]
 8006bec:	f8cd a000 	str.w	sl, [sp]
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	aa03      	add	r2, sp, #12
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	f7ff fee6 	bl	80069c8 <_printf_common>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d14a      	bne.n	8006c96 <_printf_i+0x1f2>
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	b004      	add	sp, #16
 8006c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	f043 0320 	orr.w	r3, r3, #32
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	4833      	ldr	r0, [pc, #204]	@ (8006ce0 <_printf_i+0x23c>)
 8006c14:	2778      	movs	r7, #120	@ 0x78
 8006c16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	6831      	ldr	r1, [r6, #0]
 8006c1e:	061f      	lsls	r7, r3, #24
 8006c20:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c24:	d402      	bmi.n	8006c2c <_printf_i+0x188>
 8006c26:	065f      	lsls	r7, r3, #25
 8006c28:	bf48      	it	mi
 8006c2a:	b2ad      	uxthmi	r5, r5
 8006c2c:	6031      	str	r1, [r6, #0]
 8006c2e:	07d9      	lsls	r1, r3, #31
 8006c30:	bf44      	itt	mi
 8006c32:	f043 0320 	orrmi.w	r3, r3, #32
 8006c36:	6023      	strmi	r3, [r4, #0]
 8006c38:	b11d      	cbz	r5, 8006c42 <_printf_i+0x19e>
 8006c3a:	2310      	movs	r3, #16
 8006c3c:	e7ac      	b.n	8006b98 <_printf_i+0xf4>
 8006c3e:	4827      	ldr	r0, [pc, #156]	@ (8006cdc <_printf_i+0x238>)
 8006c40:	e7e9      	b.n	8006c16 <_printf_i+0x172>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	f023 0320 	bic.w	r3, r3, #32
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	e7f6      	b.n	8006c3a <_printf_i+0x196>
 8006c4c:	4616      	mov	r6, r2
 8006c4e:	e7bd      	b.n	8006bcc <_printf_i+0x128>
 8006c50:	6833      	ldr	r3, [r6, #0]
 8006c52:	6825      	ldr	r5, [r4, #0]
 8006c54:	6961      	ldr	r1, [r4, #20]
 8006c56:	1d18      	adds	r0, r3, #4
 8006c58:	6030      	str	r0, [r6, #0]
 8006c5a:	062e      	lsls	r6, r5, #24
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	d501      	bpl.n	8006c64 <_printf_i+0x1c0>
 8006c60:	6019      	str	r1, [r3, #0]
 8006c62:	e002      	b.n	8006c6a <_printf_i+0x1c6>
 8006c64:	0668      	lsls	r0, r5, #25
 8006c66:	d5fb      	bpl.n	8006c60 <_printf_i+0x1bc>
 8006c68:	8019      	strh	r1, [r3, #0]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	4616      	mov	r6, r2
 8006c70:	e7bc      	b.n	8006bec <_printf_i+0x148>
 8006c72:	6833      	ldr	r3, [r6, #0]
 8006c74:	1d1a      	adds	r2, r3, #4
 8006c76:	6032      	str	r2, [r6, #0]
 8006c78:	681e      	ldr	r6, [r3, #0]
 8006c7a:	6862      	ldr	r2, [r4, #4]
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f7f9 faae 	bl	80001e0 <memchr>
 8006c84:	b108      	cbz	r0, 8006c8a <_printf_i+0x1e6>
 8006c86:	1b80      	subs	r0, r0, r6
 8006c88:	6060      	str	r0, [r4, #4]
 8006c8a:	6863      	ldr	r3, [r4, #4]
 8006c8c:	6123      	str	r3, [r4, #16]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c94:	e7aa      	b.n	8006bec <_printf_i+0x148>
 8006c96:	6923      	ldr	r3, [r4, #16]
 8006c98:	4632      	mov	r2, r6
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	47d0      	blx	sl
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	d0ad      	beq.n	8006c00 <_printf_i+0x15c>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	079b      	lsls	r3, r3, #30
 8006ca8:	d413      	bmi.n	8006cd2 <_printf_i+0x22e>
 8006caa:	68e0      	ldr	r0, [r4, #12]
 8006cac:	9b03      	ldr	r3, [sp, #12]
 8006cae:	4298      	cmp	r0, r3
 8006cb0:	bfb8      	it	lt
 8006cb2:	4618      	movlt	r0, r3
 8006cb4:	e7a6      	b.n	8006c04 <_printf_i+0x160>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4632      	mov	r2, r6
 8006cba:	4649      	mov	r1, r9
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	47d0      	blx	sl
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d09d      	beq.n	8006c00 <_printf_i+0x15c>
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	68e3      	ldr	r3, [r4, #12]
 8006cc8:	9903      	ldr	r1, [sp, #12]
 8006cca:	1a5b      	subs	r3, r3, r1
 8006ccc:	42ab      	cmp	r3, r5
 8006cce:	dcf2      	bgt.n	8006cb6 <_printf_i+0x212>
 8006cd0:	e7eb      	b.n	8006caa <_printf_i+0x206>
 8006cd2:	2500      	movs	r5, #0
 8006cd4:	f104 0619 	add.w	r6, r4, #25
 8006cd8:	e7f5      	b.n	8006cc6 <_printf_i+0x222>
 8006cda:	bf00      	nop
 8006cdc:	080071c6 	.word	0x080071c6
 8006ce0:	080071d7 	.word	0x080071d7

08006ce4 <__swbuf_r>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	460e      	mov	r6, r1
 8006ce8:	4614      	mov	r4, r2
 8006cea:	4605      	mov	r5, r0
 8006cec:	b118      	cbz	r0, 8006cf6 <__swbuf_r+0x12>
 8006cee:	6a03      	ldr	r3, [r0, #32]
 8006cf0:	b90b      	cbnz	r3, 8006cf6 <__swbuf_r+0x12>
 8006cf2:	f7fe fcff 	bl	80056f4 <__sinit>
 8006cf6:	69a3      	ldr	r3, [r4, #24]
 8006cf8:	60a3      	str	r3, [r4, #8]
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	071a      	lsls	r2, r3, #28
 8006cfe:	d501      	bpl.n	8006d04 <__swbuf_r+0x20>
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	b943      	cbnz	r3, 8006d16 <__swbuf_r+0x32>
 8006d04:	4621      	mov	r1, r4
 8006d06:	4628      	mov	r0, r5
 8006d08:	f000 f82a 	bl	8006d60 <__swsetup_r>
 8006d0c:	b118      	cbz	r0, 8006d16 <__swbuf_r+0x32>
 8006d0e:	f04f 37ff 	mov.w	r7, #4294967295
 8006d12:	4638      	mov	r0, r7
 8006d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	6922      	ldr	r2, [r4, #16]
 8006d1a:	1a98      	subs	r0, r3, r2
 8006d1c:	6963      	ldr	r3, [r4, #20]
 8006d1e:	b2f6      	uxtb	r6, r6
 8006d20:	4283      	cmp	r3, r0
 8006d22:	4637      	mov	r7, r6
 8006d24:	dc05      	bgt.n	8006d32 <__swbuf_r+0x4e>
 8006d26:	4621      	mov	r1, r4
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f7ff fb1d 	bl	8006368 <_fflush_r>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d1ed      	bne.n	8006d0e <__swbuf_r+0x2a>
 8006d32:	68a3      	ldr	r3, [r4, #8]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	60a3      	str	r3, [r4, #8]
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	6022      	str	r2, [r4, #0]
 8006d3e:	701e      	strb	r6, [r3, #0]
 8006d40:	6962      	ldr	r2, [r4, #20]
 8006d42:	1c43      	adds	r3, r0, #1
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d004      	beq.n	8006d52 <__swbuf_r+0x6e>
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	07db      	lsls	r3, r3, #31
 8006d4c:	d5e1      	bpl.n	8006d12 <__swbuf_r+0x2e>
 8006d4e:	2e0a      	cmp	r6, #10
 8006d50:	d1df      	bne.n	8006d12 <__swbuf_r+0x2e>
 8006d52:	4621      	mov	r1, r4
 8006d54:	4628      	mov	r0, r5
 8006d56:	f7ff fb07 	bl	8006368 <_fflush_r>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d0d9      	beq.n	8006d12 <__swbuf_r+0x2e>
 8006d5e:	e7d6      	b.n	8006d0e <__swbuf_r+0x2a>

08006d60 <__swsetup_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4b29      	ldr	r3, [pc, #164]	@ (8006e08 <__swsetup_r+0xa8>)
 8006d64:	4605      	mov	r5, r0
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	460c      	mov	r4, r1
 8006d6a:	b118      	cbz	r0, 8006d74 <__swsetup_r+0x14>
 8006d6c:	6a03      	ldr	r3, [r0, #32]
 8006d6e:	b90b      	cbnz	r3, 8006d74 <__swsetup_r+0x14>
 8006d70:	f7fe fcc0 	bl	80056f4 <__sinit>
 8006d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d78:	0719      	lsls	r1, r3, #28
 8006d7a:	d422      	bmi.n	8006dc2 <__swsetup_r+0x62>
 8006d7c:	06da      	lsls	r2, r3, #27
 8006d7e:	d407      	bmi.n	8006d90 <__swsetup_r+0x30>
 8006d80:	2209      	movs	r2, #9
 8006d82:	602a      	str	r2, [r5, #0]
 8006d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d88:	81a3      	strh	r3, [r4, #12]
 8006d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8e:	e033      	b.n	8006df8 <__swsetup_r+0x98>
 8006d90:	0758      	lsls	r0, r3, #29
 8006d92:	d512      	bpl.n	8006dba <__swsetup_r+0x5a>
 8006d94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d96:	b141      	cbz	r1, 8006daa <__swsetup_r+0x4a>
 8006d98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d9c:	4299      	cmp	r1, r3
 8006d9e:	d002      	beq.n	8006da6 <__swsetup_r+0x46>
 8006da0:	4628      	mov	r0, r5
 8006da2:	f7fe fe43 	bl	8005a2c <_free_r>
 8006da6:	2300      	movs	r3, #0
 8006da8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006db0:	81a3      	strh	r3, [r4, #12]
 8006db2:	2300      	movs	r3, #0
 8006db4:	6063      	str	r3, [r4, #4]
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	f043 0308 	orr.w	r3, r3, #8
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	6923      	ldr	r3, [r4, #16]
 8006dc4:	b94b      	cbnz	r3, 8006dda <__swsetup_r+0x7a>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dd0:	d003      	beq.n	8006dda <__swsetup_r+0x7a>
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	f000 f88b 	bl	8006ef0 <__smakebuf_r>
 8006dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dde:	f013 0201 	ands.w	r2, r3, #1
 8006de2:	d00a      	beq.n	8006dfa <__swsetup_r+0x9a>
 8006de4:	2200      	movs	r2, #0
 8006de6:	60a2      	str	r2, [r4, #8]
 8006de8:	6962      	ldr	r2, [r4, #20]
 8006dea:	4252      	negs	r2, r2
 8006dec:	61a2      	str	r2, [r4, #24]
 8006dee:	6922      	ldr	r2, [r4, #16]
 8006df0:	b942      	cbnz	r2, 8006e04 <__swsetup_r+0xa4>
 8006df2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006df6:	d1c5      	bne.n	8006d84 <__swsetup_r+0x24>
 8006df8:	bd38      	pop	{r3, r4, r5, pc}
 8006dfa:	0799      	lsls	r1, r3, #30
 8006dfc:	bf58      	it	pl
 8006dfe:	6962      	ldrpl	r2, [r4, #20]
 8006e00:	60a2      	str	r2, [r4, #8]
 8006e02:	e7f4      	b.n	8006dee <__swsetup_r+0x8e>
 8006e04:	2000      	movs	r0, #0
 8006e06:	e7f7      	b.n	8006df8 <__swsetup_r+0x98>
 8006e08:	20000018 	.word	0x20000018

08006e0c <_raise_r>:
 8006e0c:	291f      	cmp	r1, #31
 8006e0e:	b538      	push	{r3, r4, r5, lr}
 8006e10:	4605      	mov	r5, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	d904      	bls.n	8006e20 <_raise_r+0x14>
 8006e16:	2316      	movs	r3, #22
 8006e18:	6003      	str	r3, [r0, #0]
 8006e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e22:	b112      	cbz	r2, 8006e2a <_raise_r+0x1e>
 8006e24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e28:	b94b      	cbnz	r3, 8006e3e <_raise_r+0x32>
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f000 f830 	bl	8006e90 <_getpid_r>
 8006e30:	4622      	mov	r2, r4
 8006e32:	4601      	mov	r1, r0
 8006e34:	4628      	mov	r0, r5
 8006e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e3a:	f000 b817 	b.w	8006e6c <_kill_r>
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d00a      	beq.n	8006e58 <_raise_r+0x4c>
 8006e42:	1c59      	adds	r1, r3, #1
 8006e44:	d103      	bne.n	8006e4e <_raise_r+0x42>
 8006e46:	2316      	movs	r3, #22
 8006e48:	6003      	str	r3, [r0, #0]
 8006e4a:	2001      	movs	r0, #1
 8006e4c:	e7e7      	b.n	8006e1e <_raise_r+0x12>
 8006e4e:	2100      	movs	r1, #0
 8006e50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006e54:	4620      	mov	r0, r4
 8006e56:	4798      	blx	r3
 8006e58:	2000      	movs	r0, #0
 8006e5a:	e7e0      	b.n	8006e1e <_raise_r+0x12>

08006e5c <raise>:
 8006e5c:	4b02      	ldr	r3, [pc, #8]	@ (8006e68 <raise+0xc>)
 8006e5e:	4601      	mov	r1, r0
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	f7ff bfd3 	b.w	8006e0c <_raise_r>
 8006e66:	bf00      	nop
 8006e68:	20000018 	.word	0x20000018

08006e6c <_kill_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4d07      	ldr	r5, [pc, #28]	@ (8006e8c <_kill_r+0x20>)
 8006e70:	2300      	movs	r3, #0
 8006e72:	4604      	mov	r4, r0
 8006e74:	4608      	mov	r0, r1
 8006e76:	4611      	mov	r1, r2
 8006e78:	602b      	str	r3, [r5, #0]
 8006e7a:	f7fb f823 	bl	8001ec4 <_kill>
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	d102      	bne.n	8006e88 <_kill_r+0x1c>
 8006e82:	682b      	ldr	r3, [r5, #0]
 8006e84:	b103      	cbz	r3, 8006e88 <_kill_r+0x1c>
 8006e86:	6023      	str	r3, [r4, #0]
 8006e88:	bd38      	pop	{r3, r4, r5, pc}
 8006e8a:	bf00      	nop
 8006e8c:	200001c4 	.word	0x200001c4

08006e90 <_getpid_r>:
 8006e90:	f7fb b810 	b.w	8001eb4 <_getpid>

08006e94 <_malloc_usable_size_r>:
 8006e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e98:	1f18      	subs	r0, r3, #4
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	bfbc      	itt	lt
 8006e9e:	580b      	ldrlt	r3, [r1, r0]
 8006ea0:	18c0      	addlt	r0, r0, r3
 8006ea2:	4770      	bx	lr

08006ea4 <__swhatbuf_r>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eac:	2900      	cmp	r1, #0
 8006eae:	b096      	sub	sp, #88	@ 0x58
 8006eb0:	4615      	mov	r5, r2
 8006eb2:	461e      	mov	r6, r3
 8006eb4:	da0d      	bge.n	8006ed2 <__swhatbuf_r+0x2e>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ebc:	f04f 0100 	mov.w	r1, #0
 8006ec0:	bf14      	ite	ne
 8006ec2:	2340      	movne	r3, #64	@ 0x40
 8006ec4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ec8:	2000      	movs	r0, #0
 8006eca:	6031      	str	r1, [r6, #0]
 8006ecc:	602b      	str	r3, [r5, #0]
 8006ece:	b016      	add	sp, #88	@ 0x58
 8006ed0:	bd70      	pop	{r4, r5, r6, pc}
 8006ed2:	466a      	mov	r2, sp
 8006ed4:	f000 f848 	bl	8006f68 <_fstat_r>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	dbec      	blt.n	8006eb6 <__swhatbuf_r+0x12>
 8006edc:	9901      	ldr	r1, [sp, #4]
 8006ede:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ee2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ee6:	4259      	negs	r1, r3
 8006ee8:	4159      	adcs	r1, r3
 8006eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006eee:	e7eb      	b.n	8006ec8 <__swhatbuf_r+0x24>

08006ef0 <__smakebuf_r>:
 8006ef0:	898b      	ldrh	r3, [r1, #12]
 8006ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ef4:	079d      	lsls	r5, r3, #30
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460c      	mov	r4, r1
 8006efa:	d507      	bpl.n	8006f0c <__smakebuf_r+0x1c>
 8006efc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	6123      	str	r3, [r4, #16]
 8006f04:	2301      	movs	r3, #1
 8006f06:	6163      	str	r3, [r4, #20]
 8006f08:	b003      	add	sp, #12
 8006f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f0c:	ab01      	add	r3, sp, #4
 8006f0e:	466a      	mov	r2, sp
 8006f10:	f7ff ffc8 	bl	8006ea4 <__swhatbuf_r>
 8006f14:	9f00      	ldr	r7, [sp, #0]
 8006f16:	4605      	mov	r5, r0
 8006f18:	4639      	mov	r1, r7
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f7fe fdfa 	bl	8005b14 <_malloc_r>
 8006f20:	b948      	cbnz	r0, 8006f36 <__smakebuf_r+0x46>
 8006f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f26:	059a      	lsls	r2, r3, #22
 8006f28:	d4ee      	bmi.n	8006f08 <__smakebuf_r+0x18>
 8006f2a:	f023 0303 	bic.w	r3, r3, #3
 8006f2e:	f043 0302 	orr.w	r3, r3, #2
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	e7e2      	b.n	8006efc <__smakebuf_r+0xc>
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	6020      	str	r0, [r4, #0]
 8006f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f3e:	81a3      	strh	r3, [r4, #12]
 8006f40:	9b01      	ldr	r3, [sp, #4]
 8006f42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f46:	b15b      	cbz	r3, 8006f60 <__smakebuf_r+0x70>
 8006f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f000 f81d 	bl	8006f8c <_isatty_r>
 8006f52:	b128      	cbz	r0, 8006f60 <__smakebuf_r+0x70>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f023 0303 	bic.w	r3, r3, #3
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	81a3      	strh	r3, [r4, #12]
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	431d      	orrs	r5, r3
 8006f64:	81a5      	strh	r5, [r4, #12]
 8006f66:	e7cf      	b.n	8006f08 <__smakebuf_r+0x18>

08006f68 <_fstat_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4d07      	ldr	r5, [pc, #28]	@ (8006f88 <_fstat_r+0x20>)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4604      	mov	r4, r0
 8006f70:	4608      	mov	r0, r1
 8006f72:	4611      	mov	r1, r2
 8006f74:	602b      	str	r3, [r5, #0]
 8006f76:	f7fb f805 	bl	8001f84 <_fstat>
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	d102      	bne.n	8006f84 <_fstat_r+0x1c>
 8006f7e:	682b      	ldr	r3, [r5, #0]
 8006f80:	b103      	cbz	r3, 8006f84 <_fstat_r+0x1c>
 8006f82:	6023      	str	r3, [r4, #0]
 8006f84:	bd38      	pop	{r3, r4, r5, pc}
 8006f86:	bf00      	nop
 8006f88:	200001c4 	.word	0x200001c4

08006f8c <_isatty_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	4d06      	ldr	r5, [pc, #24]	@ (8006fa8 <_isatty_r+0x1c>)
 8006f90:	2300      	movs	r3, #0
 8006f92:	4604      	mov	r4, r0
 8006f94:	4608      	mov	r0, r1
 8006f96:	602b      	str	r3, [r5, #0]
 8006f98:	f7fb f804 	bl	8001fa4 <_isatty>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d102      	bne.n	8006fa6 <_isatty_r+0x1a>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	b103      	cbz	r3, 8006fa6 <_isatty_r+0x1a>
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	bd38      	pop	{r3, r4, r5, pc}
 8006fa8:	200001c4 	.word	0x200001c4

08006fac <_init>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	bf00      	nop
 8006fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb2:	bc08      	pop	{r3}
 8006fb4:	469e      	mov	lr, r3
 8006fb6:	4770      	bx	lr

08006fb8 <_fini>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	bf00      	nop
 8006fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fbe:	bc08      	pop	{r3}
 8006fc0:	469e      	mov	lr, r3
 8006fc2:	4770      	bx	lr
