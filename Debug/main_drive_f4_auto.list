
main_drive_f4_auto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ec8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08007058  08007058  00017058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800727c  0800727c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800727c  0800727c  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007284  08007284  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007288  08007288  00017288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800728c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000644  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006ac  200006ac  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000145c2  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bcb  00000000  00000000  0003469d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f60  00000000  00000000  00037268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bf1  00000000  00000000  000381c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024fba  00000000  00000000  00038db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014826  00000000  00000000  0005dd73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ddc46  00000000  00000000  00072599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004bc8  00000000  00000000  001501e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00154da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007040 	.word	0x08007040

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007040 	.word	0x08007040

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <TIM3_Init>:

int temp_x,temp_y;
uint8_t temp1 = 100,temp2 = 100;

void TIM3_Init(void)	///50Hz PWM (4 pin: 2 BLDC, !
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08e      	sub	sp, #56	; 0x38
 8000580:	af00      	add	r7, sp, #0


	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
 80005a8:	615a      	str	r2, [r3, #20]
 80005aa:	619a      	str	r2, [r3, #24]


	  htim3.Instance = TIM3;
 80005ac:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <TIM3_Init+0x148>)
 80005ae:	4a46      	ldr	r2, [pc, #280]	; (80006c8 <TIM3_Init+0x14c>)
 80005b0:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 719;
 80005b2:	4b44      	ldr	r3, [pc, #272]	; (80006c4 <TIM3_Init+0x148>)
 80005b4:	f240 22cf 	movw	r2, #719	; 0x2cf
 80005b8:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ba:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <TIM3_Init+0x148>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 2000;
 80005c0:	4b40      	ldr	r3, [pc, #256]	; (80006c4 <TIM3_Init+0x148>)
 80005c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005c6:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c8:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <TIM3_Init+0x148>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ce:	4b3d      	ldr	r3, [pc, #244]	; (80006c4 <TIM3_Init+0x148>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005d4:	483b      	ldr	r0, [pc, #236]	; (80006c4 <TIM3_Init+0x148>)
 80005d6:	f002 fdd9 	bl	800318c <HAL_TIM_Base_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <TIM3_Init+0x68>
		  {
			Error_Handler();
 80005e0:	f000 feec 	bl	80013bc <Error_Handler>
		  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ee:	4619      	mov	r1, r3
 80005f0:	4834      	ldr	r0, [pc, #208]	; (80006c4 <TIM3_Init+0x148>)
 80005f2:	f003 fbc7 	bl	8003d84 <HAL_TIM_ConfigClockSource>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <TIM3_Init+0x84>
		  {
			Error_Handler();
 80005fc:	f000 fede 	bl	80013bc <Error_Handler>
		  }
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000600:	4830      	ldr	r0, [pc, #192]	; (80006c4 <TIM3_Init+0x148>)
 8000602:	f002 ff44 	bl	800348e <HAL_TIM_PWM_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <TIM3_Init+0x94>
		  {
			Error_Handler();
 800060c:	f000 fed6 	bl	80013bc <Error_Handler>
		  }
	  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000610:	482c      	ldr	r0, [pc, #176]	; (80006c4 <TIM3_Init+0x148>)
 8000612:	f002 fee3 	bl	80033dc <HAL_TIM_OC_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <TIM3_Init+0xa4>
		  {
			Error_Handler();
 800061c:	f000 fece 	bl	80013bc <Error_Handler>
		  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4619      	mov	r1, r3
 800062e:	4825      	ldr	r0, [pc, #148]	; (80006c4 <TIM3_Init+0x148>)
 8000630:	f003 ffa8 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <TIM3_Init+0xc2>
		  {
			Error_Handler();
 800063a:	f000 febf 	bl	80013bc <Error_Handler>
		  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800063e:	2360      	movs	r3, #96	; 0x60
 8000640:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = 0; /// 100 200(min max)
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	4619      	mov	r1, r3
 8000654:	481b      	ldr	r0, [pc, #108]	; (80006c4 <TIM3_Init+0x148>)
 8000656:	f003 fad3 	bl	8003c00 <HAL_TIM_PWM_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <TIM3_Init+0xe8>
		  {
			Error_Handler();
 8000660:	f000 feac 	bl	80013bc <Error_Handler>
		  }
	  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2204      	movs	r2, #4
 8000668:	4619      	mov	r1, r3
 800066a:	4816      	ldr	r0, [pc, #88]	; (80006c4 <TIM3_Init+0x148>)
 800066c:	f003 fa6c 	bl	8003b48 <HAL_TIM_OC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <TIM3_Init+0xfe>
		  {
			Error_Handler();
 8000676:	f000 fea1 	bl	80013bc <Error_Handler>
		  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2208      	movs	r2, #8
 800067e:	4619      	mov	r1, r3
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <TIM3_Init+0x148>)
 8000682:	f003 fabd 	bl	8003c00 <HAL_TIM_PWM_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <TIM3_Init+0x114>
		  {
			Error_Handler();
 800068c:	f000 fe96 	bl	80013bc <Error_Handler>
		  }
	  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	220c      	movs	r2, #12
 8000694:	4619      	mov	r1, r3
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <TIM3_Init+0x148>)
 8000698:	f003 fa56 	bl	8003b48 <HAL_TIM_OC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <TIM3_Init+0x12a>
		  {
			Error_Handler();
 80006a2:	f000 fe8b 	bl	80013bc <Error_Handler>
		  }

	  HAL_TIM_MspPostInit(&htim3);
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <TIM3_Init+0x148>)
 80006a8:	f001 f9ec 	bl	8001a84 <HAL_TIM_MspPostInit>

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006ac:	2100      	movs	r1, #0
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <TIM3_Init+0x148>)
 80006b0:	f002 ff3c 	bl	800352c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006b4:	2104      	movs	r1, #4
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <TIM3_Init+0x148>)
 80006b8:	f002 ff38 	bl	800352c <HAL_TIM_PWM_Start>
}
 80006bc:	bf00      	nop
 80006be:	3738      	adds	r7, #56	; 0x38
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000484 	.word	0x20000484
 80006c8:	40000400 	.word	0x40000400

080006cc <MX_TIM4_Init>:
#include "delay.h"

extern TIM_HandleTypeDef htim4,htim14;
extern uint32_t time_run;
void MX_TIM4_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0


//50ms
  htim4.Instance = TIM4;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_TIM4_Init+0x48>)
 80006d2:	4a11      	ldr	r2, [pc, #68]	; (8000718 <MX_TIM4_Init+0x4c>)
 80006d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_TIM4_Init+0x48>)
 80006d8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80006dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_TIM4_Init+0x48>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_TIM4_Init+0x48>)
 80006e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80006ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_TIM4_Init+0x48>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_TIM4_Init+0x48>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80006f8:	4806      	ldr	r0, [pc, #24]	; (8000714 <MX_TIM4_Init+0x48>)
 80006fa:	f002 fd47 	bl	800318c <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM4_Init+0x3c>
  {
    Error_Handler();
 8000704:	f000 fe5a 	bl	80013bc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000708:	4802      	ldr	r0, [pc, #8]	; (8000714 <MX_TIM4_Init+0x48>)
 800070a:	f001 f9bb 	bl	8001a84 <HAL_TIM_MspPostInit>

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200003a4 	.word	0x200003a4
 8000718:	40000800 	.word	0x40000800

0800071c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a09      	ldr	r2, [pc, #36]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d10c      	bne.n	8000748 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		time_run++;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000736:	6013      	str	r3, [r2, #0]
		RUN_ABLE = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 8000738:	2120      	movs	r1, #32
 800073a:	4807      	ldr	r0, [pc, #28]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800073c:	f002 f89c 	bl	8002878 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000746:	701a      	strb	r2, [r3, #0]
	}
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40000800 	.word	0x40000800
 8000754:	20000274 	.word	0x20000274
 8000758:	40020c00 	.word	0x40020c00
 800075c:	2000038c 	.word	0x2000038c

08000760 <delay_us>:
{
	return time_run*50;
}

void delay_us(uint16_t us)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim14,0);
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <delay_us+0x30>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24

//	uint16_t temp = __HAL_TIM_GET_COUNTER(&htim14);
	while(__HAL_TIM_GET_COUNTER(&htim14) < us);
 8000772:	bf00      	nop
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <delay_us+0x30>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	429a      	cmp	r2, r3
 800077e:	d3f9      	bcc.n	8000774 <delay_us+0x14>

}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	200005cc 	.word	0x200005cc

08000794 <delay_ms>:
void delay_ms(uint16_t ms)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
    do {
        for (uint32_t i = 0; i < ms; i++) {
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	e006      	b.n	80007b2 <delay_ms+0x1e>
            delay_us(1000);
 80007a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a8:	f7ff ffda 	bl	8000760 <delay_us>
        for (uint32_t i = 0; i < ms; i++) {
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	3301      	adds	r3, #1
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d3f4      	bcc.n	80007a4 <delay_ms+0x10>
        }
    } while (0);
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_TIM14_Init+0x44>)
 80007ca:	4a10      	ldr	r2, [pc, #64]	; (800080c <MX_TIM14_Init+0x48>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 71;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_TIM14_Init+0x44>)
 80007d0:	2247      	movs	r2, #71	; 0x47
 80007d2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_TIM14_Init+0x44>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_TIM14_Init+0x44>)
 80007dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_TIM14_Init+0x44>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_TIM14_Init+0x44>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <MX_TIM14_Init+0x44>)
 80007f0:	f002 fccc 	bl	800318c <HAL_TIM_Base_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80007fa:	f000 fddf 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  HAL_TIM_Base_Start(&htim14);
 80007fe:	4802      	ldr	r0, [pc, #8]	; (8000808 <MX_TIM14_Init+0x44>)
 8000800:	f002 fd14 	bl	800322c <HAL_TIM_Base_Start>
  /* USER CODE END TIM14_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200005cc 	.word	0x200005cc
 800080c:	40002000 	.word	0x40002000

08000810 <key_pad_gpio>:
#include "keypad_lcd.h"


void key_pad_gpio(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef key_pad = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

	key_pad.Mode	=	GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
	key_pad.Speed	=	GPIO_SPEED_FAST;
 8000828:	2302      	movs	r3, #2
 800082a:	613b      	str	r3, [r7, #16]
	key_pad.Pull	=	GPIO_PULLUP;
 800082c:	2301      	movs	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
	key_pad.Pin		=	GPIO_PIN_3 | GPIO_PIN_1 | GPIO_PIN_15 | GPIO_PIN_13;
 8000830:	f24a 030a 	movw	r3, #40970	; 0xa00a
 8000834:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOC, &key_pad);
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <key_pad_gpio+0x50>)
 800083c:	f001 fe80 	bl	8002540 <HAL_GPIO_Init>

	key_pad.Mode	=	GPIO_MODE_OUTPUT_OD;
 8000840:	2311      	movs	r3, #17
 8000842:	60bb      	str	r3, [r7, #8]
	key_pad.Speed	=	GPIO_SPEED_FAST;
 8000844:	2302      	movs	r3, #2
 8000846:	613b      	str	r3, [r7, #16]
	key_pad.Pin		=	GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_14 | GPIO_PIN_6;
 8000848:	f244 0345 	movw	r3, #16453	; 0x4045
 800084c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOC, &key_pad);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4803      	ldr	r0, [pc, #12]	; (8000860 <key_pad_gpio+0x50>)
 8000854:	f001 fe74 	bl	8002540 <HAL_GPIO_Init>

}
 8000858:	bf00      	nop
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40020800 	.word	0x40020800

08000864 <MX_USART1_UART_Init>:
extern volatile int MotorSpeed[5];
extern volatile uint32_t countnn;


void MX_USART1_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0


  huart1.Instance = USART1;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MX_USART1_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000870:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000874:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 800089c:	f003 ff54 	bl	8004748 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 fd89 	bl	80013bc <Error_Handler>
  }

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200002dc 	.word	0x200002dc
 80008b4:	40011000 	.word	0x40011000

080008b8 <split_array>:

void split_array(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0



     // Mảng để lưu các giá trị
    char *token;
    char delim[] = ","; // Ký tự phân tách giữa các giá trị
 80008be:	232c      	movs	r3, #44	; 0x2c
 80008c0:	80bb      	strh	r3, [r7, #4]
    int i = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]

    // Sử dụng strtok để tách chuỗi
    token = strtok(data, delim);
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	480f      	ldr	r0, [pc, #60]	; (8000908 <split_array+0x50>)
 80008cc:	f004 fff0 	bl	80058b0 <strtok>
 80008d0:	60f8      	str	r0, [r7, #12]

    // Duyệt qua các phần tử đã được tách
    while (token != NULL) {
 80008d2:	e011      	b.n	80008f8 <split_array+0x40>
        sscanf(token, "%d", &values[i]); // Chuyển đổi chuỗi thành số nguyên và lưu vào mảng
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4a0c      	ldr	r2, [pc, #48]	; (800090c <split_array+0x54>)
 80008da:	4413      	add	r3, r2
 80008dc:	461a      	mov	r2, r3
 80008de:	490c      	ldr	r1, [pc, #48]	; (8000910 <split_array+0x58>)
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f004 ff6b 	bl	80057bc <siscanf>
        i++;
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
        token = strtok(NULL, delim); // Tiếp tục tách chuỗi
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	2000      	movs	r0, #0
 80008f2:	f004 ffdd 	bl	80058b0 <strtok>
 80008f6:	60f8      	str	r0, [r7, #12]
    while (token != NULL) {
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1ea      	bne.n	80008d4 <split_array+0x1c>
    }

}
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000338 	.word	0x20000338
 800090c:	200001dc 	.word	0x200001dc
 8000910:	08007058 	.word	0x08007058

08000914 <TIM5_Init>:
void TIM5_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0



  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
  TIM_Encoder_InitTypeDef encoder_init = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2224      	movs	r2, #36	; 0x24
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f004 ffb7 	bl	800589e <memset>

  htim5.Instance = TIM5;
 8000930:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <TIM5_Init+0xc0>)
 8000932:	4a29      	ldr	r2, [pc, #164]	; (80009d8 <TIM5_Init+0xc4>)
 8000934:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000936:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <TIM5_Init+0xc0>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <TIM5_Init+0xc0>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <TIM5_Init+0xc0>)
 8000944:	f04f 32ff 	mov.w	r2, #4294967295
 8000948:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <TIM5_Init+0xc0>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <TIM5_Init+0xc0>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000956:	481f      	ldr	r0, [pc, #124]	; (80009d4 <TIM5_Init+0xc0>)
 8000958:	f002 fd99 	bl	800348e <HAL_TIM_PWM_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <TIM5_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 fd2b 	bl	80013bc <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800096e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000972:	4619      	mov	r1, r3
 8000974:	4817      	ldr	r0, [pc, #92]	; (80009d4 <TIM5_Init+0xc0>)
 8000976:	f003 fe05 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <TIM5_Init+0x70>
  {
    Error_Handler();
 8000980:	f000 fd1c 	bl	80013bc <Error_Handler>
  }

  encoder_init.EncoderMode	=	TIM_ENCODERMODE_TI1;
 8000984:	2301      	movs	r3, #1
 8000986:	607b      	str	r3, [r7, #4]
  encoder_init.IC1Filter	=	5;
 8000988:	2305      	movs	r3, #5
 800098a:	617b      	str	r3, [r7, #20]
  encoder_init.IC1Polarity	=	TIM_ICPOLARITY_RISING;
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
  encoder_init.IC1Selection	=	TIM_ICSELECTION_DIRECTTI;
 8000990:	2301      	movs	r3, #1
 8000992:	60fb      	str	r3, [r7, #12]

  encoder_init.IC2Filter	=	0;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  encoder_init.IC2Polarity	=	TIM_ICPOLARITY_FALLING;
 8000998:	2302      	movs	r3, #2
 800099a:	61bb      	str	r3, [r7, #24]
  encoder_init.IC2Selection	=	TIM_ICSELECTION_INDIRECTTI;
 800099c:	2302      	movs	r3, #2
 800099e:	61fb      	str	r3, [r7, #28]

  if(HAL_TIM_Encoder_Init(&htim5, &encoder_init) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <TIM5_Init+0xc0>)
 80009a6:	f002 fe89 	bl	80036bc <HAL_TIM_Encoder_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <TIM5_Init+0xa0>
  {
	  Error_Handler();
 80009b0:	f000 fd04 	bl	80013bc <Error_Handler>
  }




  HAL_TIM_MspPostInit(&htim5);
 80009b4:	4807      	ldr	r0, [pc, #28]	; (80009d4 <TIM5_Init+0xc0>)
 80009b6:	f001 f865 	bl	8001a84 <HAL_TIM_MspPostInit>

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 80009ba:	2100      	movs	r1, #0
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <TIM5_Init+0xc0>)
 80009be:	f002 ff2d 	bl	800381c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 80009c2:	2104      	movs	r1, #4
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <TIM5_Init+0xc0>)
 80009c6:	f002 ff29 	bl	800381c <HAL_TIM_Encoder_Start>

}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	; 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000278 	.word	0x20000278
 80009d8:	40000c00 	.word	0x40000c00

080009dc <Line_PIN_Config>:

void Line_PIN_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
	/// led ngang
// E 7 8 9 10 11 12 13 ; B 2 ;
	GPIO_InitTypeDef pin_line_cf;

	pin_line_cf.Mode		=	GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
	pin_line_cf.Pin			=	GPIO_PIN_7  | GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10  | GPIO_PIN_11 |
 80009e6:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 80009ea:	607b      	str	r3, [r7, #4]
								GPIO_PIN_12 | GPIO_PIN_13 ;
	pin_line_cf.Pull		=	GPIO_PULLUP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
	pin_line_cf.Speed		=	GPIO_SPEED_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &pin_line_cf);
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	4806      	ldr	r0, [pc, #24]	; (8000a14 <Line_PIN_Config+0x38>)
 80009fa:	f001 fda1 	bl	8002540 <HAL_GPIO_Init>

	pin_line_cf.Pin			=	GPIO_PIN_2;
 80009fe:	2304      	movs	r3, #4
 8000a00:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOB, &pin_line_cf);
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <Line_PIN_Config+0x3c>)
 8000a08:	f001 fd9a 	bl	8002540 <HAL_GPIO_Init>

}
 8000a0c:	bf00      	nop
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020400 	.word	0x40020400

08000a1c <pid_goc>:
	if(PID_1 >40)   PID_1 =40;
	if(PID_1 <-40)   PID_1 =-40;
}

void pid_goc(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
	goc = values[0];
 8000a20:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <pid_goc+0xcc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a31      	ldr	r2, [pc, #196]	; (8000aec <pid_goc+0xd0>)
 8000a26:	6013      	str	r3, [r2, #0]

	if ((goc < 2) && (goc >-2)) goc = 0;
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <pid_goc+0xd0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	dc08      	bgt.n	8000a42 <pid_goc+0x26>
 8000a30:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <pid_goc+0xd0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a38:	db03      	blt.n	8000a42 <pid_goc+0x26>
 8000a3a:	4b2c      	ldr	r3, [pc, #176]	; (8000aec <pid_goc+0xd0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	e003      	b.n	8000a4a <pid_goc+0x2e>
	else
		goc=values[0];
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <pid_goc+0xcc>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a29      	ldr	r2, [pc, #164]	; (8000aec <pid_goc+0xd0>)
 8000a48:	6013      	str	r3, [r2, #0]

	lech_ag = goc - goc0;
 8000a4a:	4b28      	ldr	r3, [pc, #160]	; (8000aec <pid_goc+0xd0>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <pid_goc+0xd4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	4a27      	ldr	r2, [pc, #156]	; (8000af4 <pid_goc+0xd8>)
 8000a56:	6013      	str	r3, [r2, #0]

	if( abs(lech_ag) <=  1 ) lech_ag=0;
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <pid_goc+0xd8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a60:	db06      	blt.n	8000a70 <pid_goc+0x54>
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <pid_goc+0xd8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	dc02      	bgt.n	8000a70 <pid_goc+0x54>
 8000a6a:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <pid_goc+0xd8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]

	P_a = lech_ag*Kp_a;
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <pid_goc+0xd8>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <pid_goc+0xdc>)
 8000a7c:	6013      	str	r3, [r2, #0]

	I_a = Ki_a*lech_ag + I_a;
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <pid_goc+0xe0>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <pid_goc+0xe0>)
 8000a84:	6013      	str	r3, [r2, #0]

	D_a = (lech_ag - pre_lech_ag)*Kd_a;
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <pid_goc+0xd8>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <pid_goc+0xe4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	1ad2      	subs	r2, r2, r3
 8000a90:	4613      	mov	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <pid_goc+0xe8>)
 8000a98:	6013      	str	r3, [r2, #0]

	PID_a = P_a+I_a+D_a;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <pid_goc+0xdc>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <pid_goc+0xe0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	441a      	add	r2, r3
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <pid_goc+0xe8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <pid_goc+0xec>)
 8000aac:	6013      	str	r3, [r2, #0]

	pre_lech_ag = lech_ag;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <pid_goc+0xd8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <pid_goc+0xe4>)
 8000ab4:	6013      	str	r3, [r2, #0]

	if(PID_a >32)   PID_a =32;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <pid_goc+0xec>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b20      	cmp	r3, #32
 8000abc:	dd02      	ble.n	8000ac4 <pid_goc+0xa8>
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <pid_goc+0xec>)
 8000ac0:	2220      	movs	r2, #32
 8000ac2:	601a      	str	r2, [r3, #0]
	if(PID_a <-32)   PID_a =-32;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <pid_goc+0xec>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f113 0f20 	cmn.w	r3, #32
 8000acc:	da03      	bge.n	8000ad6 <pid_goc+0xba>
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <pid_goc+0xec>)
 8000ad0:	f06f 021f 	mvn.w	r2, #31
 8000ad4:	601a      	str	r2, [r3, #0]
	flag = 0;
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <pid_goc+0xf0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200001dc 	.word	0x200001dc
 8000aec:	200002c8 	.word	0x200002c8
 8000af0:	200002c4 	.word	0x200002c4
 8000af4:	20000398 	.word	0x20000398
 8000af8:	20000328 	.word	0x20000328
 8000afc:	2000026c 	.word	0x2000026c
 8000b00:	20000324 	.word	0x20000324
 8000b04:	20000374 	.word	0x20000374
 8000b08:	20000388 	.word	0x20000388
 8000b0c:	2000025c 	.word	0x2000025c

08000b10 <motor_foward_pid>:
//
//1     3
/********************************************************PID_VALUE_TO_MOTOR****************************************************/

void motor_foward_pid(int speed)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	int x = speed;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	60fb      	str	r3, [r7, #12]
	/*--line + angle--*/
	// khi goc lech duong , pid + vao 1 2 ??
	MotorSpeed[1] = x + PID_1 - PID_a;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <motor_foward_pid+0x88>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	441a      	add	r2, r3
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <motor_foward_pid+0x8c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <motor_foward_pid+0x90>)
 8000b2c:	6053      	str	r3, [r2, #4]
	MotorSpeed[2] = x + PID_1 - PID_a;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <motor_foward_pid+0x88>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	441a      	add	r2, r3
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <motor_foward_pid+0x8c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <motor_foward_pid+0x90>)
 8000b3e:	6093      	str	r3, [r2, #8]
	MotorSpeed[3] = x - PID_1 + PID_a;
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <motor_foward_pid+0x88>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	1ad2      	subs	r2, r2, r3
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <motor_foward_pid+0x8c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <motor_foward_pid+0x90>)
 8000b50:	60d3      	str	r3, [r2, #12]
	MotorSpeed[4] = x - PID_1 + PID_a;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <motor_foward_pid+0x88>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	1ad2      	subs	r2, r2, r3
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <motor_foward_pid+0x8c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <motor_foward_pid+0x90>)
 8000b62:	6113      	str	r3, [r2, #16]

	st_motor1(MotorSpeed[1]);
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <motor_foward_pid+0x90>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 fdcf 	bl	800170c <st_motor1>
	st_motor2(MotorSpeed[2]);
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <motor_foward_pid+0x90>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fdfa 	bl	800176c <st_motor2>
	st_motor3(-MotorSpeed[3]);
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <motor_foward_pid+0x90>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fe26 	bl	80017d0 <st_motor3>
	st_motor4(-MotorSpeed[4]);
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <motor_foward_pid+0x90>)
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	425b      	negs	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fe50 	bl	8001830 <st_motor4>

}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200001d8 	.word	0x200001d8
 8000b9c:	20000388 	.word	0x20000388
 8000ba0:	20000248 	.word	0x20000248

08000ba4 <motor_backward_pid>:




void motor_backward_pid(int speed)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	int x = speed;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	60fb      	str	r3, [r7, #12]
	MotorSpeed[1] = x - PID_1 + PID_a;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <motor_backward_pid+0x88>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	1ad2      	subs	r2, r2, r3
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <motor_backward_pid+0x8c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <motor_backward_pid+0x90>)
 8000bc0:	6053      	str	r3, [r2, #4]
	MotorSpeed[2] = x - PID_1 + PID_a;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <motor_backward_pid+0x88>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	1ad2      	subs	r2, r2, r3
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <motor_backward_pid+0x8c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a18      	ldr	r2, [pc, #96]	; (8000c34 <motor_backward_pid+0x90>)
 8000bd2:	6093      	str	r3, [r2, #8]
	MotorSpeed[3] = x + PID_1 - PID_a;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <motor_backward_pid+0x88>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	441a      	add	r2, r3
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <motor_backward_pid+0x8c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <motor_backward_pid+0x90>)
 8000be4:	60d3      	str	r3, [r2, #12]
	MotorSpeed[4] = x + PID_1 - PID_a;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <motor_backward_pid+0x88>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	441a      	add	r2, r3
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <motor_backward_pid+0x8c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <motor_backward_pid+0x90>)
 8000bf6:	6113      	str	r3, [r2, #16]

	st_motor1(-MotorSpeed[1]);
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <motor_backward_pid+0x90>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	425b      	negs	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fd84 	bl	800170c <st_motor1>
	st_motor2(-MotorSpeed[2]);
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <motor_backward_pid+0x90>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	425b      	negs	r3, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fdae 	bl	800176c <st_motor2>
	st_motor3(MotorSpeed[3]);
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <motor_backward_pid+0x90>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 fddb 	bl	80017d0 <st_motor3>
	st_motor4(MotorSpeed[4]);
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <motor_backward_pid+0x90>)
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fe06 	bl	8001830 <st_motor4>

}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200001d8 	.word	0x200001d8
 8000c30:	20000388 	.word	0x20000388
 8000c34:	20000248 	.word	0x20000248

08000c38 <motor_rightside_pid>:

void motor_rightside_pid(int speed)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	int x = speed;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	60fb      	str	r3, [r7, #12]
	MotorSpeed[1] = x - PID_2 + PID_a;
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <motor_rightside_pid+0x88>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	1ad2      	subs	r2, r2, r3
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <motor_rightside_pid+0x8c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <motor_rightside_pid+0x90>)
 8000c54:	6053      	str	r3, [r2, #4]
	MotorSpeed[2] = x + PID_2 - PID_a;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <motor_rightside_pid+0x88>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	441a      	add	r2, r3
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <motor_rightside_pid+0x8c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	4a18      	ldr	r2, [pc, #96]	; (8000cc8 <motor_rightside_pid+0x90>)
 8000c66:	6093      	str	r3, [r2, #8]
	MotorSpeed[3] = x - PID_2 + PID_a;
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <motor_rightside_pid+0x88>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	1ad2      	subs	r2, r2, r3
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <motor_rightside_pid+0x8c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <motor_rightside_pid+0x90>)
 8000c78:	60d3      	str	r3, [r2, #12]
	MotorSpeed[4] = x + PID_2 - PID_a;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <motor_rightside_pid+0x88>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	441a      	add	r2, r3
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <motor_rightside_pid+0x8c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <motor_rightside_pid+0x90>)
 8000c8a:	6113      	str	r3, [r2, #16]

	st_motor1(-MotorSpeed[1]);
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <motor_rightside_pid+0x90>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	425b      	negs	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fd3a 	bl	800170c <st_motor1>
	st_motor2(MotorSpeed[2]);
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <motor_rightside_pid+0x90>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fd65 	bl	800176c <st_motor2>
	st_motor3(-MotorSpeed[3]);
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <motor_rightside_pid+0x90>)
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 fd91 	bl	80017d0 <st_motor3>
	st_motor4(MotorSpeed[4]);
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <motor_rightside_pid+0x90>)
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fdbc 	bl	8001830 <st_motor4>

}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200002cc 	.word	0x200002cc
 8000cc4:	20000388 	.word	0x20000388
 8000cc8:	20000248 	.word	0x20000248

08000ccc <motor_leftside_pid>:

void motor_leftside_pid(int speed)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	int x = speed;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	60fb      	str	r3, [r7, #12]
	MotorSpeed[1] = x + PID_2 - PID_a;
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <motor_leftside_pid+0x88>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	441a      	add	r2, r3
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <motor_leftside_pid+0x8c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <motor_leftside_pid+0x90>)
 8000ce8:	6053      	str	r3, [r2, #4]
	MotorSpeed[2] = x - PID_2 + PID_a;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <motor_leftside_pid+0x88>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	1ad2      	subs	r2, r2, r3
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <motor_leftside_pid+0x8c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <motor_leftside_pid+0x90>)
 8000cfa:	6093      	str	r3, [r2, #8]
	MotorSpeed[3] = x + PID_2 - PID_a;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <motor_leftside_pid+0x88>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	441a      	add	r2, r3
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <motor_leftside_pid+0x8c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <motor_leftside_pid+0x90>)
 8000d0c:	60d3      	str	r3, [r2, #12]
	MotorSpeed[4] = x - PID_2 + PID_a;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <motor_leftside_pid+0x88>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	1ad2      	subs	r2, r2, r3
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <motor_leftside_pid+0x8c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <motor_leftside_pid+0x90>)
 8000d1e:	6113      	str	r3, [r2, #16]

	st_motor1(MotorSpeed[1]);
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <motor_leftside_pid+0x90>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fcf1 	bl	800170c <st_motor1>
	st_motor2(-MotorSpeed[2]);
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <motor_leftside_pid+0x90>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	425b      	negs	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fd1b 	bl	800176c <st_motor2>
	st_motor3(MotorSpeed[3]);
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <motor_leftside_pid+0x90>)
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fd48 	bl	80017d0 <st_motor3>
	st_motor4(-MotorSpeed[4]);
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <motor_leftside_pid+0x90>)
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	425b      	negs	r3, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fd72 	bl	8001830 <st_motor4>

}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200002cc 	.word	0x200002cc
 8000d58:	20000388 	.word	0x20000388
 8000d5c:	20000248 	.word	0x20000248

08000d60 <linefollow_foward>:


/**********************************-Line Follow-**************************************/

void linefollow_foward(int speed)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
//	lech_value_1();
//	lech_value_2();
//	pid_lech_1();

	pid_goc();
 8000d68:	f7ff fe58 	bl	8000a1c <pid_goc>

//	if(RUN_ABLE==1)// kiem tra nut
//	{
	motor_foward_pid( speed  );
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff fecf 	bl	8000b10 <motor_foward_pid>
//	}
//	else
//		stop();
//	LCD_speed_plot();
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <linefollow_backward>:

void linefollow_backward(int speed)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
	//lech_value_1();
	//lech_value_2();
	//pid_lech_1();
	pid_goc();
 8000d82:	f7ff fe4b 	bl	8000a1c <pid_goc>
//	if(RUN_ABLE==1)// kiem tra nut
//	{
	motor_backward_pid( speed  );
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ff0c 	bl	8000ba4 <motor_backward_pid>

//	}
//	else
//		stop();
//	LCD_speed_plot();
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <linefollow_rightside>:

void linefollow_rightside(int speed)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	//lech_value_1();
//	lech_value_2();
//	pid_lech_2();
	pid_goc();
 8000d9c:	f7ff fe3e 	bl	8000a1c <pid_goc>
//	if(RUN_ABLE==1)// kiem tra nut
//	{
	motor_rightside_pid( speed  );
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff49 	bl	8000c38 <motor_rightside_pid>

//	}
//	else
//		stop();
//		LCD_speed_plot();
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <linefollow_leftside>:
void linefollow_leftside(int speed)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
//	lech_value_1();
//	lech_value_2();
//	pid_lech_2();
	pid_goc();
 8000db6:	f7ff fe31 	bl	8000a1c <pid_goc>
//	if(RUN_ABLE==1)// kiem tra nut
//	{
	motor_leftside_pid( speed  );
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ff86 	bl	8000ccc <motor_leftside_pid>

//	}
//	else
//		stop();
//		LCD_speed_plot();
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <run_foward_steps>:


/***********************-Run with encoder-*************************1 vong = 2000 xung*/

void run_foward_steps(int speed, uint16_t step)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(&htim5,1000000);
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <run_foward_steps+0x58>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <run_foward_steps+0x5c>)
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
	//HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
	delay_ms(1);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff fcd9 	bl	8000794 <delay_ms>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8000de2:	2201      	movs	r2, #1
 8000de4:	4910      	ldr	r1, [pc, #64]	; (8000e28 <run_foward_steps+0x60>)
 8000de6:	4811      	ldr	r0, [pc, #68]	; (8000e2c <run_foward_steps+0x64>)
 8000de8:	f003 fcfb 	bl	80047e2 <HAL_UART_Receive_IT>
	while (-(__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000dec:	e007      	b.n	8000dfe <run_foward_steps+0x36>
	{
		linefollow_foward(speed);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffb6 	bl	8000d60 <linefollow_foward>
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <run_foward_steps+0x58>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <run_foward_steps+0x68>)
 8000dfc:	6013      	str	r3, [r2, #0]
	while (-(__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <run_foward_steps+0x58>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	f5c3 2374 	rsb	r3, r3, #999424	; 0xf4000
 8000e08:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000e0c:	887a      	ldrh	r2, [r7, #2]
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d9ed      	bls.n	8000dee <run_foward_steps+0x26>

	}
	stop();
 8000e12:	f000 fd3d 	bl	8001890 <stop>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000278 	.word	0x20000278
 8000e24:	000f4240 	.word	0x000f4240
 8000e28:	200001d4 	.word	0x200001d4
 8000e2c:	200002dc 	.word	0x200002dc
 8000e30:	20000514 	.word	0x20000514

08000e34 <run_backward_steps>:

void run_backward_steps(uint16_t speed, uint16_t step)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	460a      	mov	r2, r1
 8000e3e:	80fb      	strh	r3, [r7, #6]
 8000e40:	4613      	mov	r3, r2
 8000e42:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim5,1000000);
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <run_backward_steps+0x5c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <run_backward_steps+0x60>)
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24
	delay_ms(1);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fca1 	bl	8000794 <delay_ms>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8000e52:	2201      	movs	r2, #1
 8000e54:	4910      	ldr	r1, [pc, #64]	; (8000e98 <run_backward_steps+0x64>)
 8000e56:	4811      	ldr	r0, [pc, #68]	; (8000e9c <run_backward_steps+0x68>)
 8000e58:	f003 fcc3 	bl	80047e2 <HAL_UART_Receive_IT>
	while ((__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000e5c:	e008      	b.n	8000e70 <run_backward_steps+0x3c>
	{
		linefollow_backward(speed);
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff8a 	bl	8000d7a <linefollow_backward>
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <run_backward_steps+0x5c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <run_backward_steps+0x6c>)
 8000e6e:	6013      	str	r3, [r2, #0]
	while ((__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <run_backward_steps+0x5c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e76:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8000e7a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8000e7e:	88ba      	ldrh	r2, [r7, #4]
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d9ec      	bls.n	8000e5e <run_backward_steps+0x2a>
	}stop();
 8000e84:	f000 fd04 	bl	8001890 <stop>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000278 	.word	0x20000278
 8000e94:	000f4240 	.word	0x000f4240
 8000e98:	200001d4 	.word	0x200001d4
 8000e9c:	200002dc 	.word	0x200002dc
 8000ea0:	20000514 	.word	0x20000514

08000ea4 <run_right_steps>:

void run_right_steps(uint16_t speed, uint16_t step)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	460a      	mov	r2, r1
 8000eae:	80fb      	strh	r3, [r7, #6]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim5,1000000);
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <run_right_steps+0x5c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <run_right_steps+0x60>)
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
	delay_ms(1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff fc69 	bl	8000794 <delay_ms>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4910      	ldr	r1, [pc, #64]	; (8000f08 <run_right_steps+0x64>)
 8000ec6:	4811      	ldr	r0, [pc, #68]	; (8000f0c <run_right_steps+0x68>)
 8000ec8:	f003 fc8b 	bl	80047e2 <HAL_UART_Receive_IT>
	while ((__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000ecc:	e008      	b.n	8000ee0 <run_right_steps+0x3c>
	{
		linefollow_rightside(speed);
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5f 	bl	8000d94 <linefollow_rightside>
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <run_right_steps+0x5c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <run_right_steps+0x6c>)
 8000ede:	6013      	str	r3, [r2, #0]
	while ((__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <run_right_steps+0x5c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8000eea:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8000eee:	88ba      	ldrh	r2, [r7, #4]
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d9ec      	bls.n	8000ece <run_right_steps+0x2a>
	}stop();
 8000ef4:	f000 fccc 	bl	8001890 <stop>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000278 	.word	0x20000278
 8000f04:	000f4240 	.word	0x000f4240
 8000f08:	200001d4 	.word	0x200001d4
 8000f0c:	200002dc 	.word	0x200002dc
 8000f10:	20000514 	.word	0x20000514

08000f14 <run_left_steps>:

void run_left_steps(uint16_t speed, uint16_t step)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	80fb      	strh	r3, [r7, #6]
 8000f20:	4613      	mov	r3, r2
 8000f22:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim5,1000000);
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <run_left_steps+0x5c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <run_left_steps+0x60>)
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
	delay_ms(1);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f7ff fc31 	bl	8000794 <delay_ms>
	HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8000f32:	2201      	movs	r2, #1
 8000f34:	4910      	ldr	r1, [pc, #64]	; (8000f78 <run_left_steps+0x64>)
 8000f36:	4811      	ldr	r0, [pc, #68]	; (8000f7c <run_left_steps+0x68>)
 8000f38:	f003 fc53 	bl	80047e2 <HAL_UART_Receive_IT>
	while (-(__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000f3c:	e008      	b.n	8000f50 <run_left_steps+0x3c>
	{
		linefollow_leftside(speed);
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff34 	bl	8000dae <linefollow_leftside>
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <run_left_steps+0x5c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <run_left_steps+0x6c>)
 8000f4e:	6013      	str	r3, [r2, #0]
	while (-(__HAL_TIM_GET_COUNTER(&htim5) - 1000000) <= step)
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <run_left_steps+0x5c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f56:	f5c3 2374 	rsb	r3, r3, #999424	; 0xf4000
 8000f5a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000f5e:	88ba      	ldrh	r2, [r7, #4]
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d9ec      	bls.n	8000f3e <run_left_steps+0x2a>
	}stop();
 8000f64:	f000 fc94 	bl	8001890 <stop>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000278 	.word	0x20000278
 8000f74:	000f4240 	.word	0x000f4240
 8000f78:	200001d4 	.word	0x200001d4
 8000f7c:	200002dc 	.word	0x200002dc
 8000f80:	20000514 	.word	0x20000514

08000f84 <main>:
static uint8_t khoi_dong(void);
//static void MX_USART2_UART_Init(void);
//static void MX_USART3_UART_Init(void);

int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0

	HAL_Init();
 8000f88:	f001 f8c4 	bl	8002114 <HAL_Init>

	SystemClock_Config();
 8000f8c:	f000 f8b6 	bl	80010fc <SystemClock_Config>
	MX_TIM4_Init();
 8000f90:	f7ff fb9c 	bl	80006cc <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8000f94:	f7ff fc66 	bl	8000864 <MX_USART1_UART_Init>
	key_pad_gpio();
 8000f98:	f7ff fc3a 	bl	8000810 <key_pad_gpio>
	Line_PIN_Config();
 8000f9c:	f7ff fd1e 	bl	80009dc <Line_PIN_Config>
	MX_GPIO_Init();
 8000fa0:	f000 f916 	bl	80011d0 <MX_GPIO_Init>
	TIM5_Init();
 8000fa4:	f7ff fcb6 	bl	8000914 <TIM5_Init>
	TIM3_Init();
 8000fa8:	f7ff fae8 	bl	800057c <TIM3_Init>
	MX_TIM14_Init();
 8000fac:	f7ff fc0a 	bl	80007c4 <MX_TIM14_Init>
	PWM_Init();
 8000fb0:	f000 fb80 	bl	80016b4 <PWM_Init>
//	khoi_dong();

		memset(&data, 0, sizeof(data));
 8000fb4:	223c      	movs	r2, #60	; 0x3c
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	481b      	ldr	r0, [pc, #108]	; (8001028 <main+0xa4>)
 8000fba:	f004 fc70 	bl	800589e <memset>
		stop();
 8000fbe:	f000 fc67 	bl	8001890 <stop>
		delay_ms(2000);
 8000fc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fc6:	f7ff fbe5 	bl	8000794 <delay_ms>
		HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4917      	ldr	r1, [pc, #92]	; (800102c <main+0xa8>)
 8000fce:	4818      	ldr	r0, [pc, #96]	; (8001030 <main+0xac>)
 8000fd0:	f003 fc07 	bl	80047e2 <HAL_UART_Receive_IT>
		HAL_TIM_Base_Start_IT(&htim4);
 8000fd4:	4817      	ldr	r0, [pc, #92]	; (8001034 <main+0xb0>)
 8000fd6:	f002 f991 	bl	80032fc <HAL_TIM_Base_Start_IT>
		run_foward_steps(Basic_speed,7200);
 8000fda:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8000fde:	2064      	movs	r0, #100	; 0x64
 8000fe0:	f7ff fef2 	bl	8000dc8 <run_foward_steps>
		delay_us(5000);
 8000fe4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fe8:	f7ff fbba 	bl	8000760 <delay_us>
		run_backward_steps(Basic_speed,7200);
 8000fec:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8000ff0:	2064      	movs	r0, #100	; 0x64
 8000ff2:	f7ff ff1f 	bl	8000e34 <run_backward_steps>
		delay_us(5000);
 8000ff6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ffa:	f7ff fbb1 	bl	8000760 <delay_us>
		run_left_steps(Basic_speed,7200);
 8000ffe:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001002:	2064      	movs	r0, #100	; 0x64
 8001004:	f7ff ff86 	bl	8000f14 <run_left_steps>
		delay_us(5000);
 8001008:	f241 3088 	movw	r0, #5000	; 0x1388
 800100c:	f7ff fba8 	bl	8000760 <delay_us>
		run_right_steps(Basic_speed,7200);
 8001010:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001014:	2064      	movs	r0, #100	; 0x64
 8001016:	f7ff ff45 	bl	8000ea4 <run_right_steps>
	while(1)
	{
//		linefollow_foward(Basic_speed);
//		//linefollow_rightside(Basic_speed);
//		//HAL_Delay(10);
		countnn = __HAL_TIM_GET_COUNTER(&htim5);
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <main+0xb4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <main+0xb8>)
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	e7f9      	b.n	800101a <main+0x96>
 8001026:	bf00      	nop
 8001028:	20000338 	.word	0x20000338
 800102c:	200001d4 	.word	0x200001d4
 8001030:	200002dc 	.word	0x200002dc
 8001034:	200003a4 	.word	0x200003a4
 8001038:	20000278 	.word	0x20000278
 800103c:	20000514 	.word	0x20000514

08001040 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <HAL_UART_RxCpltCallback+0xa4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d144      	bne.n	80010dc <HAL_UART_RxCpltCallback+0x9c>
	{

		if ((rcv_buffer == 'd') & (flag != 1))// nhan ki tu d ngung nhan
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <HAL_UART_RxCpltCallback+0xa8>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b64      	cmp	r3, #100	; 0x64
 8001058:	bf0c      	ite	eq
 800105a:	2301      	moveq	r3, #1
 800105c:	2300      	movne	r3, #0
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <HAL_UART_RxCpltCallback+0xac>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	bf14      	ite	ne
 8001068:	2301      	movne	r3, #1
 800106a:	2300      	moveq	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4013      	ands	r3, r2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00d      	beq.n	8001092 <HAL_UART_RxCpltCallback+0x52>
		{
			count = 0;
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <HAL_UART_RxCpltCallback+0xb0>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
			flag = 1;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <HAL_UART_RxCpltCallback+0xac>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
			split_array();
 8001082:	f7ff fc19 	bl	80008b8 <split_array>
			HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 8001086:	2201      	movs	r2, #1
 8001088:	4917      	ldr	r1, [pc, #92]	; (80010e8 <HAL_UART_RxCpltCallback+0xa8>)
 800108a:	481a      	ldr	r0, [pc, #104]	; (80010f4 <HAL_UART_RxCpltCallback+0xb4>)
 800108c:	f003 fba9 	bl	80047e2 <HAL_UART_Receive_IT>

		}


	}
}
 8001090:	e024      	b.n	80010dc <HAL_UART_RxCpltCallback+0x9c>
		}else if ((rcv_buffer != 'd') & (flag != 1))
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_UART_RxCpltCallback+0xa8>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b64      	cmp	r3, #100	; 0x64
 8001098:	bf14      	ite	ne
 800109a:	2301      	movne	r3, #1
 800109c:	2300      	moveq	r3, #0
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_UART_RxCpltCallback+0xac>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	bf14      	ite	ne
 80010a8:	2301      	movne	r3, #1
 80010aa:	2300      	moveq	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4013      	ands	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d012      	beq.n	80010dc <HAL_UART_RxCpltCallback+0x9c>
			data[count++] = rcv_buffer;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_UART_RxCpltCallback+0xb0>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	b2d1      	uxtb	r1, r2
 80010be:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <HAL_UART_RxCpltCallback+0xb0>)
 80010c0:	7011      	strb	r1, [r2, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_UART_RxCpltCallback+0xa8>)
 80010c6:	7819      	ldrb	r1, [r3, #0]
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_UART_RxCpltCallback+0xb8>)
 80010ca:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1,&rcv_buffer,1);
 80010cc:	2201      	movs	r2, #1
 80010ce:	4906      	ldr	r1, [pc, #24]	; (80010e8 <HAL_UART_RxCpltCallback+0xa8>)
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <HAL_UART_RxCpltCallback+0xb4>)
 80010d2:	f003 fb86 	bl	80047e2 <HAL_UART_Receive_IT>
			flag = 0;
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_UART_RxCpltCallback+0xac>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40011000 	.word	0x40011000
 80010e8:	200001d4 	.word	0x200001d4
 80010ec:	2000025c 	.word	0x2000025c
 80010f0:	20000384 	.word	0x20000384
 80010f4:	200002dc 	.word	0x200002dc
 80010f8:	20000338 	.word	0x20000338

080010fc <SystemClock_Config>:
//	{
//
//	}
//}
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	; 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f004 fbc7 	bl	800589e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <SystemClock_Config+0xcc>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a27      	ldr	r2, [pc, #156]	; (80011c8 <SystemClock_Config+0xcc>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <SystemClock_Config+0xcc>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <SystemClock_Config+0xd0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a21      	ldr	r2, [pc, #132]	; (80011cc <SystemClock_Config+0xd0>)
 8001146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <SystemClock_Config+0xd0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001158:	2302      	movs	r3, #2
 800115a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115c:	2301      	movs	r3, #1
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001160:	2310      	movs	r3, #16
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001164:	2302      	movs	r3, #2
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001168:	2300      	movs	r3, #0
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800116c:	2308      	movs	r3, #8
 800116e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 8001170:	2390      	movs	r3, #144	; 0x90
 8001172:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001178:	2304      	movs	r3, #4
 800117a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fbab 	bl	80028dc <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x94>
	{
	Error_Handler();
 800118c:	f000 f916 	bl	80013bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2302      	movs	r3, #2
 8001196:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800119c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011a0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2104      	movs	r1, #4
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fe0c 	bl	8002dcc <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xc2>
	{
	Error_Handler();
 80011ba:	f000 f8ff 	bl	80013bc <Error_Handler>
	}
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	; 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
 *  E2   cong tac hanh trinh */



  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b6e      	ldr	r3, [pc, #440]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a6d      	ldr	r2, [pc, #436]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b6b      	ldr	r3, [pc, #428]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b67      	ldr	r3, [pc, #412]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a66      	ldr	r2, [pc, #408]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b64      	ldr	r3, [pc, #400]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4b60      	ldr	r3, [pc, #384]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a5f      	ldr	r2, [pc, #380]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b5d      	ldr	r3, [pc, #372]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b59      	ldr	r3, [pc, #356]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a58      	ldr	r2, [pc, #352]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b52      	ldr	r3, [pc, #328]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a51      	ldr	r2, [pc, #324]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b4f      	ldr	r3, [pc, #316]	; (80013a4 <MX_GPIO_Init+0x1d4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001272:	237f      	movs	r3, #127	; 0x7f
 8001274:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	2301      	movs	r3, #1
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4847      	ldr	r0, [pc, #284]	; (80013a8 <MX_GPIO_Init+0x1d8>)
 800128a:	f001 f959 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800128e:	f24f 030f 	movw	r3, #61455	; 0xf00f
 8001292:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4841      	ldr	r0, [pc, #260]	; (80013ac <MX_GPIO_Init+0x1dc>)
 80012a8:	f001 f94a 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012ac:	23f0      	movs	r3, #240	; 0xf0
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012bc:	2305      	movs	r3, #5
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	483a      	ldr	r0, [pc, #232]	; (80013b0 <MX_GPIO_Init+0x1e0>)
 80012c8:	f001 f93a 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80012cc:	f24f 0304 	movw	r3, #61444	; 0xf004
 80012d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	4834      	ldr	r0, [pc, #208]	; (80013b4 <MX_GPIO_Init+0x1e4>)
 80012e2:	f001 f92d 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80012e6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80012ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	482b      	ldr	r0, [pc, #172]	; (80013a8 <MX_GPIO_Init+0x1d8>)
 80012fc:	f001 f920 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_5
 8001300:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001304:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4828      	ldr	r0, [pc, #160]	; (80013b8 <MX_GPIO_Init+0x1e8>)
 8001316:	f001 f913 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD15 PD2
                           PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_2
 800131a:	f64c 430f 	movw	r3, #52239	; 0xcc0f
 800131e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3 | GPIO_PIN_14 |GPIO_PIN_0 | GPIO_PIN_1 ;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4821      	ldr	r0, [pc, #132]	; (80013b8 <MX_GPIO_Init+0x1e8>)
 8001334:	f001 f904 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800134a:	230c      	movs	r3, #12
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4818      	ldr	r0, [pc, #96]	; (80013b8 <MX_GPIO_Init+0x1e8>)
 8001356:	f001 f8f3 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800135a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	480f      	ldr	r0, [pc, #60]	; (80013b0 <MX_GPIO_Init+0x1e0>)
 8001374:	f001 f8e4 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001378:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800138a:	2308      	movs	r3, #8
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_GPIO_Init+0x1dc>)
 8001396:	f001 f8d3 	bl	8002540 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020400 	.word	0x40020400
 80013b8:	40020c00 	.word	0x40020c00

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <Error_Handler+0x8>
	...

080013c8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1,htim8,htim5;


void MX_TIM1_Init(void)//5kHz
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b096      	sub	sp, #88	; 0x58
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
 80013f6:	615a      	str	r2, [r3, #20]
 80013f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2220      	movs	r2, #32
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f004 fa4c 	bl	800589e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001406:	4b50      	ldr	r3, [pc, #320]	; (8001548 <MX_TIM1_Init+0x180>)
 8001408:	4a50      	ldr	r2, [pc, #320]	; (800154c <MX_TIM1_Init+0x184>)
 800140a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800140c:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <MX_TIM1_Init+0x180>)
 800140e:	2247      	movs	r2, #71	; 0x47
 8001410:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b4d      	ldr	r3, [pc, #308]	; (8001548 <MX_TIM1_Init+0x180>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400;
 8001418:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <MX_TIM1_Init+0x180>)
 800141a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800141e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001420:	4b49      	ldr	r3, [pc, #292]	; (8001548 <MX_TIM1_Init+0x180>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001426:	4b48      	ldr	r3, [pc, #288]	; (8001548 <MX_TIM1_Init+0x180>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142c:	4b46      	ldr	r3, [pc, #280]	; (8001548 <MX_TIM1_Init+0x180>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001432:	4845      	ldr	r0, [pc, #276]	; (8001548 <MX_TIM1_Init+0x180>)
 8001434:	f001 feaa 	bl	800318c <HAL_TIM_Base_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800143e:	f7ff ffbd 	bl	80013bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001446:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001448:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800144c:	4619      	mov	r1, r3
 800144e:	483e      	ldr	r0, [pc, #248]	; (8001548 <MX_TIM1_Init+0x180>)
 8001450:	f002 fc98 	bl	8003d84 <HAL_TIM_ConfigClockSource>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800145a:	f7ff ffaf 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800145e:	483a      	ldr	r0, [pc, #232]	; (8001548 <MX_TIM1_Init+0x180>)
 8001460:	f002 f815 	bl	800348e <HAL_TIM_PWM_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800146a:	f7ff ffa7 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001476:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800147a:	4619      	mov	r1, r3
 800147c:	4832      	ldr	r0, [pc, #200]	; (8001548 <MX_TIM1_Init+0x180>)
 800147e:	f003 f881 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001488:	f7ff ff98 	bl	80013bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148c:	2360      	movs	r3, #96	; 0x60
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001498:	2300      	movs	r3, #0
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ac:	2200      	movs	r2, #0
 80014ae:	4619      	mov	r1, r3
 80014b0:	4825      	ldr	r0, [pc, #148]	; (8001548 <MX_TIM1_Init+0x180>)
 80014b2:	f002 fba5 	bl	8003c00 <HAL_TIM_PWM_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014bc:	f7ff ff7e 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	2204      	movs	r2, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	481f      	ldr	r0, [pc, #124]	; (8001548 <MX_TIM1_Init+0x180>)
 80014ca:	f002 fb99 	bl	8003c00 <HAL_TIM_PWM_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80014d4:	f7ff ff72 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014dc:	2208      	movs	r2, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	4819      	ldr	r0, [pc, #100]	; (8001548 <MX_TIM1_Init+0x180>)
 80014e2:	f002 fb8d 	bl	8003c00 <HAL_TIM_PWM_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80014ec:	f7ff ff66 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	220c      	movs	r2, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	4813      	ldr	r0, [pc, #76]	; (8001548 <MX_TIM1_Init+0x180>)
 80014fa:	f002 fb81 	bl	8003c00 <HAL_TIM_PWM_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001504:	f7ff ff5a 	bl	80013bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800151c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001520:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4807      	ldr	r0, [pc, #28]	; (8001548 <MX_TIM1_Init+0x180>)
 800152c:	f003 f8a6 	bl	800467c <HAL_TIMEx_ConfigBreakDeadTime>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001536:	f7ff ff41 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800153a:	4803      	ldr	r0, [pc, #12]	; (8001548 <MX_TIM1_Init+0x180>)
 800153c:	f000 faa2 	bl	8001a84 <HAL_TIM_MspPostInit>

}
 8001540:	bf00      	nop
 8001542:	3758      	adds	r7, #88	; 0x58
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000065c 	.word	0x2000065c
 800154c:	40010000 	.word	0x40010000

08001550 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b092      	sub	sp, #72	; 0x48
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001556:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
 8001570:	615a      	str	r2, [r3, #20]
 8001572:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2220      	movs	r2, #32
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f004 f98f 	bl	800589e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001580:	4b4a      	ldr	r3, [pc, #296]	; (80016ac <MX_TIM8_Init+0x15c>)
 8001582:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <MX_TIM8_Init+0x160>)
 8001584:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15;
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <MX_TIM8_Init+0x15c>)
 8001588:	220f      	movs	r2, #15
 800158a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b47      	ldr	r3, [pc, #284]	; (80016ac <MX_TIM8_Init+0x15c>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 400;
 8001592:	4b46      	ldr	r3, [pc, #280]	; (80016ac <MX_TIM8_Init+0x15c>)
 8001594:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001598:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b44      	ldr	r3, [pc, #272]	; (80016ac <MX_TIM8_Init+0x15c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015a0:	4b42      	ldr	r3, [pc, #264]	; (80016ac <MX_TIM8_Init+0x15c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <MX_TIM8_Init+0x15c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80015ac:	483f      	ldr	r0, [pc, #252]	; (80016ac <MX_TIM8_Init+0x15c>)
 80015ae:	f001 ff6e 	bl	800348e <HAL_TIM_PWM_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80015b8:	f7ff ff00 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80015bc:	483b      	ldr	r0, [pc, #236]	; (80016ac <MX_TIM8_Init+0x15c>)
 80015be:	f001 ff0d 	bl	80033dc <HAL_TIM_OC_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80015c8:	f7ff fef8 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015d8:	4619      	mov	r1, r3
 80015da:	4834      	ldr	r0, [pc, #208]	; (80016ac <MX_TIM8_Init+0x15c>)
 80015dc:	f002 ffd2 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80015e6:	f7ff fee9 	bl	80013bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ea:	2360      	movs	r3, #96	; 0x60
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	4827      	ldr	r0, [pc, #156]	; (80016ac <MX_TIM8_Init+0x15c>)
 8001610:	f002 faf6 	bl	8003c00 <HAL_TIM_PWM_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM8_Init+0xce>
  {
    Error_Handler();
 800161a:	f7ff fecf 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	2204      	movs	r2, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4821      	ldr	r0, [pc, #132]	; (80016ac <MX_TIM8_Init+0x15c>)
 8001628:	f002 faea 	bl	8003c00 <HAL_TIM_PWM_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8001632:	f7ff fec3 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	2208      	movs	r2, #8
 800163c:	4619      	mov	r1, r3
 800163e:	481b      	ldr	r0, [pc, #108]	; (80016ac <MX_TIM8_Init+0x15c>)
 8001640:	f002 fade 	bl	8003c00 <HAL_TIM_PWM_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800164a:	f7ff feb7 	bl	80013bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001656:	220c      	movs	r2, #12
 8001658:	4619      	mov	r1, r3
 800165a:	4814      	ldr	r0, [pc, #80]	; (80016ac <MX_TIM8_Init+0x15c>)
 800165c:	f002 fa74 	bl	8003b48 <HAL_TIM_OC_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM8_Init+0x11a>
  {
    Error_Handler();
 8001666:	f7ff fea9 	bl	80013bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800167e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001682:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	4619      	mov	r1, r3
 800168c:	4807      	ldr	r0, [pc, #28]	; (80016ac <MX_TIM8_Init+0x15c>)
 800168e:	f002 fff5 	bl	800467c <HAL_TIMEx_ConfigBreakDeadTime>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM8_Init+0x14c>
  {
    Error_Handler();
 8001698:	f7ff fe90 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800169c:	4803      	ldr	r0, [pc, #12]	; (80016ac <MX_TIM8_Init+0x15c>)
 800169e:	f000 f9f1 	bl	8001a84 <HAL_TIM_MspPostInit>

}
 80016a2:	bf00      	nop
 80016a4:	3748      	adds	r7, #72	; 0x48
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000614 	.word	0x20000614
 80016b0:	40010400 	.word	0x40010400

080016b4 <PWM_Init>:




void PWM_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 80016b8:	f7ff fe86 	bl	80013c8 <MX_TIM1_Init>
	MX_TIM8_Init();
 80016bc:	f7ff ff48 	bl	8001550 <MX_TIM8_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016c0:	2100      	movs	r1, #0
 80016c2:	4810      	ldr	r0, [pc, #64]	; (8001704 <PWM_Init+0x50>)
 80016c4:	f001 ff32 	bl	800352c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80016c8:	2104      	movs	r1, #4
 80016ca:	480e      	ldr	r0, [pc, #56]	; (8001704 <PWM_Init+0x50>)
 80016cc:	f001 ff2e 	bl	800352c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80016d0:	2108      	movs	r1, #8
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <PWM_Init+0x50>)
 80016d4:	f001 ff2a 	bl	800352c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80016d8:	210c      	movs	r1, #12
 80016da:	480a      	ldr	r0, [pc, #40]	; (8001704 <PWM_Init+0x50>)
 80016dc:	f001 ff26 	bl	800352c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80016e0:	2100      	movs	r1, #0
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <PWM_Init+0x54>)
 80016e4:	f001 ff22 	bl	800352c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80016e8:	2104      	movs	r1, #4
 80016ea:	4807      	ldr	r0, [pc, #28]	; (8001708 <PWM_Init+0x54>)
 80016ec:	f001 ff1e 	bl	800352c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80016f0:	2108      	movs	r1, #8
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <PWM_Init+0x54>)
 80016f4:	f001 ff1a 	bl	800352c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80016f8:	210c      	movs	r1, #12
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <PWM_Init+0x54>)
 80016fc:	f001 ff16 	bl	800352c <HAL_TIM_PWM_Start>
//	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,120);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
//	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,120);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2000065c 	.word	0x2000065c
 8001708:	20000614 	.word	0x20000614

0800170c <st_motor1>:

void st_motor1(int speed)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);}
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f8d5 	bl	80018c4 <speed_shift>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	dd05      	ble.n	800172c <st_motor1+0x20>
 8001720:	2201      	movs	r2, #1
 8001722:	2101      	movs	r1, #1
 8001724:	480f      	ldr	r0, [pc, #60]	; (8001764 <st_motor1+0x58>)
 8001726:	f001 f8bf 	bl	80028a8 <HAL_GPIO_WritePin>
 800172a:	e00a      	b.n	8001742 <st_motor1+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);}
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f8c9 	bl	80018c4 <speed_shift>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	da04      	bge.n	8001742 <st_motor1+0x36>
 8001738:	2200      	movs	r2, #0
 800173a:	2101      	movs	r1, #1
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <st_motor1+0x58>)
 800173e:	f001 f8b3 	bl	80028a8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(speed_shift(speed))-12);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f8be 	bl	80018c4 <speed_shift>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	bfb8      	it	lt
 800174e:	425b      	neglt	r3, r3
 8001750:	f1a3 020c 	sub.w	r2, r3, #12
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <st_motor1+0x5c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	635a      	str	r2, [r3, #52]	; 0x34

}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40020c00 	.word	0x40020c00
 8001768:	2000065c 	.word	0x2000065c

0800176c <st_motor2>:

void st_motor2(int speed)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);}
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f8a5 	bl	80018c4 <speed_shift>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	dd06      	ble.n	800178e <st_motor2+0x22>
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001786:	4810      	ldr	r0, [pc, #64]	; (80017c8 <st_motor2+0x5c>)
 8001788:	f001 f88e 	bl	80028a8 <HAL_GPIO_WritePin>
 800178c:	e00b      	b.n	80017a6 <st_motor2+0x3a>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);}
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f898 	bl	80018c4 <speed_shift>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	da05      	bge.n	80017a6 <st_motor2+0x3a>
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a0:	4809      	ldr	r0, [pc, #36]	; (80017c8 <st_motor2+0x5c>)
 80017a2:	f001 f881 	bl	80028a8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,abs(speed_shift(speed))-12);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f88c 	bl	80018c4 <speed_shift>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bfb8      	it	lt
 80017b2:	425b      	neglt	r3, r3
 80017b4:	f1a3 020c 	sub.w	r2, r3, #12
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <st_motor2+0x60>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38

}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40020000 	.word	0x40020000
 80017cc:	2000065c 	.word	0x2000065c

080017d0 <st_motor3>:

void st_motor3(int speed)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);}
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f873 	bl	80018c4 <speed_shift>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	dd05      	ble.n	80017f0 <st_motor3+0x20>
 80017e4:	2201      	movs	r2, #1
 80017e6:	2108      	movs	r1, #8
 80017e8:	480f      	ldr	r0, [pc, #60]	; (8001828 <st_motor3+0x58>)
 80017ea:	f001 f85d 	bl	80028a8 <HAL_GPIO_WritePin>
 80017ee:	e00a      	b.n	8001806 <st_motor3+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);}
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f867 	bl	80018c4 <speed_shift>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da04      	bge.n	8001806 <st_motor3+0x36>
 80017fc:	2200      	movs	r2, #0
 80017fe:	2108      	movs	r1, #8
 8001800:	4809      	ldr	r0, [pc, #36]	; (8001828 <st_motor3+0x58>)
 8001802:	f001 f851 	bl	80028a8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,abs(speed_shift(speed))-12);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f85c 	bl	80018c4 <speed_shift>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	bfb8      	it	lt
 8001812:	425b      	neglt	r3, r3
 8001814:	f1a3 020c 	sub.w	r2, r3, #12
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <st_motor3+0x5c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40020c00 	.word	0x40020c00
 800182c:	2000065c 	.word	0x2000065c

08001830 <st_motor4>:

void st_motor4(int speed)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);}
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f843 	bl	80018c4 <speed_shift>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	dd05      	ble.n	8001850 <st_motor4+0x20>
 8001844:	2201      	movs	r2, #1
 8001846:	2102      	movs	r1, #2
 8001848:	480f      	ldr	r0, [pc, #60]	; (8001888 <st_motor4+0x58>)
 800184a:	f001 f82d 	bl	80028a8 <HAL_GPIO_WritePin>
 800184e:	e00a      	b.n	8001866 <st_motor4+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);}
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f837 	bl	80018c4 <speed_shift>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	da04      	bge.n	8001866 <st_motor4+0x36>
 800185c:	2200      	movs	r2, #0
 800185e:	2102      	movs	r1, #2
 8001860:	4809      	ldr	r0, [pc, #36]	; (8001888 <st_motor4+0x58>)
 8001862:	f001 f821 	bl	80028a8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,abs(speed_shift(speed))-12);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f82c 	bl	80018c4 <speed_shift>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	bfb8      	it	lt
 8001872:	425b      	neglt	r3, r3
 8001874:	f1a3 020c 	sub.w	r2, r3, #12
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <st_motor4+0x5c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40

}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40020c00 	.word	0x40020c00
 800188c:	2000065c 	.word	0x2000065c

08001890 <stop>:
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,8);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,8);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,8);
}
void stop(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,12);
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <stop+0x30>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	220c      	movs	r2, #12
 800189a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,12);
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <stop+0x30>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	220c      	movs	r2, #12
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,12);
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <stop+0x30>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	220c      	movs	r2, #12
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,12);
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <stop+0x30>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	220c      	movs	r2, #12
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38

}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	2000065c 	.word	0x2000065c

080018c4 <speed_shift>:
///////////////////////////////////////Loai truong hop khoa cung dong co/////////////////////////////////

int speed_shift(int speed)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	if(speed <0){return (speed - 12);}
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	da02      	bge.n	80018d8 <speed_shift+0x14>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3b0c      	subs	r3, #12
 80018d6:	e007      	b.n	80018e8 <speed_shift+0x24>
	if(speed >0){return (speed + 12);}
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	dd02      	ble.n	80018e4 <speed_shift+0x20>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	330c      	adds	r3, #12
 80018e2:	e001      	b.n	80018e8 <speed_shift+0x24>
	else {return (speed + 12);}
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	330c      	adds	r3, #12

}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_MspInit>:




void HAL_MspInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_MspInit+0x4c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_MspInit+0x4c>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_MspInit+0x4c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_MspInit+0x4c>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_MspInit+0x4c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]

}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800

08001944 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a36      	ldr	r2, [pc, #216]	; (8001a2c <HAL_TIM_Base_MspInit+0xe8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10e      	bne.n	8001974 <HAL_TIM_Base_MspInit+0x30>
  {

    __HAL_RCC_TIM1_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a34      	ldr	r2, [pc, #208]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fb      	ldr	r3, [r7, #28]
//    HAL_NVIC_EnableIRQ(TIM4_IRQn);
//    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 1);

  }

}
 8001972:	e056      	b.n	8001a22 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197c:	d10e      	bne.n	800199c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a2a      	ldr	r2, [pc, #168]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	69bb      	ldr	r3, [r7, #24]
}
 800199a:	e042      	b.n	8001a22 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a24      	ldr	r2, [pc, #144]	; (8001a34 <HAL_TIM_Base_MspInit+0xf0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10e      	bne.n	80019c4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a20      	ldr	r2, [pc, #128]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
}
 80019c2:	e02e      	b.n	8001a22 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_TIM_Base_MspInit+0xf4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d116      	bne.n	80019fc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019ea:	201e      	movs	r0, #30
 80019ec:	f000 fcfb 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 1);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2105      	movs	r1, #5
 80019f4:	201e      	movs	r0, #30
 80019f6:	f000 fcda 	bl	80023ae <HAL_NVIC_SetPriority>
}
 80019fa:	e012      	b.n	8001a22 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM14)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <HAL_TIM_Base_MspInit+0xf8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10d      	bne.n	8001a22 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_TIM_Base_MspInit+0xec>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
}
 8001a22:	bf00      	nop
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40000400 	.word	0x40000400
 8001a38:	40000800 	.word	0x40000800
 8001a3c:	40002000 	.word	0x40002000

08001a40 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_TIM_PWM_MspInit+0x3c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10d      	bne.n	8001a6e <HAL_TIM_PWM_MspInit+0x2e>
  {

    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_TIM_PWM_MspInit+0x40>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_TIM_PWM_MspInit+0x40>)
 8001a5c:	f043 0308 	orr.w	r3, r3, #8
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_TIM_PWM_MspInit+0x40>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]

  }

}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40000c00 	.word	0x40000c00
 8001a80:	40023800 	.word	0x40023800

08001a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b090      	sub	sp, #64	; 0x40
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a7f      	ldr	r2, [pc, #508]	; (8001ca0 <HAL_TIM_MspPostInit+0x21c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12d      	bne.n	8001b02 <HAL_TIM_MspPostInit+0x7e>
  {

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aaa:	4b7e      	ldr	r3, [pc, #504]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a7d      	ldr	r2, [pc, #500]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b7b      	ldr	r3, [pc, #492]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001ac2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001adc:	4619      	mov	r1, r3
 8001ade:	4872      	ldr	r0, [pc, #456]	; (8001ca8 <HAL_TIM_MspPostInit+0x224>)
 8001ae0:	f000 fd2e 	bl	8002540 <HAL_GPIO_Init>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae8:	4b6e      	ldr	r3, [pc, #440]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aec:	4a6d      	ldr	r2, [pc, #436]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6453      	str	r3, [r2, #68]	; 0x44
 8001af4:	4b6b      	ldr	r3, [pc, #428]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
        __HAL_RCC_TIM8_CLK_ENABLE();
  }


}
 8001b00:	e0ca      	b.n	8001c98 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0a:	d13d      	bne.n	8001b88 <HAL_TIM_MspPostInit+0x104>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
 8001b10:	4b64      	ldr	r3, [pc, #400]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	4a63      	ldr	r2, [pc, #396]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1c:	4b61      	ldr	r3, [pc, #388]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	623b      	str	r3, [r7, #32]
 8001b26:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	4b5d      	ldr	r3, [pc, #372]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	4a5c      	ldr	r2, [pc, #368]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	6313      	str	r3, [r2, #48]	; 0x30
 8001b38:	4b5a      	ldr	r3, [pc, #360]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b56:	2301      	movs	r3, #1
 8001b58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4851      	ldr	r0, [pc, #324]	; (8001ca8 <HAL_TIM_MspPostInit+0x224>)
 8001b62:	f000 fced 	bl	8002540 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b66:	2308      	movs	r3, #8
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b76:	2301      	movs	r3, #1
 8001b78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7e:	4619      	mov	r1, r3
 8001b80:	484a      	ldr	r0, [pc, #296]	; (8001cac <HAL_TIM_MspPostInit+0x228>)
 8001b82:	f000 fcdd 	bl	8002540 <HAL_GPIO_Init>
}
 8001b86:	e087      	b.n	8001c98 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM3)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a48      	ldr	r2, [pc, #288]	; (8001cb0 <HAL_TIM_MspPostInit+0x22c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d12c      	bne.n	8001bec <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a42      	ldr	r2, [pc, #264]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b40      	ldr	r3, [pc, #256]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;//|GPIO_PIN_8|GPIO_PIN_9;
 8001bae:	2330      	movs	r3, #48	; 0x30
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4838      	ldr	r0, [pc, #224]	; (8001cac <HAL_TIM_MspPostInit+0x228>)
 8001bca:	f000 fcb9 	bl	8002540 <HAL_GPIO_Init>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a33      	ldr	r2, [pc, #204]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
}
 8001bea:	e055      	b.n	8001c98 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM5)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a30      	ldr	r2, [pc, #192]	; (8001cb4 <HAL_TIM_MspPostInit+0x230>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d11e      	bne.n	8001c34 <HAL_TIM_MspPostInit+0x1b0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c12:	2303      	movs	r3, #3
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c22:	2302      	movs	r3, #2
 8001c24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	481e      	ldr	r0, [pc, #120]	; (8001ca8 <HAL_TIM_MspPostInit+0x224>)
 8001c2e:	f000 fc87 	bl	8002540 <HAL_GPIO_Init>
}
 8001c32:	e031      	b.n	8001c98 <HAL_TIM_MspPostInit+0x214>
    else if(htim->Instance==TIM8)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <HAL_TIM_MspPostInit+0x234>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d12c      	bne.n	8001c98 <HAL_TIM_MspPostInit+0x214>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c5a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c74:	4619      	mov	r1, r3
 8001c76:	4811      	ldr	r0, [pc, #68]	; (8001cbc <HAL_TIM_MspPostInit+0x238>)
 8001c78:	f000 fc62 	bl	8002540 <HAL_GPIO_Init>
        __HAL_RCC_TIM8_CLK_ENABLE();
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_TIM_MspPostInit+0x220>)
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
}
 8001c98:	bf00      	nop
 8001c9a:	3740      	adds	r7, #64	; 0x40
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000c00 	.word	0x40000c00
 8001cb8:	40010400 	.word	0x40010400
 8001cbc:	40020800 	.word	0x40020800

08001cc0 <HAL_UART_MspInit>:

}


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08e      	sub	sp, #56	; 0x38
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a57      	ldr	r2, [pc, #348]	; (8001e3c <HAL_UART_MspInit+0x17c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d134      	bne.n	8001d4c <HAL_UART_MspInit+0x8c>
  {
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
 8001ce6:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a55      	ldr	r2, [pc, #340]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	623b      	str	r3, [r7, #32]
 8001cfc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	4b4f      	ldr	r3, [pc, #316]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a4e      	ldr	r2, [pc, #312]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d1a:	23c0      	movs	r3, #192	; 0xc0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d32:	4619      	mov	r1, r3
 8001d34:	4843      	ldr	r0, [pc, #268]	; (8001e44 <HAL_UART_MspInit+0x184>)
 8001d36:	f000 fc03 	bl	8002540 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	2025      	movs	r0, #37	; 0x25
 8001d40:	f000 fb35 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d44:	2025      	movs	r0, #37	; 0x25
 8001d46:	f000 fb4e 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);

  }

}
 8001d4a:	e073      	b.n	8001e34 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a3d      	ldr	r2, [pc, #244]	; (8001e48 <HAL_UART_MspInit+0x188>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d134      	bne.n	8001dc0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a38      	ldr	r2, [pc, #224]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a31      	ldr	r2, [pc, #196]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d8e:	230c      	movs	r3, #12
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d9e:	2307      	movs	r3, #7
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da6:	4619      	mov	r1, r3
 8001da8:	4828      	ldr	r0, [pc, #160]	; (8001e4c <HAL_UART_MspInit+0x18c>)
 8001daa:	f000 fbc9 	bl	8002540 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	2026      	movs	r0, #38	; 0x26
 8001db4:	f000 fafb 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001db8:	2026      	movs	r0, #38	; 0x26
 8001dba:	f000 fb14 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8001dbe:	e039      	b.n	8001e34 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <HAL_UART_MspInit+0x190>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d134      	bne.n	8001e34 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_UART_MspInit+0x180>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e14:	2307      	movs	r3, #7
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4809      	ldr	r0, [pc, #36]	; (8001e44 <HAL_UART_MspInit+0x184>)
 8001e20:	f000 fb8e 	bl	8002540 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	2027      	movs	r0, #39	; 0x27
 8001e2a:	f000 fac0 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e2e:	2027      	movs	r0, #39	; 0x27
 8001e30:	f000 fad9 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8001e34:	bf00      	nop
 8001e36:	3738      	adds	r7, #56	; 0x38
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40011000 	.word	0x40011000
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40004400 	.word	0x40004400
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40004800 	.word	0x40004800

08001e54 <NMI_Handler>:
extern UART_HandleTypeDef huart3;

extern TIM_HandleTypeDef  htim3;
extern TIM_HandleTypeDef  htim4;
void NMI_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  while (1)
 8001e58:	e7fe      	b.n	8001e58 <NMI_Handler+0x4>
	...

08001e5c <TIM4_IRQHandler>:
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

void TIM4_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim4);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <TIM4_IRQHandler+0x10>)
 8001e62:	f001 fd69 	bl	8003938 <HAL_TIM_IRQHandler>
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200003a4 	.word	0x200003a4

08001e70 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim3);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <TIM3_IRQHandler+0x10>)
 8001e76:	f001 fd5f 	bl	8003938 <HAL_TIM_IRQHandler>
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000484 	.word	0x20000484

08001e84 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <HardFault_Handler+0x4>

08001e8a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <MemManage_Handler+0x4>

08001e90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <BusFault_Handler+0x4>

08001e96 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e9a:	e7fe      	b.n	8001e9a <UsageFault_Handler+0x4>

08001e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eca:	f000 f975 	bl	80021b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <USART1_IRQHandler+0x10>)
 8001eda:	f002 fcb3 	bl	8004844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200002dc 	.word	0x200002dc

08001ee8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <USART2_IRQHandler+0x10>)
 8001eee:	f002 fca9 	bl	8004844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000560 	.word	0x20000560

08001efc <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <USART3_IRQHandler+0x10>)
 8001f02:	f002 fc9f 	bl	8004844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200003ec 	.word	0x200003ec

08001f10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return 1;
 8001f14:	2301      	movs	r3, #1
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_kill>:

int _kill(int pid, int sig)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f2a:	f003 fd63 	bl	80059f4 <__errno>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2216      	movs	r2, #22
 8001f32:	601a      	str	r2, [r3, #0]
  return -1;
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_exit>:

void _exit (int status)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f48:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ffe7 	bl	8001f20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f52:	e7fe      	b.n	8001f52 <_exit+0x12>

08001f54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	e00a      	b.n	8001f7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f66:	f3af 8000 	nop.w
 8001f6a:	4601      	mov	r1, r0
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	60ba      	str	r2, [r7, #8]
 8001f72:	b2ca      	uxtb	r2, r1
 8001f74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	dbf0      	blt.n	8001f66 <_read+0x12>
  }

  return len;
 8001f84:	687b      	ldr	r3, [r7, #4]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e009      	b.n	8001fb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	60ba      	str	r2, [r7, #8]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	dbf1      	blt.n	8001fa0 <_write+0x12>
  }
  return len;
 8001fbc:	687b      	ldr	r3, [r7, #4]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <_close>:

int _close(int file)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fee:	605a      	str	r2, [r3, #4]
  return 0;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <_isatty>:

int _isatty(int file)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <_sbrk+0x5c>)
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <_sbrk+0x60>)
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <_sbrk+0x64>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <_sbrk+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002060:	f003 fcc8 	bl	80059f4 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	220c      	movs	r2, #12
 8002068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	e009      	b.n	8002084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <_sbrk+0x64>)
 8002080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20020000 	.word	0x20020000
 8002090:	00000400 	.word	0x00000400
 8002094:	20000084 	.word	0x20000084
 8002098:	200006b0 	.word	0x200006b0

0800209c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <SystemInit+0x20>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <SystemInit+0x20>)
 80020a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020c6:	490e      	ldr	r1, [pc, #56]	; (8002100 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020c8:	4a0e      	ldr	r2, [pc, #56]	; (8002104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020dc:	4c0b      	ldr	r4, [pc, #44]	; (800210c <LoopFillZerobss+0x26>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ea:	f7ff ffd7 	bl	800209c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ee:	f003 fc87 	bl	8005a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f2:	f7fe ff47 	bl	8000f84 <main>
  bx  lr    
 80020f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002100:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002104:	0800728c 	.word	0x0800728c
  ldr r2, =_sbss
 8002108:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800210c:	200006ac 	.word	0x200006ac

08002110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002110:	e7fe      	b.n	8002110 <ADC_IRQHandler>
	...

08002114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <HAL_Init+0x40>)
 800211e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <HAL_Init+0x40>)
 800212a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800212e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a07      	ldr	r2, [pc, #28]	; (8002154 <HAL_Init+0x40>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213c:	2003      	movs	r0, #3
 800213e:	f000 f92b 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002142:	200f      	movs	r0, #15
 8002144:	f000 f808 	bl	8002158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002148:	f7ff fbd4 	bl	80018f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023c00 	.word	0x40023c00

08002158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_InitTick+0x54>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_InitTick+0x58>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f943 	bl	8002402 <HAL_SYSTICK_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e00e      	b.n	80021a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b0f      	cmp	r3, #15
 800218a:	d80a      	bhi.n	80021a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800218c:	2200      	movs	r2, #0
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f000 f90b 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002198:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <HAL_InitTick+0x5c>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	e000      	b.n	80021a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000008 	.word	0x20000008
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_IncTick+0x20>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_IncTick+0x24>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <HAL_IncTick+0x24>)
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000008 	.word	0x20000008
 80021dc:	200006a8 	.word	0x200006a8

080021e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return uwTick;
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <HAL_GetTick+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	200006a8 	.word	0x200006a8

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff29 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff3e 	bl	8002240 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff8e 	bl	80022ec <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff31 	bl	800225c <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa2 	bl	8002354 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff feda 	bl	80021e0 <HAL_GetTick>
 800242c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d008      	beq.n	800244c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2280      	movs	r2, #128	; 0x80
 800243e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e052      	b.n	80024f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0216 	bic.w	r2, r2, #22
 800245a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800246a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <HAL_DMA_Abort+0x62>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0208 	bic.w	r2, r2, #8
 800248a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800249c:	e013      	b.n	80024c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800249e:	f7ff fe9f 	bl	80021e0 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d90c      	bls.n	80024c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2203      	movs	r2, #3
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e015      	b.n	80024f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1e4      	bne.n	800249e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d8:	223f      	movs	r2, #63	; 0x3f
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d004      	beq.n	8002518 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2280      	movs	r2, #128	; 0x80
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e00c      	b.n	8002532 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2205      	movs	r2, #5
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e16b      	b.n	8002834 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 815a 	bne.w	800282e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d005      	beq.n	8002592 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	2b02      	cmp	r3, #2
 8002590:	d130      	bne.n	80025f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 0201 	and.w	r2, r3, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d017      	beq.n	8002630 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d123      	bne.n	8002684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	08da      	lsrs	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3208      	adds	r2, #8
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	08da      	lsrs	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3208      	adds	r2, #8
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0203 	and.w	r2, r3, #3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80b4 	beq.w	800282e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b60      	ldr	r3, [pc, #384]	; (800284c <HAL_GPIO_Init+0x30c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a5f      	ldr	r2, [pc, #380]	; (800284c <HAL_GPIO_Init+0x30c>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b5d      	ldr	r3, [pc, #372]	; (800284c <HAL_GPIO_Init+0x30c>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e2:	4a5b      	ldr	r2, [pc, #364]	; (8002850 <HAL_GPIO_Init+0x310>)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3302      	adds	r3, #2
 80026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a52      	ldr	r2, [pc, #328]	; (8002854 <HAL_GPIO_Init+0x314>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d02b      	beq.n	8002766 <HAL_GPIO_Init+0x226>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a51      	ldr	r2, [pc, #324]	; (8002858 <HAL_GPIO_Init+0x318>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d025      	beq.n	8002762 <HAL_GPIO_Init+0x222>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a50      	ldr	r2, [pc, #320]	; (800285c <HAL_GPIO_Init+0x31c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01f      	beq.n	800275e <HAL_GPIO_Init+0x21e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4f      	ldr	r2, [pc, #316]	; (8002860 <HAL_GPIO_Init+0x320>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <HAL_GPIO_Init+0x21a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4e      	ldr	r2, [pc, #312]	; (8002864 <HAL_GPIO_Init+0x324>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0x216>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4d      	ldr	r2, [pc, #308]	; (8002868 <HAL_GPIO_Init+0x328>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00d      	beq.n	8002752 <HAL_GPIO_Init+0x212>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4c      	ldr	r2, [pc, #304]	; (800286c <HAL_GPIO_Init+0x32c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <HAL_GPIO_Init+0x20e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4b      	ldr	r2, [pc, #300]	; (8002870 <HAL_GPIO_Init+0x330>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_GPIO_Init+0x20a>
 8002746:	2307      	movs	r3, #7
 8002748:	e00e      	b.n	8002768 <HAL_GPIO_Init+0x228>
 800274a:	2308      	movs	r3, #8
 800274c:	e00c      	b.n	8002768 <HAL_GPIO_Init+0x228>
 800274e:	2306      	movs	r3, #6
 8002750:	e00a      	b.n	8002768 <HAL_GPIO_Init+0x228>
 8002752:	2305      	movs	r3, #5
 8002754:	e008      	b.n	8002768 <HAL_GPIO_Init+0x228>
 8002756:	2304      	movs	r3, #4
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x228>
 800275a:	2303      	movs	r3, #3
 800275c:	e004      	b.n	8002768 <HAL_GPIO_Init+0x228>
 800275e:	2302      	movs	r3, #2
 8002760:	e002      	b.n	8002768 <HAL_GPIO_Init+0x228>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_GPIO_Init+0x228>
 8002766:	2300      	movs	r3, #0
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	f002 0203 	and.w	r2, r2, #3
 800276e:	0092      	lsls	r2, r2, #2
 8002770:	4093      	lsls	r3, r2
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002778:	4935      	ldr	r1, [pc, #212]	; (8002850 <HAL_GPIO_Init+0x310>)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002786:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_GPIO_Init+0x334>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027aa:	4a32      	ldr	r2, [pc, #200]	; (8002874 <HAL_GPIO_Init+0x334>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b0:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_GPIO_Init+0x334>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d4:	4a27      	ldr	r2, [pc, #156]	; (8002874 <HAL_GPIO_Init+0x334>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_GPIO_Init+0x334>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <HAL_GPIO_Init+0x334>)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <HAL_GPIO_Init+0x334>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002828:	4a12      	ldr	r2, [pc, #72]	; (8002874 <HAL_GPIO_Init+0x334>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3301      	adds	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b0f      	cmp	r3, #15
 8002838:	f67f ae90 	bls.w	800255c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3724      	adds	r7, #36	; 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40013800 	.word	0x40013800
 8002854:	40020000 	.word	0x40020000
 8002858:	40020400 	.word	0x40020400
 800285c:	40020800 	.word	0x40020800
 8002860:	40020c00 	.word	0x40020c00
 8002864:	40021000 	.word	0x40021000
 8002868:	40021400 	.word	0x40021400
 800286c:	40021800 	.word	0x40021800
 8002870:	40021c00 	.word	0x40021c00
 8002874:	40013c00 	.word	0x40013c00

08002878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	887b      	ldrh	r3, [r7, #2]
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	e001      	b.n	800289a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
 80028b4:	4613      	mov	r3, r2
 80028b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b8:	787b      	ldrb	r3, [r7, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c4:	e003      	b.n	80028ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	041a      	lsls	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	619a      	str	r2, [r3, #24]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e267      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d075      	beq.n	80029e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028fa:	4b88      	ldr	r3, [pc, #544]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b04      	cmp	r3, #4
 8002904:	d00c      	beq.n	8002920 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002906:	4b85      	ldr	r3, [pc, #532]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800290e:	2b08      	cmp	r3, #8
 8002910:	d112      	bne.n	8002938 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002912:	4b82      	ldr	r3, [pc, #520]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291e:	d10b      	bne.n	8002938 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002920:	4b7e      	ldr	r3, [pc, #504]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d05b      	beq.n	80029e4 <HAL_RCC_OscConfig+0x108>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d157      	bne.n	80029e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e242      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002940:	d106      	bne.n	8002950 <HAL_RCC_OscConfig+0x74>
 8002942:	4b76      	ldr	r3, [pc, #472]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a75      	ldr	r2, [pc, #468]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e01d      	b.n	800298c <HAL_RCC_OscConfig+0xb0>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002958:	d10c      	bne.n	8002974 <HAL_RCC_OscConfig+0x98>
 800295a:	4b70      	ldr	r3, [pc, #448]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a6f      	ldr	r2, [pc, #444]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	4b6d      	ldr	r3, [pc, #436]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a6c      	ldr	r2, [pc, #432]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	e00b      	b.n	800298c <HAL_RCC_OscConfig+0xb0>
 8002974:	4b69      	ldr	r3, [pc, #420]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a68      	ldr	r2, [pc, #416]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 800297a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4b66      	ldr	r3, [pc, #408]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a65      	ldr	r2, [pc, #404]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d013      	beq.n	80029bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7ff fc24 	bl	80021e0 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800299c:	f7ff fc20 	bl	80021e0 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	; 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e207      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	4b5b      	ldr	r3, [pc, #364]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0xc0>
 80029ba:	e014      	b.n	80029e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7ff fc10 	bl	80021e0 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c4:	f7ff fc0c 	bl	80021e0 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e1f3      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	4b51      	ldr	r3, [pc, #324]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0xe8>
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d063      	beq.n	8002aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029f2:	4b4a      	ldr	r3, [pc, #296]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029fe:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d11c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0a:	4b44      	ldr	r3, [pc, #272]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d116      	bne.n	8002a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a16:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_RCC_OscConfig+0x152>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e1c7      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4937      	ldr	r1, [pc, #220]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	e03a      	b.n	8002aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a4c:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <HAL_RCC_OscConfig+0x244>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7ff fbc5 	bl	80021e0 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5a:	f7ff fbc1 	bl	80021e0 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e1a8      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	4b28      	ldr	r3, [pc, #160]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4925      	ldr	r1, [pc, #148]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]
 8002a8c:	e015      	b.n	8002aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCC_OscConfig+0x244>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7ff fba4 	bl	80021e0 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9c:	f7ff fba0 	bl	80021e0 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e187      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d036      	beq.n	8002b34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_RCC_OscConfig+0x248>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7ff fb84 	bl	80021e0 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002adc:	f7ff fb80 	bl	80021e0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e167      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x200>
 8002afa:	e01b      	b.n	8002b34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_OscConfig+0x248>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7ff fb6d 	bl	80021e0 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	e00e      	b.n	8002b28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7ff fb69 	bl	80021e0 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d907      	bls.n	8002b28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e150      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	42470000 	.word	0x42470000
 8002b24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	4b88      	ldr	r3, [pc, #544]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ea      	bne.n	8002b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8097 	beq.w	8002c70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b46:	4b81      	ldr	r3, [pc, #516]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10f      	bne.n	8002b72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	4b7d      	ldr	r3, [pc, #500]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a7c      	ldr	r2, [pc, #496]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b7a      	ldr	r3, [pc, #488]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b72:	4b77      	ldr	r3, [pc, #476]	; (8002d50 <HAL_RCC_OscConfig+0x474>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d118      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7e:	4b74      	ldr	r3, [pc, #464]	; (8002d50 <HAL_RCC_OscConfig+0x474>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a73      	ldr	r2, [pc, #460]	; (8002d50 <HAL_RCC_OscConfig+0x474>)
 8002b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8a:	f7ff fb29 	bl	80021e0 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b92:	f7ff fb25 	bl	80021e0 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e10c      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <HAL_RCC_OscConfig+0x474>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x2ea>
 8002bb8:	4b64      	ldr	r3, [pc, #400]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a63      	ldr	r2, [pc, #396]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc4:	e01c      	b.n	8002c00 <HAL_RCC_OscConfig+0x324>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x30c>
 8002bce:	4b5f      	ldr	r3, [pc, #380]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	4a5e      	ldr	r2, [pc, #376]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bda:	4b5c      	ldr	r3, [pc, #368]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a5b      	ldr	r2, [pc, #364]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0x324>
 8002be8:	4b58      	ldr	r3, [pc, #352]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	4a57      	ldr	r2, [pc, #348]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf4:	4b55      	ldr	r3, [pc, #340]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a54      	ldr	r2, [pc, #336]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bfa:	f023 0304 	bic.w	r3, r3, #4
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7ff faea 	bl	80021e0 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7ff fae6 	bl	80021e0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0cb      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c26:	4b49      	ldr	r3, [pc, #292]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ee      	beq.n	8002c10 <HAL_RCC_OscConfig+0x334>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c34:	f7ff fad4 	bl	80021e0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7ff fad0 	bl	80021e0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0b5      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c52:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1ee      	bne.n	8002c3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c64:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	4a38      	ldr	r2, [pc, #224]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80a1 	beq.w	8002dbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c7a:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d05c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d141      	bne.n	8002d12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8e:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <HAL_RCC_OscConfig+0x478>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7ff faa4 	bl	80021e0 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7ff faa0 	bl	80021e0 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e087      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cae:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	019b      	lsls	r3, r3, #6
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	491b      	ldr	r1, [pc, #108]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_OscConfig+0x478>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7ff fa79 	bl	80021e0 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7ff fa75 	bl	80021e0 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e05c      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x416>
 8002d10:	e054      	b.n	8002dbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RCC_OscConfig+0x478>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7ff fa62 	bl	80021e0 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7ff fa5e 	bl	80021e0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e045      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x444>
 8002d3e:	e03d      	b.n	8002dbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e038      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40007000 	.word	0x40007000
 8002d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <HAL_RCC_OscConfig+0x4ec>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d028      	beq.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d121      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d11a      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d88:	4013      	ands	r3, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d111      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	3b01      	subs	r3, #1
 8002da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800

08002dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0cc      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de0:	4b68      	ldr	r3, [pc, #416]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d90c      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b65      	ldr	r3, [pc, #404]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b63      	ldr	r3, [pc, #396]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0b8      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e20:	4b59      	ldr	r3, [pc, #356]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a58      	ldr	r2, [pc, #352]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e38:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b50      	ldr	r3, [pc, #320]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	494d      	ldr	r1, [pc, #308]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d044      	beq.n	8002eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d119      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d107      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8a:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e067      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f023 0203 	bic.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4934      	ldr	r1, [pc, #208]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ebc:	f7ff f990 	bl	80021e0 <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f7ff f98c 	bl	80021e0 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e04f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 020c 	and.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1eb      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d20c      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e032      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4916      	ldr	r1, [pc, #88]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	490e      	ldr	r1, [pc, #56]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f52:	f000 f821 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 8002f56:	4602      	mov	r2, r0
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	490a      	ldr	r1, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	5ccb      	ldrb	r3, [r1, r3]
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f8f0 	bl	8002158 <HAL_InitTick>

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023c00 	.word	0x40023c00
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	08007068 	.word	0x08007068
 8002f90:	20000000 	.word	0x20000000
 8002f94:	20000004 	.word	0x20000004

08002f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f9c:	b090      	sub	sp, #64	; 0x40
 8002f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa8:	2300      	movs	r3, #0
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb0:	4b59      	ldr	r3, [pc, #356]	; (8003118 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d00d      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	f200 80a1 	bhi.w	8003104 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x34>
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fca:	e09b      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fcc:	4b53      	ldr	r3, [pc, #332]	; (800311c <HAL_RCC_GetSysClockFreq+0x184>)
 8002fce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002fd0:	e09b      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fd2:	4b53      	ldr	r3, [pc, #332]	; (8003120 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fd6:	e098      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd8:	4b4f      	ldr	r3, [pc, #316]	; (8003118 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe2:	4b4d      	ldr	r3, [pc, #308]	; (8003118 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d028      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fee:	4b4a      	ldr	r3, [pc, #296]	; (8003118 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	623b      	str	r3, [r7, #32]
 8002ff8:	627a      	str	r2, [r7, #36]	; 0x24
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003000:	2100      	movs	r1, #0
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_GetSysClockFreq+0x188>)
 8003004:	fb03 f201 	mul.w	r2, r3, r1
 8003008:	2300      	movs	r3, #0
 800300a:	fb00 f303 	mul.w	r3, r0, r3
 800300e:	4413      	add	r3, r2
 8003010:	4a43      	ldr	r2, [pc, #268]	; (8003120 <HAL_RCC_GetSysClockFreq+0x188>)
 8003012:	fba0 1202 	umull	r1, r2, r0, r2
 8003016:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003018:	460a      	mov	r2, r1
 800301a:	62ba      	str	r2, [r7, #40]	; 0x28
 800301c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800301e:	4413      	add	r3, r2
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003024:	2200      	movs	r2, #0
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	61fa      	str	r2, [r7, #28]
 800302a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800302e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003032:	f7fd f925 	bl	8000280 <__aeabi_uldivmod>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4613      	mov	r3, r2
 800303c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800303e:	e053      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003040:	4b35      	ldr	r3, [pc, #212]	; (8003118 <HAL_RCC_GetSysClockFreq+0x180>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	2200      	movs	r2, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	617a      	str	r2, [r7, #20]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003052:	f04f 0b00 	mov.w	fp, #0
 8003056:	4652      	mov	r2, sl
 8003058:	465b      	mov	r3, fp
 800305a:	f04f 0000 	mov.w	r0, #0
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	0159      	lsls	r1, r3, #5
 8003064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003068:	0150      	lsls	r0, r2, #5
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	ebb2 080a 	subs.w	r8, r2, sl
 8003072:	eb63 090b 	sbc.w	r9, r3, fp
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003082:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003086:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800308a:	ebb2 0408 	subs.w	r4, r2, r8
 800308e:	eb63 0509 	sbc.w	r5, r3, r9
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	00eb      	lsls	r3, r5, #3
 800309c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030a0:	00e2      	lsls	r2, r4, #3
 80030a2:	4614      	mov	r4, r2
 80030a4:	461d      	mov	r5, r3
 80030a6:	eb14 030a 	adds.w	r3, r4, sl
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	eb45 030b 	adc.w	r3, r5, fp
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030be:	4629      	mov	r1, r5
 80030c0:	028b      	lsls	r3, r1, #10
 80030c2:	4621      	mov	r1, r4
 80030c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030c8:	4621      	mov	r1, r4
 80030ca:	028a      	lsls	r2, r1, #10
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d2:	2200      	movs	r2, #0
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	60fa      	str	r2, [r7, #12]
 80030d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030dc:	f7fd f8d0 	bl	8000280 <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4613      	mov	r3, r2
 80030e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	3301      	adds	r3, #1
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80030f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003102:	e002      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetSysClockFreq+0x184>)
 8003106:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800310c:	4618      	mov	r0, r3
 800310e:	3740      	adds	r7, #64	; 0x40
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	00f42400 	.word	0x00f42400
 8003120:	017d7840 	.word	0x017d7840

08003124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <HAL_RCC_GetHCLKFreq+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000000 	.word	0x20000000

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003140:	f7ff fff0 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0a9b      	lsrs	r3, r3, #10
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4903      	ldr	r1, [pc, #12]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40023800 	.word	0x40023800
 8003160:	08007078 	.word	0x08007078

08003164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003168:	f7ff ffdc 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	0b5b      	lsrs	r3, r3, #13
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4903      	ldr	r1, [pc, #12]	; (8003188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40023800 	.word	0x40023800
 8003188:	08007078 	.word	0x08007078

0800318c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e041      	b.n	8003222 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe fbc6 	bl	8001944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f000 feca 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d001      	beq.n	8003244 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e046      	b.n	80032d2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a23      	ldr	r2, [pc, #140]	; (80032e0 <HAL_TIM_Base_Start+0xb4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d022      	beq.n	800329c <HAL_TIM_Base_Start+0x70>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325e:	d01d      	beq.n	800329c <HAL_TIM_Base_Start+0x70>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <HAL_TIM_Base_Start+0xb8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d018      	beq.n	800329c <HAL_TIM_Base_Start+0x70>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <HAL_TIM_Base_Start+0xbc>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d013      	beq.n	800329c <HAL_TIM_Base_Start+0x70>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <HAL_TIM_Base_Start+0xc0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00e      	beq.n	800329c <HAL_TIM_Base_Start+0x70>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <HAL_TIM_Base_Start+0xc4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d009      	beq.n	800329c <HAL_TIM_Base_Start+0x70>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <HAL_TIM_Base_Start+0xc8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_TIM_Base_Start+0x70>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <HAL_TIM_Base_Start+0xcc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d111      	bne.n	80032c0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d010      	beq.n	80032d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	e007      	b.n	80032d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40010000 	.word	0x40010000
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000800 	.word	0x40000800
 80032ec:	40000c00 	.word	0x40000c00
 80032f0:	40010400 	.word	0x40010400
 80032f4:	40014000 	.word	0x40014000
 80032f8:	40001800 	.word	0x40001800

080032fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d001      	beq.n	8003314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e04e      	b.n	80033b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d022      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333e:	d01d      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d018      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d013      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <HAL_TIM_Base_Start_IT+0xd0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a18      	ldr	r2, [pc, #96]	; (80033d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d111      	bne.n	80033a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b06      	cmp	r3, #6
 800338c:	d010      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339e:	e007      	b.n	80033b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40000c00 	.word	0x40000c00
 80033d0:	40010400 	.word	0x40010400
 80033d4:	40014000 	.word	0x40014000
 80033d8:	40001800 	.word	0x40001800

080033dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e041      	b.n	8003472 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f839 	bl	800347a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3304      	adds	r3, #4
 8003418:	4619      	mov	r1, r3
 800341a:	4610      	mov	r0, r2
 800341c:	f000 fda2 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e041      	b.n	8003524 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d106      	bne.n	80034ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7fe fac3 	bl	8001a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3304      	adds	r3, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f000 fd49 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <HAL_TIM_PWM_Start+0x24>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e022      	b.n	8003596 <HAL_TIM_PWM_Start+0x6a>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b04      	cmp	r3, #4
 8003554:	d109      	bne.n	800356a <HAL_TIM_PWM_Start+0x3e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b01      	cmp	r3, #1
 8003560:	bf14      	ite	ne
 8003562:	2301      	movne	r3, #1
 8003564:	2300      	moveq	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	e015      	b.n	8003596 <HAL_TIM_PWM_Start+0x6a>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d109      	bne.n	8003584 <HAL_TIM_PWM_Start+0x58>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	e008      	b.n	8003596 <HAL_TIM_PWM_Start+0x6a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e07c      	b.n	8003698 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d104      	bne.n	80035ae <HAL_TIM_PWM_Start+0x82>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ac:	e013      	b.n	80035d6 <HAL_TIM_PWM_Start+0xaa>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d104      	bne.n	80035be <HAL_TIM_PWM_Start+0x92>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035bc:	e00b      	b.n	80035d6 <HAL_TIM_PWM_Start+0xaa>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_PWM_Start+0xa2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035cc:	e003      	b.n	80035d6 <HAL_TIM_PWM_Start+0xaa>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2201      	movs	r2, #1
 80035dc:	6839      	ldr	r1, [r7, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 ffaa 	bl	8004538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a2d      	ldr	r2, [pc, #180]	; (80036a0 <HAL_TIM_PWM_Start+0x174>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_TIM_PWM_Start+0xcc>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a2c      	ldr	r2, [pc, #176]	; (80036a4 <HAL_TIM_PWM_Start+0x178>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d101      	bne.n	80035fc <HAL_TIM_PWM_Start+0xd0>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <HAL_TIM_PWM_Start+0xd2>
 80035fc:	2300      	movs	r3, #0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a22      	ldr	r2, [pc, #136]	; (80036a0 <HAL_TIM_PWM_Start+0x174>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d022      	beq.n	8003662 <HAL_TIM_PWM_Start+0x136>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003624:	d01d      	beq.n	8003662 <HAL_TIM_PWM_Start+0x136>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <HAL_TIM_PWM_Start+0x17c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d018      	beq.n	8003662 <HAL_TIM_PWM_Start+0x136>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <HAL_TIM_PWM_Start+0x180>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d013      	beq.n	8003662 <HAL_TIM_PWM_Start+0x136>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <HAL_TIM_PWM_Start+0x184>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00e      	beq.n	8003662 <HAL_TIM_PWM_Start+0x136>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a16      	ldr	r2, [pc, #88]	; (80036a4 <HAL_TIM_PWM_Start+0x178>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_TIM_PWM_Start+0x136>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <HAL_TIM_PWM_Start+0x188>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_TIM_PWM_Start+0x136>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <HAL_TIM_PWM_Start+0x18c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d111      	bne.n	8003686 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d010      	beq.n	8003696 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003684:	e007      	b.n	8003696 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40010400 	.word	0x40010400
 80036a8:	40000400 	.word	0x40000400
 80036ac:	40000800 	.word	0x40000800
 80036b0:	40000c00 	.word	0x40000c00
 80036b4:	40014000 	.word	0x40014000
 80036b8:	40001800 	.word	0x40001800

080036bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e097      	b.n	8003800 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f88f 	bl	8003808 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003700:	f023 0307 	bic.w	r3, r3, #7
 8003704:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f000 fc27 	bl	8003f64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	4313      	orrs	r3, r2
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800375c:	f023 030c 	bic.w	r3, r3, #12
 8003760:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003768:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800376c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	4313      	orrs	r3, r2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	011a      	lsls	r2, r3, #4
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	031b      	lsls	r3, r3, #12
 800378c:	4313      	orrs	r3, r2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800379a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80037a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	4313      	orrs	r3, r2
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800382c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003834:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800383c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003844:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d110      	bne.n	800386e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d102      	bne.n	8003858 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003852:	7b7b      	ldrb	r3, [r7, #13]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d001      	beq.n	800385c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e069      	b.n	8003930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800386c:	e031      	b.n	80038d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d110      	bne.n	8003896 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003874:	7bbb      	ldrb	r3, [r7, #14]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d102      	bne.n	8003880 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800387a:	7b3b      	ldrb	r3, [r7, #12]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d001      	beq.n	8003884 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e055      	b.n	8003930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003894:	e01d      	b.n	80038d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d108      	bne.n	80038ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800389c:	7bbb      	ldrb	r3, [r7, #14]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d105      	bne.n	80038ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038a2:	7b7b      	ldrb	r3, [r7, #13]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d102      	bne.n	80038ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038a8:	7b3b      	ldrb	r3, [r7, #12]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d001      	beq.n	80038b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e03e      	b.n	8003930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2202      	movs	r2, #2
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2202      	movs	r2, #2
 80038c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_TIM_Encoder_Start+0xc4>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d008      	beq.n	80038f0 <HAL_TIM_Encoder_Start+0xd4>
 80038de:	e00f      	b.n	8003900 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2201      	movs	r2, #1
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fe25 	bl	8004538 <TIM_CCxChannelCmd>
      break;
 80038ee:	e016      	b.n	800391e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2201      	movs	r2, #1
 80038f6:	2104      	movs	r1, #4
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fe1d 	bl	8004538 <TIM_CCxChannelCmd>
      break;
 80038fe:	e00e      	b.n	800391e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2201      	movs	r2, #1
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fe15 	bl	8004538 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2201      	movs	r2, #1
 8003914:	2104      	movs	r1, #4
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fe0e 	bl	8004538 <TIM_CCxChannelCmd>
      break;
 800391c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d122      	bne.n	8003994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d11b      	bne.n	8003994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0202 	mvn.w	r2, #2
 8003964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fad3 	bl	8003f26 <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fac5 	bl	8003f12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fad6 	bl	8003f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d122      	bne.n	80039e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d11b      	bne.n	80039e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0204 	mvn.w	r2, #4
 80039b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 faa9 	bl	8003f26 <HAL_TIM_IC_CaptureCallback>
 80039d4:	e005      	b.n	80039e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa9b 	bl	8003f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 faac 	bl	8003f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d122      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d11b      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0208 	mvn.w	r2, #8
 8003a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2204      	movs	r2, #4
 8003a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fa7f 	bl	8003f26 <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fa71 	bl	8003f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fa82 	bl	8003f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d122      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d11b      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0210 	mvn.w	r2, #16
 8003a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2208      	movs	r2, #8
 8003a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fa55 	bl	8003f26 <HAL_TIM_IC_CaptureCallback>
 8003a7c:	e005      	b.n	8003a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fa47 	bl	8003f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fa58 	bl	8003f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d10e      	bne.n	8003abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d107      	bne.n	8003abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0201 	mvn.w	r2, #1
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fc fe30 	bl	800071c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	2b80      	cmp	r3, #128	; 0x80
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d107      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fe26 	bl	8004734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	d10e      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	d107      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fa1d 	bl	8003f4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d10e      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d107      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0220 	mvn.w	r2, #32
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fdf0 	bl	8004720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e048      	b.n	8003bf8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b0c      	cmp	r3, #12
 8003b72:	d839      	bhi.n	8003be8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003b74:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7a:	bf00      	nop
 8003b7c:	08003bb1 	.word	0x08003bb1
 8003b80:	08003be9 	.word	0x08003be9
 8003b84:	08003be9 	.word	0x08003be9
 8003b88:	08003be9 	.word	0x08003be9
 8003b8c:	08003bbf 	.word	0x08003bbf
 8003b90:	08003be9 	.word	0x08003be9
 8003b94:	08003be9 	.word	0x08003be9
 8003b98:	08003be9 	.word	0x08003be9
 8003b9c:	08003bcd 	.word	0x08003bcd
 8003ba0:	08003be9 	.word	0x08003be9
 8003ba4:	08003be9 	.word	0x08003be9
 8003ba8:	08003be9 	.word	0x08003be9
 8003bac:	08003bdb 	.word	0x08003bdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fa74 	bl	80040a4 <TIM_OC1_SetConfig>
      break;
 8003bbc:	e017      	b.n	8003bee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fadd 	bl	8004184 <TIM_OC2_SetConfig>
      break;
 8003bca:	e010      	b.n	8003bee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fb4c 	bl	8004270 <TIM_OC3_SetConfig>
      break;
 8003bd8:	e009      	b.n	8003bee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fbb9 	bl	8004358 <TIM_OC4_SetConfig>
      break;
 8003be6:	e002      	b.n	8003bee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	75fb      	strb	r3, [r7, #23]
      break;
 8003bec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e0ae      	b.n	8003d7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b0c      	cmp	r3, #12
 8003c2a:	f200 809f 	bhi.w	8003d6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c2e:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c34:	08003c69 	.word	0x08003c69
 8003c38:	08003d6d 	.word	0x08003d6d
 8003c3c:	08003d6d 	.word	0x08003d6d
 8003c40:	08003d6d 	.word	0x08003d6d
 8003c44:	08003ca9 	.word	0x08003ca9
 8003c48:	08003d6d 	.word	0x08003d6d
 8003c4c:	08003d6d 	.word	0x08003d6d
 8003c50:	08003d6d 	.word	0x08003d6d
 8003c54:	08003ceb 	.word	0x08003ceb
 8003c58:	08003d6d 	.word	0x08003d6d
 8003c5c:	08003d6d 	.word	0x08003d6d
 8003c60:	08003d6d 	.word	0x08003d6d
 8003c64:	08003d2b 	.word	0x08003d2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fa18 	bl	80040a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0208 	orr.w	r2, r2, #8
 8003c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0204 	bic.w	r2, r2, #4
 8003c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6999      	ldr	r1, [r3, #24]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	619a      	str	r2, [r3, #24]
      break;
 8003ca6:	e064      	b.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fa68 	bl	8004184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6999      	ldr	r1, [r3, #24]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	021a      	lsls	r2, r3, #8
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	619a      	str	r2, [r3, #24]
      break;
 8003ce8:	e043      	b.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fabd 	bl	8004270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0208 	orr.w	r2, r2, #8
 8003d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0204 	bic.w	r2, r2, #4
 8003d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69d9      	ldr	r1, [r3, #28]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	61da      	str	r2, [r3, #28]
      break;
 8003d28:	e023      	b.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fb11 	bl	8004358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69d9      	ldr	r1, [r3, #28]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	021a      	lsls	r2, r3, #8
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	61da      	str	r2, [r3, #28]
      break;
 8003d6a:	e002      	b.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_TIM_ConfigClockSource+0x1c>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e0b4      	b.n	8003f0a <HAL_TIM_ConfigClockSource+0x186>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd8:	d03e      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0xd4>
 8003dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dde:	f200 8087 	bhi.w	8003ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8003de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de6:	f000 8086 	beq.w	8003ef6 <HAL_TIM_ConfigClockSource+0x172>
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dee:	d87f      	bhi.n	8003ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8003df0:	2b70      	cmp	r3, #112	; 0x70
 8003df2:	d01a      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0xa6>
 8003df4:	2b70      	cmp	r3, #112	; 0x70
 8003df6:	d87b      	bhi.n	8003ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8003df8:	2b60      	cmp	r3, #96	; 0x60
 8003dfa:	d050      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0x11a>
 8003dfc:	2b60      	cmp	r3, #96	; 0x60
 8003dfe:	d877      	bhi.n	8003ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e00:	2b50      	cmp	r3, #80	; 0x50
 8003e02:	d03c      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0xfa>
 8003e04:	2b50      	cmp	r3, #80	; 0x50
 8003e06:	d873      	bhi.n	8003ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	d058      	beq.n	8003ebe <HAL_TIM_ConfigClockSource+0x13a>
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d86f      	bhi.n	8003ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e10:	2b30      	cmp	r3, #48	; 0x30
 8003e12:	d064      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0x15a>
 8003e14:	2b30      	cmp	r3, #48	; 0x30
 8003e16:	d86b      	bhi.n	8003ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d060      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0x15a>
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d867      	bhi.n	8003ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d05c      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0x15a>
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d05a      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0x15a>
 8003e28:	e062      	b.n	8003ef0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6899      	ldr	r1, [r3, #8]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f000 fb5d 	bl	80044f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	609a      	str	r2, [r3, #8]
      break;
 8003e56:	e04f      	b.n	8003ef8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6899      	ldr	r1, [r3, #8]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f000 fb46 	bl	80044f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e7a:	609a      	str	r2, [r3, #8]
      break;
 8003e7c:	e03c      	b.n	8003ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6859      	ldr	r1, [r3, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f000 faba 	bl	8004404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2150      	movs	r1, #80	; 0x50
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fb13 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003e9c:	e02c      	b.n	8003ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6859      	ldr	r1, [r3, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f000 fad9 	bl	8004462 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2160      	movs	r1, #96	; 0x60
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fb03 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003ebc:	e01c      	b.n	8003ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6859      	ldr	r1, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f000 fa9a 	bl	8004404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2140      	movs	r1, #64	; 0x40
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 faf3 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003edc:	e00c      	b.n	8003ef8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4610      	mov	r0, r2
 8003eea:	f000 faea 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003eee:	e003      	b.n	8003ef8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef4:	e000      	b.n	8003ef8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ef6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a40      	ldr	r2, [pc, #256]	; (8004078 <TIM_Base_SetConfig+0x114>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d013      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f82:	d00f      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a3d      	ldr	r2, [pc, #244]	; (800407c <TIM_Base_SetConfig+0x118>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00b      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a3c      	ldr	r2, [pc, #240]	; (8004080 <TIM_Base_SetConfig+0x11c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d007      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a3b      	ldr	r2, [pc, #236]	; (8004084 <TIM_Base_SetConfig+0x120>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a3a      	ldr	r2, [pc, #232]	; (8004088 <TIM_Base_SetConfig+0x124>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d108      	bne.n	8003fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a2f      	ldr	r2, [pc, #188]	; (8004078 <TIM_Base_SetConfig+0x114>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d02b      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc4:	d027      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a2c      	ldr	r2, [pc, #176]	; (800407c <TIM_Base_SetConfig+0x118>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d023      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a2b      	ldr	r2, [pc, #172]	; (8004080 <TIM_Base_SetConfig+0x11c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01f      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2a      	ldr	r2, [pc, #168]	; (8004084 <TIM_Base_SetConfig+0x120>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01b      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a29      	ldr	r2, [pc, #164]	; (8004088 <TIM_Base_SetConfig+0x124>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d017      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a28      	ldr	r2, [pc, #160]	; (800408c <TIM_Base_SetConfig+0x128>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a27      	ldr	r2, [pc, #156]	; (8004090 <TIM_Base_SetConfig+0x12c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00f      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a26      	ldr	r2, [pc, #152]	; (8004094 <TIM_Base_SetConfig+0x130>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00b      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a25      	ldr	r2, [pc, #148]	; (8004098 <TIM_Base_SetConfig+0x134>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a24      	ldr	r2, [pc, #144]	; (800409c <TIM_Base_SetConfig+0x138>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d003      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a23      	ldr	r2, [pc, #140]	; (80040a0 <TIM_Base_SetConfig+0x13c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d108      	bne.n	8004028 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <TIM_Base_SetConfig+0x114>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_Base_SetConfig+0xf8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <TIM_Base_SetConfig+0x124>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d103      	bne.n	8004064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	615a      	str	r2, [r3, #20]
}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40010000 	.word	0x40010000
 800407c:	40000400 	.word	0x40000400
 8004080:	40000800 	.word	0x40000800
 8004084:	40000c00 	.word	0x40000c00
 8004088:	40010400 	.word	0x40010400
 800408c:	40014000 	.word	0x40014000
 8004090:	40014400 	.word	0x40014400
 8004094:	40014800 	.word	0x40014800
 8004098:	40001800 	.word	0x40001800
 800409c:	40001c00 	.word	0x40001c00
 80040a0:	40002000 	.word	0x40002000

080040a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0201 	bic.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f023 0302 	bic.w	r3, r3, #2
 80040ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a20      	ldr	r2, [pc, #128]	; (800417c <TIM_OC1_SetConfig+0xd8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <TIM_OC1_SetConfig+0x64>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a1f      	ldr	r2, [pc, #124]	; (8004180 <TIM_OC1_SetConfig+0xdc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d10c      	bne.n	8004122 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f023 0308 	bic.w	r3, r3, #8
 800410e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a15      	ldr	r2, [pc, #84]	; (800417c <TIM_OC1_SetConfig+0xd8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <TIM_OC1_SetConfig+0x8e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a14      	ldr	r2, [pc, #80]	; (8004180 <TIM_OC1_SetConfig+0xdc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d111      	bne.n	8004156 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	621a      	str	r2, [r3, #32]
}
 8004170:	bf00      	nop
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40010000 	.word	0x40010000
 8004180:	40010400 	.word	0x40010400

08004184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f023 0210 	bic.w	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0320 	bic.w	r3, r3, #32
 80041ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a22      	ldr	r2, [pc, #136]	; (8004268 <TIM_OC2_SetConfig+0xe4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_OC2_SetConfig+0x68>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a21      	ldr	r2, [pc, #132]	; (800426c <TIM_OC2_SetConfig+0xe8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d10d      	bne.n	8004208 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004206:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a17      	ldr	r2, [pc, #92]	; (8004268 <TIM_OC2_SetConfig+0xe4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <TIM_OC2_SetConfig+0x94>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a16      	ldr	r2, [pc, #88]	; (800426c <TIM_OC2_SetConfig+0xe8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d113      	bne.n	8004240 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800421e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40010000 	.word	0x40010000
 800426c:	40010400 	.word	0x40010400

08004270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0303 	bic.w	r3, r3, #3
 80042a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a21      	ldr	r2, [pc, #132]	; (8004350 <TIM_OC3_SetConfig+0xe0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d003      	beq.n	80042d6 <TIM_OC3_SetConfig+0x66>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a20      	ldr	r2, [pc, #128]	; (8004354 <TIM_OC3_SetConfig+0xe4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d10d      	bne.n	80042f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a16      	ldr	r2, [pc, #88]	; (8004350 <TIM_OC3_SetConfig+0xe0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_OC3_SetConfig+0x92>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a15      	ldr	r2, [pc, #84]	; (8004354 <TIM_OC3_SetConfig+0xe4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d113      	bne.n	800432a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	621a      	str	r2, [r3, #32]
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40010000 	.word	0x40010000
 8004354:	40010400 	.word	0x40010400

08004358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	031b      	lsls	r3, r3, #12
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a12      	ldr	r2, [pc, #72]	; (80043fc <TIM_OC4_SetConfig+0xa4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d003      	beq.n	80043c0 <TIM_OC4_SetConfig+0x68>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a11      	ldr	r2, [pc, #68]	; (8004400 <TIM_OC4_SetConfig+0xa8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d109      	bne.n	80043d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	019b      	lsls	r3, r3, #6
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40010000 	.word	0x40010000
 8004400:	40010400 	.word	0x40010400

08004404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800442e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f023 030a 	bic.w	r3, r3, #10
 8004440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004462:	b480      	push	{r7}
 8004464:	b087      	sub	sp, #28
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f023 0210 	bic.w	r2, r3, #16
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800448c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	031b      	lsls	r3, r3, #12
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800449e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	f043 0307 	orr.w	r3, r3, #7
 80044e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	609a      	str	r2, [r3, #8]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	431a      	orrs	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	609a      	str	r2, [r3, #8]
}
 800452c:	bf00      	nop
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2201      	movs	r2, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a1a      	ldr	r2, [r3, #32]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	43db      	mvns	r3, r3
 800455a:	401a      	ands	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	fa01 f303 	lsl.w	r3, r1, r3
 8004570:	431a      	orrs	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004598:	2302      	movs	r3, #2
 800459a:	e05a      	b.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a21      	ldr	r2, [pc, #132]	; (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d022      	beq.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d01d      	beq.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d018      	beq.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a1a      	ldr	r2, [pc, #104]	; (800466c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00e      	beq.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d009      	beq.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a17      	ldr	r2, [pc, #92]	; (8004674 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a15      	ldr	r2, [pc, #84]	; (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d10c      	bne.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800462c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	4313      	orrs	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40010000 	.word	0x40010000
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	40000c00 	.word	0x40000c00
 8004670:	40010400 	.word	0x40010400
 8004674:	40014000 	.word	0x40014000
 8004678:	40001800 	.word	0x40001800

0800467c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004694:	2302      	movs	r3, #2
 8004696:	e03d      	b.n	8004714 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e03f      	b.n	80047da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fd faa6 	bl	8001cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2224      	movs	r2, #36	; 0x24
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800478a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fcdf 	bl	8005150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695a      	ldr	r2, [r3, #20]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	4613      	mov	r3, r2
 80047ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d11d      	bne.n	8004838 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_UART_Receive_IT+0x26>
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e016      	b.n	800483a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_UART_Receive_IT+0x38>
 8004816:	2302      	movs	r3, #2
 8004818:	e00f      	b.n	800483a <HAL_UART_Receive_IT+0x58>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	461a      	mov	r2, r3
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fab6 	bl	8004da0 <UART_Start_Receive_IT>
 8004834:	4603      	mov	r3, r0
 8004836:	e000      	b.n	800483a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b0ba      	sub	sp, #232	; 0xe8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800486a:	2300      	movs	r3, #0
 800486c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004870:	2300      	movs	r3, #0
 8004872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800488a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_UART_IRQHandler+0x66>
 8004896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fb99 	bl	8004fda <UART_Receive_IT>
      return;
 80048a8:	e256      	b.n	8004d58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80de 	beq.w	8004a70 <HAL_UART_IRQHandler+0x22c>
 80048b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80d1 	beq.w	8004a70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_UART_IRQHandler+0xae>
 80048da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f043 0201 	orr.w	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <HAL_UART_IRQHandler+0xd2>
 80048fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f043 0202 	orr.w	r2, r3, #2
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <HAL_UART_IRQHandler+0xf6>
 8004922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f043 0204 	orr.w	r2, r3, #4
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d011      	beq.n	800496a <HAL_UART_IRQHandler+0x126>
 8004946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d105      	bne.n	800495e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f043 0208 	orr.w	r2, r3, #8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 81ed 	beq.w	8004d4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_UART_IRQHandler+0x14e>
 8004980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fb24 	bl	8004fda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499c:	2b40      	cmp	r3, #64	; 0x40
 800499e:	bf0c      	ite	eq
 80049a0:	2301      	moveq	r3, #1
 80049a2:	2300      	movne	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d103      	bne.n	80049be <HAL_UART_IRQHandler+0x17a>
 80049b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d04f      	beq.n	8004a5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa2c 	bl	8004e1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	d141      	bne.n	8004a56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3314      	adds	r3, #20
 80049d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3314      	adds	r3, #20
 80049fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1d9      	bne.n	80049d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d013      	beq.n	8004a4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	4a7d      	ldr	r2, [pc, #500]	; (8004c20 <HAL_UART_IRQHandler+0x3dc>)
 8004a2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fd fd61 	bl	80024fa <HAL_DMA_Abort_IT>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d016      	beq.n	8004a6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a48:	4610      	mov	r0, r2
 8004a4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	e00e      	b.n	8004a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f990 	bl	8004d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a54:	e00a      	b.n	8004a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f98c 	bl	8004d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	e006      	b.n	8004a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f988 	bl	8004d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a6a:	e170      	b.n	8004d4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	bf00      	nop
    return;
 8004a6e:	e16e      	b.n	8004d4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	f040 814a 	bne.w	8004d0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 8143 	beq.w	8004d0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 813c 	beq.w	8004d0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a96:	2300      	movs	r3, #0
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	f040 80b4 	bne.w	8004c24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ac8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8140 	beq.w	8004d52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ada:	429a      	cmp	r2, r3
 8004adc:	f080 8139 	bcs.w	8004d52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ae6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af2:	f000 8088 	beq.w	8004c06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	330c      	adds	r3, #12
 8004afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1d9      	bne.n	8004af6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3314      	adds	r3, #20
 8004b48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3314      	adds	r3, #20
 8004b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e1      	bne.n	8004b42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3314      	adds	r3, #20
 8004b84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3314      	adds	r3, #20
 8004b9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ba2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ba4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ba8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e3      	bne.n	8004b7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd6:	f023 0310 	bic.w	r3, r3, #16
 8004bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	330c      	adds	r3, #12
 8004be4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004be8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e3      	bne.n	8004bc4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fd fc0a 	bl	800241a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f8b6 	bl	8004d88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c1c:	e099      	b.n	8004d52 <HAL_UART_IRQHandler+0x50e>
 8004c1e:	bf00      	nop
 8004c20:	08004ee3 	.word	0x08004ee3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 808b 	beq.w	8004d56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8086 	beq.w	8004d56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	330c      	adds	r3, #12
 8004c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	330c      	adds	r3, #12
 8004c6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c6e:	647a      	str	r2, [r7, #68]	; 0x44
 8004c70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e3      	bne.n	8004c4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3314      	adds	r3, #20
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	623b      	str	r3, [r7, #32]
   return(result);
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f023 0301 	bic.w	r3, r3, #1
 8004c98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3314      	adds	r3, #20
 8004ca2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ca6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e3      	bne.n	8004c82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0310 	bic.w	r3, r3, #16
 8004cde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004cec:	61fa      	str	r2, [r7, #28]
 8004cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	69b9      	ldr	r1, [r7, #24]
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e3      	bne.n	8004cc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d04:	4619      	mov	r1, r3
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f83e 	bl	8004d88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d0c:	e023      	b.n	8004d56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_UART_IRQHandler+0x4ea>
 8004d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8ef 	bl	8004f0a <UART_Transmit_IT>
    return;
 8004d2c:	e014      	b.n	8004d58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00e      	beq.n	8004d58 <HAL_UART_IRQHandler+0x514>
 8004d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f92f 	bl	8004faa <UART_EndTransmit_IT>
    return;
 8004d4c:	e004      	b.n	8004d58 <HAL_UART_IRQHandler+0x514>
    return;
 8004d4e:	bf00      	nop
 8004d50:	e002      	b.n	8004d58 <HAL_UART_IRQHandler+0x514>
      return;
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <HAL_UART_IRQHandler+0x514>
      return;
 8004d56:	bf00      	nop
  }
}
 8004d58:	37e8      	adds	r7, #232	; 0xe8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop

08004d60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	4613      	mov	r3, r2
 8004dac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	88fa      	ldrh	r2, [r7, #6]
 8004dbe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2222      	movs	r2, #34	; 0x22
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0201 	orr.w	r2, r2, #1
 8004dfc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0220 	orr.w	r2, r2, #32
 8004e0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b095      	sub	sp, #84	; 0x54
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e44:	643a      	str	r2, [r7, #64]	; 0x40
 8004e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e5      	bne.n	8004e24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3314      	adds	r3, #20
 8004e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f023 0301 	bic.w	r3, r3, #1
 8004e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3314      	adds	r3, #20
 8004e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e5      	bne.n	8004e58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d119      	bne.n	8004ec8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f023 0310 	bic.w	r3, r3, #16
 8004eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eb4:	61ba      	str	r2, [r7, #24]
 8004eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6979      	ldr	r1, [r7, #20]
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e5      	bne.n	8004e94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ed6:	bf00      	nop
 8004ed8:	3754      	adds	r7, #84	; 0x54
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff ff39 	bl	8004d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b21      	cmp	r3, #33	; 0x21
 8004f1c:	d13e      	bne.n	8004f9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f26:	d114      	bne.n	8004f52 <UART_Transmit_IT+0x48>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d110      	bne.n	8004f52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	1c9a      	adds	r2, r3, #2
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	621a      	str	r2, [r3, #32]
 8004f50:	e008      	b.n	8004f64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	1c59      	adds	r1, r3, #1
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6211      	str	r1, [r2, #32]
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	4619      	mov	r1, r3
 8004f72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10f      	bne.n	8004f98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff fec8 	bl	8004d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b08c      	sub	sp, #48	; 0x30
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b22      	cmp	r3, #34	; 0x22
 8004fec:	f040 80ab 	bne.w	8005146 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff8:	d117      	bne.n	800502a <UART_Receive_IT+0x50>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d113      	bne.n	800502a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005018:	b29a      	uxth	r2, r3
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	1c9a      	adds	r2, r3, #2
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28
 8005028:	e026      	b.n	8005078 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503c:	d007      	beq.n	800504e <UART_Receive_IT+0x74>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <UART_Receive_IT+0x82>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	b2da      	uxtb	r2, r3
 8005056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	e008      	b.n	800506e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005068:	b2da      	uxtb	r2, r3
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29b      	uxth	r3, r3
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4619      	mov	r1, r3
 8005086:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005088:	2b00      	cmp	r3, #0
 800508a:	d15a      	bne.n	8005142 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0220 	bic.w	r2, r2, #32
 800509a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695a      	ldr	r2, [r3, #20]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d135      	bne.n	8005138 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	613b      	str	r3, [r7, #16]
   return(result);
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f023 0310 	bic.w	r3, r3, #16
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	330c      	adds	r3, #12
 80050f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f2:	623a      	str	r2, [r7, #32]
 80050f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	69f9      	ldr	r1, [r7, #28]
 80050f8:	6a3a      	ldr	r2, [r7, #32]
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e5      	bne.n	80050d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b10      	cmp	r3, #16
 8005112:	d10a      	bne.n	800512a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800512e:	4619      	mov	r1, r3
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fe29 	bl	8004d88 <HAL_UARTEx_RxEventCallback>
 8005136:	e002      	b.n	800513e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7fb ff81 	bl	8001040 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	e002      	b.n	8005148 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	e000      	b.n	8005148 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005146:	2302      	movs	r3, #2
  }
}
 8005148:	4618      	mov	r0, r3
 800514a:	3730      	adds	r7, #48	; 0x30
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005154:	b0c0      	sub	sp, #256	; 0x100
 8005156:	af00      	add	r7, sp, #0
 8005158:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	68d9      	ldr	r1, [r3, #12]
 800516e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	ea40 0301 	orr.w	r3, r0, r1
 8005178:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	431a      	orrs	r2, r3
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	431a      	orrs	r2, r3
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051a8:	f021 010c 	bic.w	r1, r1, #12
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051b6:	430b      	orrs	r3, r1
 80051b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ca:	6999      	ldr	r1, [r3, #24]
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	ea40 0301 	orr.w	r3, r0, r1
 80051d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4b8f      	ldr	r3, [pc, #572]	; (800541c <UART_SetConfig+0x2cc>)
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d005      	beq.n	80051f0 <UART_SetConfig+0xa0>
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	4b8d      	ldr	r3, [pc, #564]	; (8005420 <UART_SetConfig+0x2d0>)
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d104      	bne.n	80051fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051f0:	f7fd ffb8 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 80051f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051f8:	e003      	b.n	8005202 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051fa:	f7fd ff9f 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 80051fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800520c:	f040 810c 	bne.w	8005428 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005214:	2200      	movs	r2, #0
 8005216:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800521a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800521e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005222:	4622      	mov	r2, r4
 8005224:	462b      	mov	r3, r5
 8005226:	1891      	adds	r1, r2, r2
 8005228:	65b9      	str	r1, [r7, #88]	; 0x58
 800522a:	415b      	adcs	r3, r3
 800522c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800522e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005232:	4621      	mov	r1, r4
 8005234:	eb12 0801 	adds.w	r8, r2, r1
 8005238:	4629      	mov	r1, r5
 800523a:	eb43 0901 	adc.w	r9, r3, r1
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800524a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800524e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005252:	4690      	mov	r8, r2
 8005254:	4699      	mov	r9, r3
 8005256:	4623      	mov	r3, r4
 8005258:	eb18 0303 	adds.w	r3, r8, r3
 800525c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005260:	462b      	mov	r3, r5
 8005262:	eb49 0303 	adc.w	r3, r9, r3
 8005266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800526a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005276:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800527a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800527e:	460b      	mov	r3, r1
 8005280:	18db      	adds	r3, r3, r3
 8005282:	653b      	str	r3, [r7, #80]	; 0x50
 8005284:	4613      	mov	r3, r2
 8005286:	eb42 0303 	adc.w	r3, r2, r3
 800528a:	657b      	str	r3, [r7, #84]	; 0x54
 800528c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005290:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005294:	f7fa fff4 	bl	8000280 <__aeabi_uldivmod>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4b61      	ldr	r3, [pc, #388]	; (8005424 <UART_SetConfig+0x2d4>)
 800529e:	fba3 2302 	umull	r2, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	011c      	lsls	r4, r3, #4
 80052a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	1891      	adds	r1, r2, r2
 80052be:	64b9      	str	r1, [r7, #72]	; 0x48
 80052c0:	415b      	adcs	r3, r3
 80052c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052c8:	4641      	mov	r1, r8
 80052ca:	eb12 0a01 	adds.w	sl, r2, r1
 80052ce:	4649      	mov	r1, r9
 80052d0:	eb43 0b01 	adc.w	fp, r3, r1
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052e8:	4692      	mov	sl, r2
 80052ea:	469b      	mov	fp, r3
 80052ec:	4643      	mov	r3, r8
 80052ee:	eb1a 0303 	adds.w	r3, sl, r3
 80052f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052f6:	464b      	mov	r3, r9
 80052f8:	eb4b 0303 	adc.w	r3, fp, r3
 80052fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800530c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005310:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005314:	460b      	mov	r3, r1
 8005316:	18db      	adds	r3, r3, r3
 8005318:	643b      	str	r3, [r7, #64]	; 0x40
 800531a:	4613      	mov	r3, r2
 800531c:	eb42 0303 	adc.w	r3, r2, r3
 8005320:	647b      	str	r3, [r7, #68]	; 0x44
 8005322:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005326:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800532a:	f7fa ffa9 	bl	8000280 <__aeabi_uldivmod>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4611      	mov	r1, r2
 8005334:	4b3b      	ldr	r3, [pc, #236]	; (8005424 <UART_SetConfig+0x2d4>)
 8005336:	fba3 2301 	umull	r2, r3, r3, r1
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	2264      	movs	r2, #100	; 0x64
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	1acb      	subs	r3, r1, r3
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800534a:	4b36      	ldr	r3, [pc, #216]	; (8005424 <UART_SetConfig+0x2d4>)
 800534c:	fba3 2302 	umull	r2, r3, r3, r2
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005358:	441c      	add	r4, r3
 800535a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535e:	2200      	movs	r2, #0
 8005360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005364:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005368:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	1891      	adds	r1, r2, r2
 8005372:	63b9      	str	r1, [r7, #56]	; 0x38
 8005374:	415b      	adcs	r3, r3
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005378:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800537c:	4641      	mov	r1, r8
 800537e:	1851      	adds	r1, r2, r1
 8005380:	6339      	str	r1, [r7, #48]	; 0x30
 8005382:	4649      	mov	r1, r9
 8005384:	414b      	adcs	r3, r1
 8005386:	637b      	str	r3, [r7, #52]	; 0x34
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005394:	4659      	mov	r1, fp
 8005396:	00cb      	lsls	r3, r1, #3
 8005398:	4651      	mov	r1, sl
 800539a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539e:	4651      	mov	r1, sl
 80053a0:	00ca      	lsls	r2, r1, #3
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	4642      	mov	r2, r8
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053b0:	464b      	mov	r3, r9
 80053b2:	460a      	mov	r2, r1
 80053b4:	eb42 0303 	adc.w	r3, r2, r3
 80053b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053d0:	460b      	mov	r3, r1
 80053d2:	18db      	adds	r3, r3, r3
 80053d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053d6:	4613      	mov	r3, r2
 80053d8:	eb42 0303 	adc.w	r3, r2, r3
 80053dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053e6:	f7fa ff4b 	bl	8000280 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <UART_SetConfig+0x2d4>)
 80053f0:	fba3 1302 	umull	r1, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	2164      	movs	r1, #100	; 0x64
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	3332      	adds	r3, #50	; 0x32
 8005402:	4a08      	ldr	r2, [pc, #32]	; (8005424 <UART_SetConfig+0x2d4>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	f003 0207 	and.w	r2, r3, #7
 800540e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4422      	add	r2, r4
 8005416:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005418:	e106      	b.n	8005628 <UART_SetConfig+0x4d8>
 800541a:	bf00      	nop
 800541c:	40011000 	.word	0x40011000
 8005420:	40011400 	.word	0x40011400
 8005424:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800542c:	2200      	movs	r2, #0
 800542e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005432:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005436:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800543a:	4642      	mov	r2, r8
 800543c:	464b      	mov	r3, r9
 800543e:	1891      	adds	r1, r2, r2
 8005440:	6239      	str	r1, [r7, #32]
 8005442:	415b      	adcs	r3, r3
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
 8005446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800544a:	4641      	mov	r1, r8
 800544c:	1854      	adds	r4, r2, r1
 800544e:	4649      	mov	r1, r9
 8005450:	eb43 0501 	adc.w	r5, r3, r1
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	00eb      	lsls	r3, r5, #3
 800545e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005462:	00e2      	lsls	r2, r4, #3
 8005464:	4614      	mov	r4, r2
 8005466:	461d      	mov	r5, r3
 8005468:	4643      	mov	r3, r8
 800546a:	18e3      	adds	r3, r4, r3
 800546c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005470:	464b      	mov	r3, r9
 8005472:	eb45 0303 	adc.w	r3, r5, r3
 8005476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005486:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005496:	4629      	mov	r1, r5
 8005498:	008b      	lsls	r3, r1, #2
 800549a:	4621      	mov	r1, r4
 800549c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a0:	4621      	mov	r1, r4
 80054a2:	008a      	lsls	r2, r1, #2
 80054a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054a8:	f7fa feea 	bl	8000280 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4b60      	ldr	r3, [pc, #384]	; (8005634 <UART_SetConfig+0x4e4>)
 80054b2:	fba3 2302 	umull	r2, r3, r3, r2
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	011c      	lsls	r4, r3, #4
 80054ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054be:	2200      	movs	r2, #0
 80054c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	1891      	adds	r1, r2, r2
 80054d2:	61b9      	str	r1, [r7, #24]
 80054d4:	415b      	adcs	r3, r3
 80054d6:	61fb      	str	r3, [r7, #28]
 80054d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054dc:	4641      	mov	r1, r8
 80054de:	1851      	adds	r1, r2, r1
 80054e0:	6139      	str	r1, [r7, #16]
 80054e2:	4649      	mov	r1, r9
 80054e4:	414b      	adcs	r3, r1
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054f4:	4659      	mov	r1, fp
 80054f6:	00cb      	lsls	r3, r1, #3
 80054f8:	4651      	mov	r1, sl
 80054fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054fe:	4651      	mov	r1, sl
 8005500:	00ca      	lsls	r2, r1, #3
 8005502:	4610      	mov	r0, r2
 8005504:	4619      	mov	r1, r3
 8005506:	4603      	mov	r3, r0
 8005508:	4642      	mov	r2, r8
 800550a:	189b      	adds	r3, r3, r2
 800550c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005510:	464b      	mov	r3, r9
 8005512:	460a      	mov	r2, r1
 8005514:	eb42 0303 	adc.w	r3, r2, r3
 8005518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800551c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	67bb      	str	r3, [r7, #120]	; 0x78
 8005526:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005534:	4649      	mov	r1, r9
 8005536:	008b      	lsls	r3, r1, #2
 8005538:	4641      	mov	r1, r8
 800553a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800553e:	4641      	mov	r1, r8
 8005540:	008a      	lsls	r2, r1, #2
 8005542:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005546:	f7fa fe9b 	bl	8000280 <__aeabi_uldivmod>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4611      	mov	r1, r2
 8005550:	4b38      	ldr	r3, [pc, #224]	; (8005634 <UART_SetConfig+0x4e4>)
 8005552:	fba3 2301 	umull	r2, r3, r3, r1
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	2264      	movs	r2, #100	; 0x64
 800555a:	fb02 f303 	mul.w	r3, r2, r3
 800555e:	1acb      	subs	r3, r1, r3
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	3332      	adds	r3, #50	; 0x32
 8005564:	4a33      	ldr	r2, [pc, #204]	; (8005634 <UART_SetConfig+0x4e4>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005570:	441c      	add	r4, r3
 8005572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005576:	2200      	movs	r2, #0
 8005578:	673b      	str	r3, [r7, #112]	; 0x70
 800557a:	677a      	str	r2, [r7, #116]	; 0x74
 800557c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005580:	4642      	mov	r2, r8
 8005582:	464b      	mov	r3, r9
 8005584:	1891      	adds	r1, r2, r2
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	415b      	adcs	r3, r3
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005590:	4641      	mov	r1, r8
 8005592:	1851      	adds	r1, r2, r1
 8005594:	6039      	str	r1, [r7, #0]
 8005596:	4649      	mov	r1, r9
 8005598:	414b      	adcs	r3, r1
 800559a:	607b      	str	r3, [r7, #4]
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055a8:	4659      	mov	r1, fp
 80055aa:	00cb      	lsls	r3, r1, #3
 80055ac:	4651      	mov	r1, sl
 80055ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055b2:	4651      	mov	r1, sl
 80055b4:	00ca      	lsls	r2, r1, #3
 80055b6:	4610      	mov	r0, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	4642      	mov	r2, r8
 80055be:	189b      	adds	r3, r3, r2
 80055c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80055c2:	464b      	mov	r3, r9
 80055c4:	460a      	mov	r2, r1
 80055c6:	eb42 0303 	adc.w	r3, r2, r3
 80055ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	663b      	str	r3, [r7, #96]	; 0x60
 80055d6:	667a      	str	r2, [r7, #100]	; 0x64
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055e4:	4649      	mov	r1, r9
 80055e6:	008b      	lsls	r3, r1, #2
 80055e8:	4641      	mov	r1, r8
 80055ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ee:	4641      	mov	r1, r8
 80055f0:	008a      	lsls	r2, r1, #2
 80055f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055f6:	f7fa fe43 	bl	8000280 <__aeabi_uldivmod>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <UART_SetConfig+0x4e4>)
 8005600:	fba3 1302 	umull	r1, r3, r3, r2
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	2164      	movs	r1, #100	; 0x64
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	3332      	adds	r3, #50	; 0x32
 8005612:	4a08      	ldr	r2, [pc, #32]	; (8005634 <UART_SetConfig+0x4e4>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	f003 020f 	and.w	r2, r3, #15
 800561e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4422      	add	r2, r4
 8005626:	609a      	str	r2, [r3, #8]
}
 8005628:	bf00      	nop
 800562a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800562e:	46bd      	mov	sp, r7
 8005630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005634:	51eb851f 	.word	0x51eb851f

08005638 <std>:
 8005638:	2300      	movs	r3, #0
 800563a:	b510      	push	{r4, lr}
 800563c:	4604      	mov	r4, r0
 800563e:	e9c0 3300 	strd	r3, r3, [r0]
 8005642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005646:	6083      	str	r3, [r0, #8]
 8005648:	8181      	strh	r1, [r0, #12]
 800564a:	6643      	str	r3, [r0, #100]	; 0x64
 800564c:	81c2      	strh	r2, [r0, #14]
 800564e:	6183      	str	r3, [r0, #24]
 8005650:	4619      	mov	r1, r3
 8005652:	2208      	movs	r2, #8
 8005654:	305c      	adds	r0, #92	; 0x5c
 8005656:	f000 f922 	bl	800589e <memset>
 800565a:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <std+0x58>)
 800565c:	6263      	str	r3, [r4, #36]	; 0x24
 800565e:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <std+0x5c>)
 8005660:	62a3      	str	r3, [r4, #40]	; 0x28
 8005662:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <std+0x60>)
 8005664:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005666:	4b0d      	ldr	r3, [pc, #52]	; (800569c <std+0x64>)
 8005668:	6323      	str	r3, [r4, #48]	; 0x30
 800566a:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <std+0x68>)
 800566c:	6224      	str	r4, [r4, #32]
 800566e:	429c      	cmp	r4, r3
 8005670:	d006      	beq.n	8005680 <std+0x48>
 8005672:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005676:	4294      	cmp	r4, r2
 8005678:	d002      	beq.n	8005680 <std+0x48>
 800567a:	33d0      	adds	r3, #208	; 0xd0
 800567c:	429c      	cmp	r4, r3
 800567e:	d105      	bne.n	800568c <std+0x54>
 8005680:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005688:	f000 b9de 	b.w	8005a48 <__retarget_lock_init_recursive>
 800568c:	bd10      	pop	{r4, pc}
 800568e:	bf00      	nop
 8005690:	08005815 	.word	0x08005815
 8005694:	0800583b 	.word	0x0800583b
 8005698:	08005873 	.word	0x08005873
 800569c:	08005897 	.word	0x08005897
 80056a0:	20000088 	.word	0x20000088

080056a4 <stdio_exit_handler>:
 80056a4:	4a02      	ldr	r2, [pc, #8]	; (80056b0 <stdio_exit_handler+0xc>)
 80056a6:	4903      	ldr	r1, [pc, #12]	; (80056b4 <stdio_exit_handler+0x10>)
 80056a8:	4803      	ldr	r0, [pc, #12]	; (80056b8 <stdio_exit_handler+0x14>)
 80056aa:	f000 b869 	b.w	8005780 <_fwalk_sglue>
 80056ae:	bf00      	nop
 80056b0:	2000000c 	.word	0x2000000c
 80056b4:	080063d9 	.word	0x080063d9
 80056b8:	20000018 	.word	0x20000018

080056bc <cleanup_stdio>:
 80056bc:	6841      	ldr	r1, [r0, #4]
 80056be:	4b0c      	ldr	r3, [pc, #48]	; (80056f0 <cleanup_stdio+0x34>)
 80056c0:	4299      	cmp	r1, r3
 80056c2:	b510      	push	{r4, lr}
 80056c4:	4604      	mov	r4, r0
 80056c6:	d001      	beq.n	80056cc <cleanup_stdio+0x10>
 80056c8:	f000 fe86 	bl	80063d8 <_fflush_r>
 80056cc:	68a1      	ldr	r1, [r4, #8]
 80056ce:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <cleanup_stdio+0x38>)
 80056d0:	4299      	cmp	r1, r3
 80056d2:	d002      	beq.n	80056da <cleanup_stdio+0x1e>
 80056d4:	4620      	mov	r0, r4
 80056d6:	f000 fe7f 	bl	80063d8 <_fflush_r>
 80056da:	68e1      	ldr	r1, [r4, #12]
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <cleanup_stdio+0x3c>)
 80056de:	4299      	cmp	r1, r3
 80056e0:	d004      	beq.n	80056ec <cleanup_stdio+0x30>
 80056e2:	4620      	mov	r0, r4
 80056e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e8:	f000 be76 	b.w	80063d8 <_fflush_r>
 80056ec:	bd10      	pop	{r4, pc}
 80056ee:	bf00      	nop
 80056f0:	20000088 	.word	0x20000088
 80056f4:	200000f0 	.word	0x200000f0
 80056f8:	20000158 	.word	0x20000158

080056fc <global_stdio_init.part.0>:
 80056fc:	b510      	push	{r4, lr}
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <global_stdio_init.part.0+0x30>)
 8005700:	4c0b      	ldr	r4, [pc, #44]	; (8005730 <global_stdio_init.part.0+0x34>)
 8005702:	4a0c      	ldr	r2, [pc, #48]	; (8005734 <global_stdio_init.part.0+0x38>)
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	4620      	mov	r0, r4
 8005708:	2200      	movs	r2, #0
 800570a:	2104      	movs	r1, #4
 800570c:	f7ff ff94 	bl	8005638 <std>
 8005710:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005714:	2201      	movs	r2, #1
 8005716:	2109      	movs	r1, #9
 8005718:	f7ff ff8e 	bl	8005638 <std>
 800571c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005720:	2202      	movs	r2, #2
 8005722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005726:	2112      	movs	r1, #18
 8005728:	f7ff bf86 	b.w	8005638 <std>
 800572c:	200001c0 	.word	0x200001c0
 8005730:	20000088 	.word	0x20000088
 8005734:	080056a5 	.word	0x080056a5

08005738 <__sfp_lock_acquire>:
 8005738:	4801      	ldr	r0, [pc, #4]	; (8005740 <__sfp_lock_acquire+0x8>)
 800573a:	f000 b986 	b.w	8005a4a <__retarget_lock_acquire_recursive>
 800573e:	bf00      	nop
 8005740:	200001c9 	.word	0x200001c9

08005744 <__sfp_lock_release>:
 8005744:	4801      	ldr	r0, [pc, #4]	; (800574c <__sfp_lock_release+0x8>)
 8005746:	f000 b981 	b.w	8005a4c <__retarget_lock_release_recursive>
 800574a:	bf00      	nop
 800574c:	200001c9 	.word	0x200001c9

08005750 <__sinit>:
 8005750:	b510      	push	{r4, lr}
 8005752:	4604      	mov	r4, r0
 8005754:	f7ff fff0 	bl	8005738 <__sfp_lock_acquire>
 8005758:	6a23      	ldr	r3, [r4, #32]
 800575a:	b11b      	cbz	r3, 8005764 <__sinit+0x14>
 800575c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005760:	f7ff bff0 	b.w	8005744 <__sfp_lock_release>
 8005764:	4b04      	ldr	r3, [pc, #16]	; (8005778 <__sinit+0x28>)
 8005766:	6223      	str	r3, [r4, #32]
 8005768:	4b04      	ldr	r3, [pc, #16]	; (800577c <__sinit+0x2c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f5      	bne.n	800575c <__sinit+0xc>
 8005770:	f7ff ffc4 	bl	80056fc <global_stdio_init.part.0>
 8005774:	e7f2      	b.n	800575c <__sinit+0xc>
 8005776:	bf00      	nop
 8005778:	080056bd 	.word	0x080056bd
 800577c:	200001c0 	.word	0x200001c0

08005780 <_fwalk_sglue>:
 8005780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005784:	4607      	mov	r7, r0
 8005786:	4688      	mov	r8, r1
 8005788:	4614      	mov	r4, r2
 800578a:	2600      	movs	r6, #0
 800578c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005790:	f1b9 0901 	subs.w	r9, r9, #1
 8005794:	d505      	bpl.n	80057a2 <_fwalk_sglue+0x22>
 8005796:	6824      	ldr	r4, [r4, #0]
 8005798:	2c00      	cmp	r4, #0
 800579a:	d1f7      	bne.n	800578c <_fwalk_sglue+0xc>
 800579c:	4630      	mov	r0, r6
 800579e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057a2:	89ab      	ldrh	r3, [r5, #12]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d907      	bls.n	80057b8 <_fwalk_sglue+0x38>
 80057a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057ac:	3301      	adds	r3, #1
 80057ae:	d003      	beq.n	80057b8 <_fwalk_sglue+0x38>
 80057b0:	4629      	mov	r1, r5
 80057b2:	4638      	mov	r0, r7
 80057b4:	47c0      	blx	r8
 80057b6:	4306      	orrs	r6, r0
 80057b8:	3568      	adds	r5, #104	; 0x68
 80057ba:	e7e9      	b.n	8005790 <_fwalk_sglue+0x10>

080057bc <siscanf>:
 80057bc:	b40e      	push	{r1, r2, r3}
 80057be:	b510      	push	{r4, lr}
 80057c0:	b09f      	sub	sp, #124	; 0x7c
 80057c2:	ac21      	add	r4, sp, #132	; 0x84
 80057c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80057c8:	f854 2b04 	ldr.w	r2, [r4], #4
 80057cc:	9201      	str	r2, [sp, #4]
 80057ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 80057d2:	9004      	str	r0, [sp, #16]
 80057d4:	9008      	str	r0, [sp, #32]
 80057d6:	f7fa fcfb 	bl	80001d0 <strlen>
 80057da:	4b0c      	ldr	r3, [pc, #48]	; (800580c <siscanf+0x50>)
 80057dc:	9005      	str	r0, [sp, #20]
 80057de:	9009      	str	r0, [sp, #36]	; 0x24
 80057e0:	930d      	str	r3, [sp, #52]	; 0x34
 80057e2:	480b      	ldr	r0, [pc, #44]	; (8005810 <siscanf+0x54>)
 80057e4:	9a01      	ldr	r2, [sp, #4]
 80057e6:	6800      	ldr	r0, [r0, #0]
 80057e8:	9403      	str	r4, [sp, #12]
 80057ea:	2300      	movs	r3, #0
 80057ec:	9311      	str	r3, [sp, #68]	; 0x44
 80057ee:	9316      	str	r3, [sp, #88]	; 0x58
 80057f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80057f8:	a904      	add	r1, sp, #16
 80057fa:	4623      	mov	r3, r4
 80057fc:	f000 faa0 	bl	8005d40 <__ssvfiscanf_r>
 8005800:	b01f      	add	sp, #124	; 0x7c
 8005802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005806:	b003      	add	sp, #12
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	08005837 	.word	0x08005837
 8005810:	20000064 	.word	0x20000064

08005814 <__sread>:
 8005814:	b510      	push	{r4, lr}
 8005816:	460c      	mov	r4, r1
 8005818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800581c:	f000 f8c6 	bl	80059ac <_read_r>
 8005820:	2800      	cmp	r0, #0
 8005822:	bfab      	itete	ge
 8005824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005826:	89a3      	ldrhlt	r3, [r4, #12]
 8005828:	181b      	addge	r3, r3, r0
 800582a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800582e:	bfac      	ite	ge
 8005830:	6563      	strge	r3, [r4, #84]	; 0x54
 8005832:	81a3      	strhlt	r3, [r4, #12]
 8005834:	bd10      	pop	{r4, pc}

08005836 <__seofread>:
 8005836:	2000      	movs	r0, #0
 8005838:	4770      	bx	lr

0800583a <__swrite>:
 800583a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800583e:	461f      	mov	r7, r3
 8005840:	898b      	ldrh	r3, [r1, #12]
 8005842:	05db      	lsls	r3, r3, #23
 8005844:	4605      	mov	r5, r0
 8005846:	460c      	mov	r4, r1
 8005848:	4616      	mov	r6, r2
 800584a:	d505      	bpl.n	8005858 <__swrite+0x1e>
 800584c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005850:	2302      	movs	r3, #2
 8005852:	2200      	movs	r2, #0
 8005854:	f000 f898 	bl	8005988 <_lseek_r>
 8005858:	89a3      	ldrh	r3, [r4, #12]
 800585a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800585e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005862:	81a3      	strh	r3, [r4, #12]
 8005864:	4632      	mov	r2, r6
 8005866:	463b      	mov	r3, r7
 8005868:	4628      	mov	r0, r5
 800586a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800586e:	f000 b8af 	b.w	80059d0 <_write_r>

08005872 <__sseek>:
 8005872:	b510      	push	{r4, lr}
 8005874:	460c      	mov	r4, r1
 8005876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800587a:	f000 f885 	bl	8005988 <_lseek_r>
 800587e:	1c43      	adds	r3, r0, #1
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	bf15      	itete	ne
 8005884:	6560      	strne	r0, [r4, #84]	; 0x54
 8005886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800588a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800588e:	81a3      	strheq	r3, [r4, #12]
 8005890:	bf18      	it	ne
 8005892:	81a3      	strhne	r3, [r4, #12]
 8005894:	bd10      	pop	{r4, pc}

08005896 <__sclose>:
 8005896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589a:	f000 b865 	b.w	8005968 <_close_r>

0800589e <memset>:
 800589e:	4402      	add	r2, r0
 80058a0:	4603      	mov	r3, r0
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d100      	bne.n	80058a8 <memset+0xa>
 80058a6:	4770      	bx	lr
 80058a8:	f803 1b01 	strb.w	r1, [r3], #1
 80058ac:	e7f9      	b.n	80058a2 <memset+0x4>
	...

080058b0 <strtok>:
 80058b0:	4b16      	ldr	r3, [pc, #88]	; (800590c <strtok+0x5c>)
 80058b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058b4:	681e      	ldr	r6, [r3, #0]
 80058b6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80058b8:	4605      	mov	r5, r0
 80058ba:	b9fc      	cbnz	r4, 80058fc <strtok+0x4c>
 80058bc:	2050      	movs	r0, #80	; 0x50
 80058be:	9101      	str	r1, [sp, #4]
 80058c0:	f000 f930 	bl	8005b24 <malloc>
 80058c4:	9901      	ldr	r1, [sp, #4]
 80058c6:	6470      	str	r0, [r6, #68]	; 0x44
 80058c8:	4602      	mov	r2, r0
 80058ca:	b920      	cbnz	r0, 80058d6 <strtok+0x26>
 80058cc:	4b10      	ldr	r3, [pc, #64]	; (8005910 <strtok+0x60>)
 80058ce:	4811      	ldr	r0, [pc, #68]	; (8005914 <strtok+0x64>)
 80058d0:	215b      	movs	r1, #91	; 0x5b
 80058d2:	f000 f8bd 	bl	8005a50 <__assert_func>
 80058d6:	e9c0 4400 	strd	r4, r4, [r0]
 80058da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80058de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80058e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80058e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80058ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80058ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80058f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80058f6:	6184      	str	r4, [r0, #24]
 80058f8:	7704      	strb	r4, [r0, #28]
 80058fa:	6244      	str	r4, [r0, #36]	; 0x24
 80058fc:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80058fe:	2301      	movs	r3, #1
 8005900:	4628      	mov	r0, r5
 8005902:	b002      	add	sp, #8
 8005904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005908:	f000 b806 	b.w	8005918 <__strtok_r>
 800590c:	20000064 	.word	0x20000064
 8005910:	08007080 	.word	0x08007080
 8005914:	08007097 	.word	0x08007097

08005918 <__strtok_r>:
 8005918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591a:	b908      	cbnz	r0, 8005920 <__strtok_r+0x8>
 800591c:	6810      	ldr	r0, [r2, #0]
 800591e:	b188      	cbz	r0, 8005944 <__strtok_r+0x2c>
 8005920:	4604      	mov	r4, r0
 8005922:	4620      	mov	r0, r4
 8005924:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005928:	460f      	mov	r7, r1
 800592a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800592e:	b91e      	cbnz	r6, 8005938 <__strtok_r+0x20>
 8005930:	b965      	cbnz	r5, 800594c <__strtok_r+0x34>
 8005932:	6015      	str	r5, [r2, #0]
 8005934:	4628      	mov	r0, r5
 8005936:	e005      	b.n	8005944 <__strtok_r+0x2c>
 8005938:	42b5      	cmp	r5, r6
 800593a:	d1f6      	bne.n	800592a <__strtok_r+0x12>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f0      	bne.n	8005922 <__strtok_r+0xa>
 8005940:	6014      	str	r4, [r2, #0]
 8005942:	7003      	strb	r3, [r0, #0]
 8005944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005946:	461c      	mov	r4, r3
 8005948:	e00c      	b.n	8005964 <__strtok_r+0x4c>
 800594a:	b915      	cbnz	r5, 8005952 <__strtok_r+0x3a>
 800594c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005950:	460e      	mov	r6, r1
 8005952:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005956:	42ab      	cmp	r3, r5
 8005958:	d1f7      	bne.n	800594a <__strtok_r+0x32>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0f3      	beq.n	8005946 <__strtok_r+0x2e>
 800595e:	2300      	movs	r3, #0
 8005960:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005964:	6014      	str	r4, [r2, #0]
 8005966:	e7ed      	b.n	8005944 <__strtok_r+0x2c>

08005968 <_close_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4d06      	ldr	r5, [pc, #24]	; (8005984 <_close_r+0x1c>)
 800596c:	2300      	movs	r3, #0
 800596e:	4604      	mov	r4, r0
 8005970:	4608      	mov	r0, r1
 8005972:	602b      	str	r3, [r5, #0]
 8005974:	f7fc fb27 	bl	8001fc6 <_close>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	d102      	bne.n	8005982 <_close_r+0x1a>
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	b103      	cbz	r3, 8005982 <_close_r+0x1a>
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	bd38      	pop	{r3, r4, r5, pc}
 8005984:	200001c4 	.word	0x200001c4

08005988 <_lseek_r>:
 8005988:	b538      	push	{r3, r4, r5, lr}
 800598a:	4d07      	ldr	r5, [pc, #28]	; (80059a8 <_lseek_r+0x20>)
 800598c:	4604      	mov	r4, r0
 800598e:	4608      	mov	r0, r1
 8005990:	4611      	mov	r1, r2
 8005992:	2200      	movs	r2, #0
 8005994:	602a      	str	r2, [r5, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	f7fc fb3c 	bl	8002014 <_lseek>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d102      	bne.n	80059a6 <_lseek_r+0x1e>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	b103      	cbz	r3, 80059a6 <_lseek_r+0x1e>
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	200001c4 	.word	0x200001c4

080059ac <_read_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4d07      	ldr	r5, [pc, #28]	; (80059cc <_read_r+0x20>)
 80059b0:	4604      	mov	r4, r0
 80059b2:	4608      	mov	r0, r1
 80059b4:	4611      	mov	r1, r2
 80059b6:	2200      	movs	r2, #0
 80059b8:	602a      	str	r2, [r5, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	f7fc faca 	bl	8001f54 <_read>
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d102      	bne.n	80059ca <_read_r+0x1e>
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	b103      	cbz	r3, 80059ca <_read_r+0x1e>
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	bd38      	pop	{r3, r4, r5, pc}
 80059cc:	200001c4 	.word	0x200001c4

080059d0 <_write_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d07      	ldr	r5, [pc, #28]	; (80059f0 <_write_r+0x20>)
 80059d4:	4604      	mov	r4, r0
 80059d6:	4608      	mov	r0, r1
 80059d8:	4611      	mov	r1, r2
 80059da:	2200      	movs	r2, #0
 80059dc:	602a      	str	r2, [r5, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	f7fc fad5 	bl	8001f8e <_write>
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	d102      	bne.n	80059ee <_write_r+0x1e>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	b103      	cbz	r3, 80059ee <_write_r+0x1e>
 80059ec:	6023      	str	r3, [r4, #0]
 80059ee:	bd38      	pop	{r3, r4, r5, pc}
 80059f0:	200001c4 	.word	0x200001c4

080059f4 <__errno>:
 80059f4:	4b01      	ldr	r3, [pc, #4]	; (80059fc <__errno+0x8>)
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	20000064 	.word	0x20000064

08005a00 <__libc_init_array>:
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	4d0d      	ldr	r5, [pc, #52]	; (8005a38 <__libc_init_array+0x38>)
 8005a04:	4c0d      	ldr	r4, [pc, #52]	; (8005a3c <__libc_init_array+0x3c>)
 8005a06:	1b64      	subs	r4, r4, r5
 8005a08:	10a4      	asrs	r4, r4, #2
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	42a6      	cmp	r6, r4
 8005a0e:	d109      	bne.n	8005a24 <__libc_init_array+0x24>
 8005a10:	4d0b      	ldr	r5, [pc, #44]	; (8005a40 <__libc_init_array+0x40>)
 8005a12:	4c0c      	ldr	r4, [pc, #48]	; (8005a44 <__libc_init_array+0x44>)
 8005a14:	f001 fb14 	bl	8007040 <_init>
 8005a18:	1b64      	subs	r4, r4, r5
 8005a1a:	10a4      	asrs	r4, r4, #2
 8005a1c:	2600      	movs	r6, #0
 8005a1e:	42a6      	cmp	r6, r4
 8005a20:	d105      	bne.n	8005a2e <__libc_init_array+0x2e>
 8005a22:	bd70      	pop	{r4, r5, r6, pc}
 8005a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a28:	4798      	blx	r3
 8005a2a:	3601      	adds	r6, #1
 8005a2c:	e7ee      	b.n	8005a0c <__libc_init_array+0xc>
 8005a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a32:	4798      	blx	r3
 8005a34:	3601      	adds	r6, #1
 8005a36:	e7f2      	b.n	8005a1e <__libc_init_array+0x1e>
 8005a38:	08007284 	.word	0x08007284
 8005a3c:	08007284 	.word	0x08007284
 8005a40:	08007284 	.word	0x08007284
 8005a44:	08007288 	.word	0x08007288

08005a48 <__retarget_lock_init_recursive>:
 8005a48:	4770      	bx	lr

08005a4a <__retarget_lock_acquire_recursive>:
 8005a4a:	4770      	bx	lr

08005a4c <__retarget_lock_release_recursive>:
 8005a4c:	4770      	bx	lr
	...

08005a50 <__assert_func>:
 8005a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a52:	4614      	mov	r4, r2
 8005a54:	461a      	mov	r2, r3
 8005a56:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <__assert_func+0x2c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	68d8      	ldr	r0, [r3, #12]
 8005a5e:	b14c      	cbz	r4, 8005a74 <__assert_func+0x24>
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <__assert_func+0x30>)
 8005a62:	9100      	str	r1, [sp, #0]
 8005a64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a68:	4906      	ldr	r1, [pc, #24]	; (8005a84 <__assert_func+0x34>)
 8005a6a:	462b      	mov	r3, r5
 8005a6c:	f000 fcdc 	bl	8006428 <fiprintf>
 8005a70:	f000 fd7e 	bl	8006570 <abort>
 8005a74:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <__assert_func+0x38>)
 8005a76:	461c      	mov	r4, r3
 8005a78:	e7f3      	b.n	8005a62 <__assert_func+0x12>
 8005a7a:	bf00      	nop
 8005a7c:	20000064 	.word	0x20000064
 8005a80:	080070f1 	.word	0x080070f1
 8005a84:	080070fe 	.word	0x080070fe
 8005a88:	0800712c 	.word	0x0800712c

08005a8c <_free_r>:
 8005a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a8e:	2900      	cmp	r1, #0
 8005a90:	d044      	beq.n	8005b1c <_free_r+0x90>
 8005a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a96:	9001      	str	r0, [sp, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8005a9e:	bfb8      	it	lt
 8005aa0:	18e4      	addlt	r4, r4, r3
 8005aa2:	f000 f8e7 	bl	8005c74 <__malloc_lock>
 8005aa6:	4a1e      	ldr	r2, [pc, #120]	; (8005b20 <_free_r+0x94>)
 8005aa8:	9801      	ldr	r0, [sp, #4]
 8005aaa:	6813      	ldr	r3, [r2, #0]
 8005aac:	b933      	cbnz	r3, 8005abc <_free_r+0x30>
 8005aae:	6063      	str	r3, [r4, #4]
 8005ab0:	6014      	str	r4, [r2, #0]
 8005ab2:	b003      	add	sp, #12
 8005ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ab8:	f000 b8e2 	b.w	8005c80 <__malloc_unlock>
 8005abc:	42a3      	cmp	r3, r4
 8005abe:	d908      	bls.n	8005ad2 <_free_r+0x46>
 8005ac0:	6825      	ldr	r5, [r4, #0]
 8005ac2:	1961      	adds	r1, r4, r5
 8005ac4:	428b      	cmp	r3, r1
 8005ac6:	bf01      	itttt	eq
 8005ac8:	6819      	ldreq	r1, [r3, #0]
 8005aca:	685b      	ldreq	r3, [r3, #4]
 8005acc:	1949      	addeq	r1, r1, r5
 8005ace:	6021      	streq	r1, [r4, #0]
 8005ad0:	e7ed      	b.n	8005aae <_free_r+0x22>
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	b10b      	cbz	r3, 8005adc <_free_r+0x50>
 8005ad8:	42a3      	cmp	r3, r4
 8005ada:	d9fa      	bls.n	8005ad2 <_free_r+0x46>
 8005adc:	6811      	ldr	r1, [r2, #0]
 8005ade:	1855      	adds	r5, r2, r1
 8005ae0:	42a5      	cmp	r5, r4
 8005ae2:	d10b      	bne.n	8005afc <_free_r+0x70>
 8005ae4:	6824      	ldr	r4, [r4, #0]
 8005ae6:	4421      	add	r1, r4
 8005ae8:	1854      	adds	r4, r2, r1
 8005aea:	42a3      	cmp	r3, r4
 8005aec:	6011      	str	r1, [r2, #0]
 8005aee:	d1e0      	bne.n	8005ab2 <_free_r+0x26>
 8005af0:	681c      	ldr	r4, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	6053      	str	r3, [r2, #4]
 8005af6:	440c      	add	r4, r1
 8005af8:	6014      	str	r4, [r2, #0]
 8005afa:	e7da      	b.n	8005ab2 <_free_r+0x26>
 8005afc:	d902      	bls.n	8005b04 <_free_r+0x78>
 8005afe:	230c      	movs	r3, #12
 8005b00:	6003      	str	r3, [r0, #0]
 8005b02:	e7d6      	b.n	8005ab2 <_free_r+0x26>
 8005b04:	6825      	ldr	r5, [r4, #0]
 8005b06:	1961      	adds	r1, r4, r5
 8005b08:	428b      	cmp	r3, r1
 8005b0a:	bf04      	itt	eq
 8005b0c:	6819      	ldreq	r1, [r3, #0]
 8005b0e:	685b      	ldreq	r3, [r3, #4]
 8005b10:	6063      	str	r3, [r4, #4]
 8005b12:	bf04      	itt	eq
 8005b14:	1949      	addeq	r1, r1, r5
 8005b16:	6021      	streq	r1, [r4, #0]
 8005b18:	6054      	str	r4, [r2, #4]
 8005b1a:	e7ca      	b.n	8005ab2 <_free_r+0x26>
 8005b1c:	b003      	add	sp, #12
 8005b1e:	bd30      	pop	{r4, r5, pc}
 8005b20:	200001cc 	.word	0x200001cc

08005b24 <malloc>:
 8005b24:	4b02      	ldr	r3, [pc, #8]	; (8005b30 <malloc+0xc>)
 8005b26:	4601      	mov	r1, r0
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	f000 b823 	b.w	8005b74 <_malloc_r>
 8005b2e:	bf00      	nop
 8005b30:	20000064 	.word	0x20000064

08005b34 <sbrk_aligned>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	4e0e      	ldr	r6, [pc, #56]	; (8005b70 <sbrk_aligned+0x3c>)
 8005b38:	460c      	mov	r4, r1
 8005b3a:	6831      	ldr	r1, [r6, #0]
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	b911      	cbnz	r1, 8005b46 <sbrk_aligned+0x12>
 8005b40:	f000 fcf8 	bl	8006534 <_sbrk_r>
 8005b44:	6030      	str	r0, [r6, #0]
 8005b46:	4621      	mov	r1, r4
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 fcf3 	bl	8006534 <_sbrk_r>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	d00a      	beq.n	8005b68 <sbrk_aligned+0x34>
 8005b52:	1cc4      	adds	r4, r0, #3
 8005b54:	f024 0403 	bic.w	r4, r4, #3
 8005b58:	42a0      	cmp	r0, r4
 8005b5a:	d007      	beq.n	8005b6c <sbrk_aligned+0x38>
 8005b5c:	1a21      	subs	r1, r4, r0
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f000 fce8 	bl	8006534 <_sbrk_r>
 8005b64:	3001      	adds	r0, #1
 8005b66:	d101      	bne.n	8005b6c <sbrk_aligned+0x38>
 8005b68:	f04f 34ff 	mov.w	r4, #4294967295
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	200001d0 	.word	0x200001d0

08005b74 <_malloc_r>:
 8005b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b78:	1ccd      	adds	r5, r1, #3
 8005b7a:	f025 0503 	bic.w	r5, r5, #3
 8005b7e:	3508      	adds	r5, #8
 8005b80:	2d0c      	cmp	r5, #12
 8005b82:	bf38      	it	cc
 8005b84:	250c      	movcc	r5, #12
 8005b86:	2d00      	cmp	r5, #0
 8005b88:	4607      	mov	r7, r0
 8005b8a:	db01      	blt.n	8005b90 <_malloc_r+0x1c>
 8005b8c:	42a9      	cmp	r1, r5
 8005b8e:	d905      	bls.n	8005b9c <_malloc_r+0x28>
 8005b90:	230c      	movs	r3, #12
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	2600      	movs	r6, #0
 8005b96:	4630      	mov	r0, r6
 8005b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c70 <_malloc_r+0xfc>
 8005ba0:	f000 f868 	bl	8005c74 <__malloc_lock>
 8005ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ba8:	461c      	mov	r4, r3
 8005baa:	bb5c      	cbnz	r4, 8005c04 <_malloc_r+0x90>
 8005bac:	4629      	mov	r1, r5
 8005bae:	4638      	mov	r0, r7
 8005bb0:	f7ff ffc0 	bl	8005b34 <sbrk_aligned>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	d155      	bne.n	8005c66 <_malloc_r+0xf2>
 8005bba:	f8d8 4000 	ldr.w	r4, [r8]
 8005bbe:	4626      	mov	r6, r4
 8005bc0:	2e00      	cmp	r6, #0
 8005bc2:	d145      	bne.n	8005c50 <_malloc_r+0xdc>
 8005bc4:	2c00      	cmp	r4, #0
 8005bc6:	d048      	beq.n	8005c5a <_malloc_r+0xe6>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4638      	mov	r0, r7
 8005bce:	eb04 0903 	add.w	r9, r4, r3
 8005bd2:	f000 fcaf 	bl	8006534 <_sbrk_r>
 8005bd6:	4581      	cmp	r9, r0
 8005bd8:	d13f      	bne.n	8005c5a <_malloc_r+0xe6>
 8005bda:	6821      	ldr	r1, [r4, #0]
 8005bdc:	1a6d      	subs	r5, r5, r1
 8005bde:	4629      	mov	r1, r5
 8005be0:	4638      	mov	r0, r7
 8005be2:	f7ff ffa7 	bl	8005b34 <sbrk_aligned>
 8005be6:	3001      	adds	r0, #1
 8005be8:	d037      	beq.n	8005c5a <_malloc_r+0xe6>
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	442b      	add	r3, r5
 8005bee:	6023      	str	r3, [r4, #0]
 8005bf0:	f8d8 3000 	ldr.w	r3, [r8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d038      	beq.n	8005c6a <_malloc_r+0xf6>
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	42a2      	cmp	r2, r4
 8005bfc:	d12b      	bne.n	8005c56 <_malloc_r+0xe2>
 8005bfe:	2200      	movs	r2, #0
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	e00f      	b.n	8005c24 <_malloc_r+0xb0>
 8005c04:	6822      	ldr	r2, [r4, #0]
 8005c06:	1b52      	subs	r2, r2, r5
 8005c08:	d41f      	bmi.n	8005c4a <_malloc_r+0xd6>
 8005c0a:	2a0b      	cmp	r2, #11
 8005c0c:	d917      	bls.n	8005c3e <_malloc_r+0xca>
 8005c0e:	1961      	adds	r1, r4, r5
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	6025      	str	r5, [r4, #0]
 8005c14:	bf18      	it	ne
 8005c16:	6059      	strne	r1, [r3, #4]
 8005c18:	6863      	ldr	r3, [r4, #4]
 8005c1a:	bf08      	it	eq
 8005c1c:	f8c8 1000 	streq.w	r1, [r8]
 8005c20:	5162      	str	r2, [r4, r5]
 8005c22:	604b      	str	r3, [r1, #4]
 8005c24:	4638      	mov	r0, r7
 8005c26:	f104 060b 	add.w	r6, r4, #11
 8005c2a:	f000 f829 	bl	8005c80 <__malloc_unlock>
 8005c2e:	f026 0607 	bic.w	r6, r6, #7
 8005c32:	1d23      	adds	r3, r4, #4
 8005c34:	1af2      	subs	r2, r6, r3
 8005c36:	d0ae      	beq.n	8005b96 <_malloc_r+0x22>
 8005c38:	1b9b      	subs	r3, r3, r6
 8005c3a:	50a3      	str	r3, [r4, r2]
 8005c3c:	e7ab      	b.n	8005b96 <_malloc_r+0x22>
 8005c3e:	42a3      	cmp	r3, r4
 8005c40:	6862      	ldr	r2, [r4, #4]
 8005c42:	d1dd      	bne.n	8005c00 <_malloc_r+0x8c>
 8005c44:	f8c8 2000 	str.w	r2, [r8]
 8005c48:	e7ec      	b.n	8005c24 <_malloc_r+0xb0>
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	6864      	ldr	r4, [r4, #4]
 8005c4e:	e7ac      	b.n	8005baa <_malloc_r+0x36>
 8005c50:	4634      	mov	r4, r6
 8005c52:	6876      	ldr	r6, [r6, #4]
 8005c54:	e7b4      	b.n	8005bc0 <_malloc_r+0x4c>
 8005c56:	4613      	mov	r3, r2
 8005c58:	e7cc      	b.n	8005bf4 <_malloc_r+0x80>
 8005c5a:	230c      	movs	r3, #12
 8005c5c:	603b      	str	r3, [r7, #0]
 8005c5e:	4638      	mov	r0, r7
 8005c60:	f000 f80e 	bl	8005c80 <__malloc_unlock>
 8005c64:	e797      	b.n	8005b96 <_malloc_r+0x22>
 8005c66:	6025      	str	r5, [r4, #0]
 8005c68:	e7dc      	b.n	8005c24 <_malloc_r+0xb0>
 8005c6a:	605b      	str	r3, [r3, #4]
 8005c6c:	deff      	udf	#255	; 0xff
 8005c6e:	bf00      	nop
 8005c70:	200001cc 	.word	0x200001cc

08005c74 <__malloc_lock>:
 8005c74:	4801      	ldr	r0, [pc, #4]	; (8005c7c <__malloc_lock+0x8>)
 8005c76:	f7ff bee8 	b.w	8005a4a <__retarget_lock_acquire_recursive>
 8005c7a:	bf00      	nop
 8005c7c:	200001c8 	.word	0x200001c8

08005c80 <__malloc_unlock>:
 8005c80:	4801      	ldr	r0, [pc, #4]	; (8005c88 <__malloc_unlock+0x8>)
 8005c82:	f7ff bee3 	b.w	8005a4c <__retarget_lock_release_recursive>
 8005c86:	bf00      	nop
 8005c88:	200001c8 	.word	0x200001c8

08005c8c <_sungetc_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	1c4b      	adds	r3, r1, #1
 8005c90:	4614      	mov	r4, r2
 8005c92:	d103      	bne.n	8005c9c <_sungetc_r+0x10>
 8005c94:	f04f 35ff 	mov.w	r5, #4294967295
 8005c98:	4628      	mov	r0, r5
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
 8005c9c:	8993      	ldrh	r3, [r2, #12]
 8005c9e:	f023 0320 	bic.w	r3, r3, #32
 8005ca2:	8193      	strh	r3, [r2, #12]
 8005ca4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ca6:	6852      	ldr	r2, [r2, #4]
 8005ca8:	b2cd      	uxtb	r5, r1
 8005caa:	b18b      	cbz	r3, 8005cd0 <_sungetc_r+0x44>
 8005cac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	dd08      	ble.n	8005cc4 <_sungetc_r+0x38>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	1e5a      	subs	r2, r3, #1
 8005cb6:	6022      	str	r2, [r4, #0]
 8005cb8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005cbc:	6863      	ldr	r3, [r4, #4]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	6063      	str	r3, [r4, #4]
 8005cc2:	e7e9      	b.n	8005c98 <_sungetc_r+0xc>
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	f000 fbfa 	bl	80064be <__submore>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d0f1      	beq.n	8005cb2 <_sungetc_r+0x26>
 8005cce:	e7e1      	b.n	8005c94 <_sungetc_r+0x8>
 8005cd0:	6921      	ldr	r1, [r4, #16]
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	b151      	cbz	r1, 8005cec <_sungetc_r+0x60>
 8005cd6:	4299      	cmp	r1, r3
 8005cd8:	d208      	bcs.n	8005cec <_sungetc_r+0x60>
 8005cda:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005cde:	42a9      	cmp	r1, r5
 8005ce0:	d104      	bne.n	8005cec <_sungetc_r+0x60>
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	3201      	adds	r2, #1
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	6062      	str	r2, [r4, #4]
 8005cea:	e7d5      	b.n	8005c98 <_sungetc_r+0xc>
 8005cec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cf4:	6363      	str	r3, [r4, #52]	; 0x34
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	63a3      	str	r3, [r4, #56]	; 0x38
 8005cfa:	4623      	mov	r3, r4
 8005cfc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	2301      	movs	r3, #1
 8005d04:	e7dc      	b.n	8005cc0 <_sungetc_r+0x34>

08005d06 <__ssrefill_r>:
 8005d06:	b510      	push	{r4, lr}
 8005d08:	460c      	mov	r4, r1
 8005d0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005d0c:	b169      	cbz	r1, 8005d2a <__ssrefill_r+0x24>
 8005d0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d12:	4299      	cmp	r1, r3
 8005d14:	d001      	beq.n	8005d1a <__ssrefill_r+0x14>
 8005d16:	f7ff feb9 	bl	8005a8c <_free_r>
 8005d1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d1c:	6063      	str	r3, [r4, #4]
 8005d1e:	2000      	movs	r0, #0
 8005d20:	6360      	str	r0, [r4, #52]	; 0x34
 8005d22:	b113      	cbz	r3, 8005d2a <__ssrefill_r+0x24>
 8005d24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d26:	6023      	str	r3, [r4, #0]
 8005d28:	bd10      	pop	{r4, pc}
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	6063      	str	r3, [r4, #4]
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	f043 0320 	orr.w	r3, r3, #32
 8005d38:	81a3      	strh	r3, [r4, #12]
 8005d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3e:	e7f3      	b.n	8005d28 <__ssrefill_r+0x22>

08005d40 <__ssvfiscanf_r>:
 8005d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d44:	460c      	mov	r4, r1
 8005d46:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005d50:	49a6      	ldr	r1, [pc, #664]	; (8005fec <__ssvfiscanf_r+0x2ac>)
 8005d52:	91a0      	str	r1, [sp, #640]	; 0x280
 8005d54:	f10d 0804 	add.w	r8, sp, #4
 8005d58:	49a5      	ldr	r1, [pc, #660]	; (8005ff0 <__ssvfiscanf_r+0x2b0>)
 8005d5a:	4fa6      	ldr	r7, [pc, #664]	; (8005ff4 <__ssvfiscanf_r+0x2b4>)
 8005d5c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005ff8 <__ssvfiscanf_r+0x2b8>
 8005d60:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005d64:	4606      	mov	r6, r0
 8005d66:	91a1      	str	r1, [sp, #644]	; 0x284
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	7813      	ldrb	r3, [r2, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 815a 	beq.w	8006026 <__ssvfiscanf_r+0x2e6>
 8005d72:	5cf9      	ldrb	r1, [r7, r3]
 8005d74:	f011 0108 	ands.w	r1, r1, #8
 8005d78:	f102 0501 	add.w	r5, r2, #1
 8005d7c:	d019      	beq.n	8005db2 <__ssvfiscanf_r+0x72>
 8005d7e:	6863      	ldr	r3, [r4, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	dd0f      	ble.n	8005da4 <__ssvfiscanf_r+0x64>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	781a      	ldrb	r2, [r3, #0]
 8005d88:	5cba      	ldrb	r2, [r7, r2]
 8005d8a:	0712      	lsls	r2, r2, #28
 8005d8c:	d401      	bmi.n	8005d92 <__ssvfiscanf_r+0x52>
 8005d8e:	462a      	mov	r2, r5
 8005d90:	e7eb      	b.n	8005d6a <__ssvfiscanf_r+0x2a>
 8005d92:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005d94:	3201      	adds	r2, #1
 8005d96:	9245      	str	r2, [sp, #276]	; 0x114
 8005d98:	6862      	ldr	r2, [r4, #4]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	3a01      	subs	r2, #1
 8005d9e:	6062      	str	r2, [r4, #4]
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	e7ec      	b.n	8005d7e <__ssvfiscanf_r+0x3e>
 8005da4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005da6:	4621      	mov	r1, r4
 8005da8:	4630      	mov	r0, r6
 8005daa:	4798      	blx	r3
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d0e9      	beq.n	8005d84 <__ssvfiscanf_r+0x44>
 8005db0:	e7ed      	b.n	8005d8e <__ssvfiscanf_r+0x4e>
 8005db2:	2b25      	cmp	r3, #37	; 0x25
 8005db4:	d012      	beq.n	8005ddc <__ssvfiscanf_r+0x9c>
 8005db6:	469a      	mov	sl, r3
 8005db8:	6863      	ldr	r3, [r4, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f340 8091 	ble.w	8005ee2 <__ssvfiscanf_r+0x1a2>
 8005dc0:	6822      	ldr	r2, [r4, #0]
 8005dc2:	7813      	ldrb	r3, [r2, #0]
 8005dc4:	4553      	cmp	r3, sl
 8005dc6:	f040 812e 	bne.w	8006026 <__ssvfiscanf_r+0x2e6>
 8005dca:	6863      	ldr	r3, [r4, #4]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	6063      	str	r3, [r4, #4]
 8005dd0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005dd2:	3201      	adds	r2, #1
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	6022      	str	r2, [r4, #0]
 8005dd8:	9345      	str	r3, [sp, #276]	; 0x114
 8005dda:	e7d8      	b.n	8005d8e <__ssvfiscanf_r+0x4e>
 8005ddc:	9141      	str	r1, [sp, #260]	; 0x104
 8005dde:	9143      	str	r1, [sp, #268]	; 0x10c
 8005de0:	7853      	ldrb	r3, [r2, #1]
 8005de2:	2b2a      	cmp	r3, #42	; 0x2a
 8005de4:	bf02      	ittt	eq
 8005de6:	2310      	moveq	r3, #16
 8005de8:	1c95      	addeq	r5, r2, #2
 8005dea:	9341      	streq	r3, [sp, #260]	; 0x104
 8005dec:	220a      	movs	r2, #10
 8005dee:	46aa      	mov	sl, r5
 8005df0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005df4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005df8:	2b09      	cmp	r3, #9
 8005dfa:	d91c      	bls.n	8005e36 <__ssvfiscanf_r+0xf6>
 8005dfc:	487e      	ldr	r0, [pc, #504]	; (8005ff8 <__ssvfiscanf_r+0x2b8>)
 8005dfe:	2203      	movs	r2, #3
 8005e00:	f7fa f9ee 	bl	80001e0 <memchr>
 8005e04:	b138      	cbz	r0, 8005e16 <__ssvfiscanf_r+0xd6>
 8005e06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005e08:	eba0 0009 	sub.w	r0, r0, r9
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	4083      	lsls	r3, r0
 8005e10:	4313      	orrs	r3, r2
 8005e12:	9341      	str	r3, [sp, #260]	; 0x104
 8005e14:	4655      	mov	r5, sl
 8005e16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e1a:	2b78      	cmp	r3, #120	; 0x78
 8005e1c:	d806      	bhi.n	8005e2c <__ssvfiscanf_r+0xec>
 8005e1e:	2b57      	cmp	r3, #87	; 0x57
 8005e20:	d810      	bhi.n	8005e44 <__ssvfiscanf_r+0x104>
 8005e22:	2b25      	cmp	r3, #37	; 0x25
 8005e24:	d0c7      	beq.n	8005db6 <__ssvfiscanf_r+0x76>
 8005e26:	d857      	bhi.n	8005ed8 <__ssvfiscanf_r+0x198>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d065      	beq.n	8005ef8 <__ssvfiscanf_r+0x1b8>
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005e30:	230a      	movs	r3, #10
 8005e32:	9342      	str	r3, [sp, #264]	; 0x108
 8005e34:	e076      	b.n	8005f24 <__ssvfiscanf_r+0x1e4>
 8005e36:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e38:	fb02 1103 	mla	r1, r2, r3, r1
 8005e3c:	3930      	subs	r1, #48	; 0x30
 8005e3e:	9143      	str	r1, [sp, #268]	; 0x10c
 8005e40:	4655      	mov	r5, sl
 8005e42:	e7d4      	b.n	8005dee <__ssvfiscanf_r+0xae>
 8005e44:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005e48:	2a20      	cmp	r2, #32
 8005e4a:	d8ef      	bhi.n	8005e2c <__ssvfiscanf_r+0xec>
 8005e4c:	a101      	add	r1, pc, #4	; (adr r1, 8005e54 <__ssvfiscanf_r+0x114>)
 8005e4e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005f07 	.word	0x08005f07
 8005e58:	08005e2d 	.word	0x08005e2d
 8005e5c:	08005e2d 	.word	0x08005e2d
 8005e60:	08005f65 	.word	0x08005f65
 8005e64:	08005e2d 	.word	0x08005e2d
 8005e68:	08005e2d 	.word	0x08005e2d
 8005e6c:	08005e2d 	.word	0x08005e2d
 8005e70:	08005e2d 	.word	0x08005e2d
 8005e74:	08005e2d 	.word	0x08005e2d
 8005e78:	08005e2d 	.word	0x08005e2d
 8005e7c:	08005e2d 	.word	0x08005e2d
 8005e80:	08005f7b 	.word	0x08005f7b
 8005e84:	08005f61 	.word	0x08005f61
 8005e88:	08005edf 	.word	0x08005edf
 8005e8c:	08005edf 	.word	0x08005edf
 8005e90:	08005edf 	.word	0x08005edf
 8005e94:	08005e2d 	.word	0x08005e2d
 8005e98:	08005f1d 	.word	0x08005f1d
 8005e9c:	08005e2d 	.word	0x08005e2d
 8005ea0:	08005e2d 	.word	0x08005e2d
 8005ea4:	08005e2d 	.word	0x08005e2d
 8005ea8:	08005e2d 	.word	0x08005e2d
 8005eac:	08005f8b 	.word	0x08005f8b
 8005eb0:	08005f59 	.word	0x08005f59
 8005eb4:	08005eff 	.word	0x08005eff
 8005eb8:	08005e2d 	.word	0x08005e2d
 8005ebc:	08005e2d 	.word	0x08005e2d
 8005ec0:	08005f87 	.word	0x08005f87
 8005ec4:	08005e2d 	.word	0x08005e2d
 8005ec8:	08005f61 	.word	0x08005f61
 8005ecc:	08005e2d 	.word	0x08005e2d
 8005ed0:	08005e2d 	.word	0x08005e2d
 8005ed4:	08005f07 	.word	0x08005f07
 8005ed8:	3b45      	subs	r3, #69	; 0x45
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d8a6      	bhi.n	8005e2c <__ssvfiscanf_r+0xec>
 8005ede:	2305      	movs	r3, #5
 8005ee0:	e01f      	b.n	8005f22 <__ssvfiscanf_r+0x1e2>
 8005ee2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	4798      	blx	r3
 8005eea:	2800      	cmp	r0, #0
 8005eec:	f43f af68 	beq.w	8005dc0 <__ssvfiscanf_r+0x80>
 8005ef0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	f040 808d 	bne.w	8006012 <__ssvfiscanf_r+0x2d2>
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	e08f      	b.n	800601e <__ssvfiscanf_r+0x2de>
 8005efe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005f00:	f042 0220 	orr.w	r2, r2, #32
 8005f04:	9241      	str	r2, [sp, #260]	; 0x104
 8005f06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f0c:	9241      	str	r2, [sp, #260]	; 0x104
 8005f0e:	2210      	movs	r2, #16
 8005f10:	2b6f      	cmp	r3, #111	; 0x6f
 8005f12:	9242      	str	r2, [sp, #264]	; 0x108
 8005f14:	bf34      	ite	cc
 8005f16:	2303      	movcc	r3, #3
 8005f18:	2304      	movcs	r3, #4
 8005f1a:	e002      	b.n	8005f22 <__ssvfiscanf_r+0x1e2>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9342      	str	r3, [sp, #264]	; 0x108
 8005f20:	2303      	movs	r3, #3
 8005f22:	9347      	str	r3, [sp, #284]	; 0x11c
 8005f24:	6863      	ldr	r3, [r4, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	dd3d      	ble.n	8005fa6 <__ssvfiscanf_r+0x266>
 8005f2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f2c:	0659      	lsls	r1, r3, #25
 8005f2e:	d404      	bmi.n	8005f3a <__ssvfiscanf_r+0x1fa>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	781a      	ldrb	r2, [r3, #0]
 8005f34:	5cba      	ldrb	r2, [r7, r2]
 8005f36:	0712      	lsls	r2, r2, #28
 8005f38:	d43c      	bmi.n	8005fb4 <__ssvfiscanf_r+0x274>
 8005f3a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	dc4b      	bgt.n	8005fd8 <__ssvfiscanf_r+0x298>
 8005f40:	466b      	mov	r3, sp
 8005f42:	4622      	mov	r2, r4
 8005f44:	a941      	add	r1, sp, #260	; 0x104
 8005f46:	4630      	mov	r0, r6
 8005f48:	f000 f872 	bl	8006030 <_scanf_chars>
 8005f4c:	2801      	cmp	r0, #1
 8005f4e:	d06a      	beq.n	8006026 <__ssvfiscanf_r+0x2e6>
 8005f50:	2802      	cmp	r0, #2
 8005f52:	f47f af1c 	bne.w	8005d8e <__ssvfiscanf_r+0x4e>
 8005f56:	e7cb      	b.n	8005ef0 <__ssvfiscanf_r+0x1b0>
 8005f58:	2308      	movs	r3, #8
 8005f5a:	9342      	str	r3, [sp, #264]	; 0x108
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	e7e0      	b.n	8005f22 <__ssvfiscanf_r+0x1e2>
 8005f60:	220a      	movs	r2, #10
 8005f62:	e7d5      	b.n	8005f10 <__ssvfiscanf_r+0x1d0>
 8005f64:	4629      	mov	r1, r5
 8005f66:	4640      	mov	r0, r8
 8005f68:	f000 fa70 	bl	800644c <__sccl>
 8005f6c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f72:	9341      	str	r3, [sp, #260]	; 0x104
 8005f74:	4605      	mov	r5, r0
 8005f76:	2301      	movs	r3, #1
 8005f78:	e7d3      	b.n	8005f22 <__ssvfiscanf_r+0x1e2>
 8005f7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f80:	9341      	str	r3, [sp, #260]	; 0x104
 8005f82:	2300      	movs	r3, #0
 8005f84:	e7cd      	b.n	8005f22 <__ssvfiscanf_r+0x1e2>
 8005f86:	2302      	movs	r3, #2
 8005f88:	e7cb      	b.n	8005f22 <__ssvfiscanf_r+0x1e2>
 8005f8a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005f8c:	06c3      	lsls	r3, r0, #27
 8005f8e:	f53f aefe 	bmi.w	8005d8e <__ssvfiscanf_r+0x4e>
 8005f92:	9b00      	ldr	r3, [sp, #0]
 8005f94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005f96:	1d19      	adds	r1, r3, #4
 8005f98:	9100      	str	r1, [sp, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	07c0      	lsls	r0, r0, #31
 8005f9e:	bf4c      	ite	mi
 8005fa0:	801a      	strhmi	r2, [r3, #0]
 8005fa2:	601a      	strpl	r2, [r3, #0]
 8005fa4:	e6f3      	b.n	8005d8e <__ssvfiscanf_r+0x4e>
 8005fa6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005fa8:	4621      	mov	r1, r4
 8005faa:	4630      	mov	r0, r6
 8005fac:	4798      	blx	r3
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d0bb      	beq.n	8005f2a <__ssvfiscanf_r+0x1ea>
 8005fb2:	e79d      	b.n	8005ef0 <__ssvfiscanf_r+0x1b0>
 8005fb4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005fb6:	3201      	adds	r2, #1
 8005fb8:	9245      	str	r2, [sp, #276]	; 0x114
 8005fba:	6862      	ldr	r2, [r4, #4]
 8005fbc:	3a01      	subs	r2, #1
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	6062      	str	r2, [r4, #4]
 8005fc2:	dd02      	ble.n	8005fca <__ssvfiscanf_r+0x28a>
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	6023      	str	r3, [r4, #0]
 8005fc8:	e7b2      	b.n	8005f30 <__ssvfiscanf_r+0x1f0>
 8005fca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005fcc:	4621      	mov	r1, r4
 8005fce:	4630      	mov	r0, r6
 8005fd0:	4798      	blx	r3
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d0ac      	beq.n	8005f30 <__ssvfiscanf_r+0x1f0>
 8005fd6:	e78b      	b.n	8005ef0 <__ssvfiscanf_r+0x1b0>
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	dc0f      	bgt.n	8005ffc <__ssvfiscanf_r+0x2bc>
 8005fdc:	466b      	mov	r3, sp
 8005fde:	4622      	mov	r2, r4
 8005fe0:	a941      	add	r1, sp, #260	; 0x104
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f000 f87e 	bl	80060e4 <_scanf_i>
 8005fe8:	e7b0      	b.n	8005f4c <__ssvfiscanf_r+0x20c>
 8005fea:	bf00      	nop
 8005fec:	08005c8d 	.word	0x08005c8d
 8005ff0:	08005d07 	.word	0x08005d07
 8005ff4:	0800714d 	.word	0x0800714d
 8005ff8:	0800712d 	.word	0x0800712d
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	; (800602c <__ssvfiscanf_r+0x2ec>)
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f43f aec5 	beq.w	8005d8e <__ssvfiscanf_r+0x4e>
 8006004:	466b      	mov	r3, sp
 8006006:	4622      	mov	r2, r4
 8006008:	a941      	add	r1, sp, #260	; 0x104
 800600a:	4630      	mov	r0, r6
 800600c:	f3af 8000 	nop.w
 8006010:	e79c      	b.n	8005f4c <__ssvfiscanf_r+0x20c>
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006018:	bf18      	it	ne
 800601a:	f04f 30ff 	movne.w	r0, #4294967295
 800601e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006026:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006028:	e7f9      	b.n	800601e <__ssvfiscanf_r+0x2de>
 800602a:	bf00      	nop
 800602c:	00000000 	.word	0x00000000

08006030 <_scanf_chars>:
 8006030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006034:	4615      	mov	r5, r2
 8006036:	688a      	ldr	r2, [r1, #8]
 8006038:	4680      	mov	r8, r0
 800603a:	460c      	mov	r4, r1
 800603c:	b932      	cbnz	r2, 800604c <_scanf_chars+0x1c>
 800603e:	698a      	ldr	r2, [r1, #24]
 8006040:	2a00      	cmp	r2, #0
 8006042:	bf0c      	ite	eq
 8006044:	2201      	moveq	r2, #1
 8006046:	f04f 32ff 	movne.w	r2, #4294967295
 800604a:	608a      	str	r2, [r1, #8]
 800604c:	6822      	ldr	r2, [r4, #0]
 800604e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80060e0 <_scanf_chars+0xb0>
 8006052:	06d1      	lsls	r1, r2, #27
 8006054:	bf5f      	itttt	pl
 8006056:	681a      	ldrpl	r2, [r3, #0]
 8006058:	1d11      	addpl	r1, r2, #4
 800605a:	6019      	strpl	r1, [r3, #0]
 800605c:	6816      	ldrpl	r6, [r2, #0]
 800605e:	2700      	movs	r7, #0
 8006060:	69a0      	ldr	r0, [r4, #24]
 8006062:	b188      	cbz	r0, 8006088 <_scanf_chars+0x58>
 8006064:	2801      	cmp	r0, #1
 8006066:	d107      	bne.n	8006078 <_scanf_chars+0x48>
 8006068:	682a      	ldr	r2, [r5, #0]
 800606a:	7811      	ldrb	r1, [r2, #0]
 800606c:	6962      	ldr	r2, [r4, #20]
 800606e:	5c52      	ldrb	r2, [r2, r1]
 8006070:	b952      	cbnz	r2, 8006088 <_scanf_chars+0x58>
 8006072:	2f00      	cmp	r7, #0
 8006074:	d031      	beq.n	80060da <_scanf_chars+0xaa>
 8006076:	e022      	b.n	80060be <_scanf_chars+0x8e>
 8006078:	2802      	cmp	r0, #2
 800607a:	d120      	bne.n	80060be <_scanf_chars+0x8e>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006084:	071b      	lsls	r3, r3, #28
 8006086:	d41a      	bmi.n	80060be <_scanf_chars+0x8e>
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	06da      	lsls	r2, r3, #27
 800608c:	bf5e      	ittt	pl
 800608e:	682b      	ldrpl	r3, [r5, #0]
 8006090:	781b      	ldrbpl	r3, [r3, #0]
 8006092:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006096:	682a      	ldr	r2, [r5, #0]
 8006098:	686b      	ldr	r3, [r5, #4]
 800609a:	3201      	adds	r2, #1
 800609c:	602a      	str	r2, [r5, #0]
 800609e:	68a2      	ldr	r2, [r4, #8]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	3a01      	subs	r2, #1
 80060a4:	606b      	str	r3, [r5, #4]
 80060a6:	3701      	adds	r7, #1
 80060a8:	60a2      	str	r2, [r4, #8]
 80060aa:	b142      	cbz	r2, 80060be <_scanf_chars+0x8e>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	dcd7      	bgt.n	8006060 <_scanf_chars+0x30>
 80060b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80060b4:	4629      	mov	r1, r5
 80060b6:	4640      	mov	r0, r8
 80060b8:	4798      	blx	r3
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d0d0      	beq.n	8006060 <_scanf_chars+0x30>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	f013 0310 	ands.w	r3, r3, #16
 80060c4:	d105      	bne.n	80060d2 <_scanf_chars+0xa2>
 80060c6:	68e2      	ldr	r2, [r4, #12]
 80060c8:	3201      	adds	r2, #1
 80060ca:	60e2      	str	r2, [r4, #12]
 80060cc:	69a2      	ldr	r2, [r4, #24]
 80060ce:	b102      	cbz	r2, 80060d2 <_scanf_chars+0xa2>
 80060d0:	7033      	strb	r3, [r6, #0]
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	443b      	add	r3, r7
 80060d6:	6123      	str	r3, [r4, #16]
 80060d8:	2000      	movs	r0, #0
 80060da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060de:	bf00      	nop
 80060e0:	0800714d 	.word	0x0800714d

080060e4 <_scanf_i>:
 80060e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e8:	4698      	mov	r8, r3
 80060ea:	4b74      	ldr	r3, [pc, #464]	; (80062bc <_scanf_i+0x1d8>)
 80060ec:	460c      	mov	r4, r1
 80060ee:	4682      	mov	sl, r0
 80060f0:	4616      	mov	r6, r2
 80060f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060f6:	b087      	sub	sp, #28
 80060f8:	ab03      	add	r3, sp, #12
 80060fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80060fe:	4b70      	ldr	r3, [pc, #448]	; (80062c0 <_scanf_i+0x1dc>)
 8006100:	69a1      	ldr	r1, [r4, #24]
 8006102:	4a70      	ldr	r2, [pc, #448]	; (80062c4 <_scanf_i+0x1e0>)
 8006104:	2903      	cmp	r1, #3
 8006106:	bf18      	it	ne
 8006108:	461a      	movne	r2, r3
 800610a:	68a3      	ldr	r3, [r4, #8]
 800610c:	9201      	str	r2, [sp, #4]
 800610e:	1e5a      	subs	r2, r3, #1
 8006110:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006114:	bf88      	it	hi
 8006116:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800611a:	4627      	mov	r7, r4
 800611c:	bf82      	ittt	hi
 800611e:	eb03 0905 	addhi.w	r9, r3, r5
 8006122:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006126:	60a3      	strhi	r3, [r4, #8]
 8006128:	f857 3b1c 	ldr.w	r3, [r7], #28
 800612c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006130:	bf98      	it	ls
 8006132:	f04f 0900 	movls.w	r9, #0
 8006136:	6023      	str	r3, [r4, #0]
 8006138:	463d      	mov	r5, r7
 800613a:	f04f 0b00 	mov.w	fp, #0
 800613e:	6831      	ldr	r1, [r6, #0]
 8006140:	ab03      	add	r3, sp, #12
 8006142:	7809      	ldrb	r1, [r1, #0]
 8006144:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006148:	2202      	movs	r2, #2
 800614a:	f7fa f849 	bl	80001e0 <memchr>
 800614e:	b328      	cbz	r0, 800619c <_scanf_i+0xb8>
 8006150:	f1bb 0f01 	cmp.w	fp, #1
 8006154:	d159      	bne.n	800620a <_scanf_i+0x126>
 8006156:	6862      	ldr	r2, [r4, #4]
 8006158:	b92a      	cbnz	r2, 8006166 <_scanf_i+0x82>
 800615a:	6822      	ldr	r2, [r4, #0]
 800615c:	2308      	movs	r3, #8
 800615e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006162:	6063      	str	r3, [r4, #4]
 8006164:	6022      	str	r2, [r4, #0]
 8006166:	6822      	ldr	r2, [r4, #0]
 8006168:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800616c:	6022      	str	r2, [r4, #0]
 800616e:	68a2      	ldr	r2, [r4, #8]
 8006170:	1e51      	subs	r1, r2, #1
 8006172:	60a1      	str	r1, [r4, #8]
 8006174:	b192      	cbz	r2, 800619c <_scanf_i+0xb8>
 8006176:	6832      	ldr	r2, [r6, #0]
 8006178:	1c51      	adds	r1, r2, #1
 800617a:	6031      	str	r1, [r6, #0]
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	f805 2b01 	strb.w	r2, [r5], #1
 8006182:	6872      	ldr	r2, [r6, #4]
 8006184:	3a01      	subs	r2, #1
 8006186:	2a00      	cmp	r2, #0
 8006188:	6072      	str	r2, [r6, #4]
 800618a:	dc07      	bgt.n	800619c <_scanf_i+0xb8>
 800618c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006190:	4631      	mov	r1, r6
 8006192:	4650      	mov	r0, sl
 8006194:	4790      	blx	r2
 8006196:	2800      	cmp	r0, #0
 8006198:	f040 8085 	bne.w	80062a6 <_scanf_i+0x1c2>
 800619c:	f10b 0b01 	add.w	fp, fp, #1
 80061a0:	f1bb 0f03 	cmp.w	fp, #3
 80061a4:	d1cb      	bne.n	800613e <_scanf_i+0x5a>
 80061a6:	6863      	ldr	r3, [r4, #4]
 80061a8:	b90b      	cbnz	r3, 80061ae <_scanf_i+0xca>
 80061aa:	230a      	movs	r3, #10
 80061ac:	6063      	str	r3, [r4, #4]
 80061ae:	6863      	ldr	r3, [r4, #4]
 80061b0:	4945      	ldr	r1, [pc, #276]	; (80062c8 <_scanf_i+0x1e4>)
 80061b2:	6960      	ldr	r0, [r4, #20]
 80061b4:	1ac9      	subs	r1, r1, r3
 80061b6:	f000 f949 	bl	800644c <__sccl>
 80061ba:	f04f 0b00 	mov.w	fp, #0
 80061be:	68a3      	ldr	r3, [r4, #8]
 80061c0:	6822      	ldr	r2, [r4, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d03d      	beq.n	8006242 <_scanf_i+0x15e>
 80061c6:	6831      	ldr	r1, [r6, #0]
 80061c8:	6960      	ldr	r0, [r4, #20]
 80061ca:	f891 c000 	ldrb.w	ip, [r1]
 80061ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d035      	beq.n	8006242 <_scanf_i+0x15e>
 80061d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80061da:	d124      	bne.n	8006226 <_scanf_i+0x142>
 80061dc:	0510      	lsls	r0, r2, #20
 80061de:	d522      	bpl.n	8006226 <_scanf_i+0x142>
 80061e0:	f10b 0b01 	add.w	fp, fp, #1
 80061e4:	f1b9 0f00 	cmp.w	r9, #0
 80061e8:	d003      	beq.n	80061f2 <_scanf_i+0x10e>
 80061ea:	3301      	adds	r3, #1
 80061ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80061f0:	60a3      	str	r3, [r4, #8]
 80061f2:	6873      	ldr	r3, [r6, #4]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	6073      	str	r3, [r6, #4]
 80061fa:	dd1b      	ble.n	8006234 <_scanf_i+0x150>
 80061fc:	6833      	ldr	r3, [r6, #0]
 80061fe:	3301      	adds	r3, #1
 8006200:	6033      	str	r3, [r6, #0]
 8006202:	68a3      	ldr	r3, [r4, #8]
 8006204:	3b01      	subs	r3, #1
 8006206:	60a3      	str	r3, [r4, #8]
 8006208:	e7d9      	b.n	80061be <_scanf_i+0xda>
 800620a:	f1bb 0f02 	cmp.w	fp, #2
 800620e:	d1ae      	bne.n	800616e <_scanf_i+0x8a>
 8006210:	6822      	ldr	r2, [r4, #0]
 8006212:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006216:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800621a:	d1bf      	bne.n	800619c <_scanf_i+0xb8>
 800621c:	2310      	movs	r3, #16
 800621e:	6063      	str	r3, [r4, #4]
 8006220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006224:	e7a2      	b.n	800616c <_scanf_i+0x88>
 8006226:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800622a:	6022      	str	r2, [r4, #0]
 800622c:	780b      	ldrb	r3, [r1, #0]
 800622e:	f805 3b01 	strb.w	r3, [r5], #1
 8006232:	e7de      	b.n	80061f2 <_scanf_i+0x10e>
 8006234:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006238:	4631      	mov	r1, r6
 800623a:	4650      	mov	r0, sl
 800623c:	4798      	blx	r3
 800623e:	2800      	cmp	r0, #0
 8006240:	d0df      	beq.n	8006202 <_scanf_i+0x11e>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	05d9      	lsls	r1, r3, #23
 8006246:	d50d      	bpl.n	8006264 <_scanf_i+0x180>
 8006248:	42bd      	cmp	r5, r7
 800624a:	d909      	bls.n	8006260 <_scanf_i+0x17c>
 800624c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006254:	4632      	mov	r2, r6
 8006256:	4650      	mov	r0, sl
 8006258:	4798      	blx	r3
 800625a:	f105 39ff 	add.w	r9, r5, #4294967295
 800625e:	464d      	mov	r5, r9
 8006260:	42bd      	cmp	r5, r7
 8006262:	d028      	beq.n	80062b6 <_scanf_i+0x1d2>
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	f012 0210 	ands.w	r2, r2, #16
 800626a:	d113      	bne.n	8006294 <_scanf_i+0x1b0>
 800626c:	702a      	strb	r2, [r5, #0]
 800626e:	6863      	ldr	r3, [r4, #4]
 8006270:	9e01      	ldr	r6, [sp, #4]
 8006272:	4639      	mov	r1, r7
 8006274:	4650      	mov	r0, sl
 8006276:	47b0      	blx	r6
 8006278:	f8d8 3000 	ldr.w	r3, [r8]
 800627c:	6821      	ldr	r1, [r4, #0]
 800627e:	1d1a      	adds	r2, r3, #4
 8006280:	f8c8 2000 	str.w	r2, [r8]
 8006284:	f011 0f20 	tst.w	r1, #32
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	d00f      	beq.n	80062ac <_scanf_i+0x1c8>
 800628c:	6018      	str	r0, [r3, #0]
 800628e:	68e3      	ldr	r3, [r4, #12]
 8006290:	3301      	adds	r3, #1
 8006292:	60e3      	str	r3, [r4, #12]
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	1bed      	subs	r5, r5, r7
 8006298:	445d      	add	r5, fp
 800629a:	442b      	add	r3, r5
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	2000      	movs	r0, #0
 80062a0:	b007      	add	sp, #28
 80062a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a6:	f04f 0b00 	mov.w	fp, #0
 80062aa:	e7ca      	b.n	8006242 <_scanf_i+0x15e>
 80062ac:	07ca      	lsls	r2, r1, #31
 80062ae:	bf4c      	ite	mi
 80062b0:	8018      	strhmi	r0, [r3, #0]
 80062b2:	6018      	strpl	r0, [r3, #0]
 80062b4:	e7eb      	b.n	800628e <_scanf_i+0x1aa>
 80062b6:	2001      	movs	r0, #1
 80062b8:	e7f2      	b.n	80062a0 <_scanf_i+0x1bc>
 80062ba:	bf00      	nop
 80062bc:	0800705c 	.word	0x0800705c
 80062c0:	080067c9 	.word	0x080067c9
 80062c4:	080066e1 	.word	0x080066e1
 80062c8:	08007141 	.word	0x08007141

080062cc <__sflush_r>:
 80062cc:	898a      	ldrh	r2, [r1, #12]
 80062ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d2:	4605      	mov	r5, r0
 80062d4:	0710      	lsls	r0, r2, #28
 80062d6:	460c      	mov	r4, r1
 80062d8:	d458      	bmi.n	800638c <__sflush_r+0xc0>
 80062da:	684b      	ldr	r3, [r1, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	dc05      	bgt.n	80062ec <__sflush_r+0x20>
 80062e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	dc02      	bgt.n	80062ec <__sflush_r+0x20>
 80062e6:	2000      	movs	r0, #0
 80062e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062ee:	2e00      	cmp	r6, #0
 80062f0:	d0f9      	beq.n	80062e6 <__sflush_r+0x1a>
 80062f2:	2300      	movs	r3, #0
 80062f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062f8:	682f      	ldr	r7, [r5, #0]
 80062fa:	6a21      	ldr	r1, [r4, #32]
 80062fc:	602b      	str	r3, [r5, #0]
 80062fe:	d032      	beq.n	8006366 <__sflush_r+0x9a>
 8006300:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	075a      	lsls	r2, r3, #29
 8006306:	d505      	bpl.n	8006314 <__sflush_r+0x48>
 8006308:	6863      	ldr	r3, [r4, #4]
 800630a:	1ac0      	subs	r0, r0, r3
 800630c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800630e:	b10b      	cbz	r3, 8006314 <__sflush_r+0x48>
 8006310:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006312:	1ac0      	subs	r0, r0, r3
 8006314:	2300      	movs	r3, #0
 8006316:	4602      	mov	r2, r0
 8006318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800631a:	6a21      	ldr	r1, [r4, #32]
 800631c:	4628      	mov	r0, r5
 800631e:	47b0      	blx	r6
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	89a3      	ldrh	r3, [r4, #12]
 8006324:	d106      	bne.n	8006334 <__sflush_r+0x68>
 8006326:	6829      	ldr	r1, [r5, #0]
 8006328:	291d      	cmp	r1, #29
 800632a:	d82b      	bhi.n	8006384 <__sflush_r+0xb8>
 800632c:	4a29      	ldr	r2, [pc, #164]	; (80063d4 <__sflush_r+0x108>)
 800632e:	410a      	asrs	r2, r1
 8006330:	07d6      	lsls	r6, r2, #31
 8006332:	d427      	bmi.n	8006384 <__sflush_r+0xb8>
 8006334:	2200      	movs	r2, #0
 8006336:	6062      	str	r2, [r4, #4]
 8006338:	04d9      	lsls	r1, r3, #19
 800633a:	6922      	ldr	r2, [r4, #16]
 800633c:	6022      	str	r2, [r4, #0]
 800633e:	d504      	bpl.n	800634a <__sflush_r+0x7e>
 8006340:	1c42      	adds	r2, r0, #1
 8006342:	d101      	bne.n	8006348 <__sflush_r+0x7c>
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	b903      	cbnz	r3, 800634a <__sflush_r+0x7e>
 8006348:	6560      	str	r0, [r4, #84]	; 0x54
 800634a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800634c:	602f      	str	r7, [r5, #0]
 800634e:	2900      	cmp	r1, #0
 8006350:	d0c9      	beq.n	80062e6 <__sflush_r+0x1a>
 8006352:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006356:	4299      	cmp	r1, r3
 8006358:	d002      	beq.n	8006360 <__sflush_r+0x94>
 800635a:	4628      	mov	r0, r5
 800635c:	f7ff fb96 	bl	8005a8c <_free_r>
 8006360:	2000      	movs	r0, #0
 8006362:	6360      	str	r0, [r4, #52]	; 0x34
 8006364:	e7c0      	b.n	80062e8 <__sflush_r+0x1c>
 8006366:	2301      	movs	r3, #1
 8006368:	4628      	mov	r0, r5
 800636a:	47b0      	blx	r6
 800636c:	1c41      	adds	r1, r0, #1
 800636e:	d1c8      	bne.n	8006302 <__sflush_r+0x36>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0c5      	beq.n	8006302 <__sflush_r+0x36>
 8006376:	2b1d      	cmp	r3, #29
 8006378:	d001      	beq.n	800637e <__sflush_r+0xb2>
 800637a:	2b16      	cmp	r3, #22
 800637c:	d101      	bne.n	8006382 <__sflush_r+0xb6>
 800637e:	602f      	str	r7, [r5, #0]
 8006380:	e7b1      	b.n	80062e6 <__sflush_r+0x1a>
 8006382:	89a3      	ldrh	r3, [r4, #12]
 8006384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006388:	81a3      	strh	r3, [r4, #12]
 800638a:	e7ad      	b.n	80062e8 <__sflush_r+0x1c>
 800638c:	690f      	ldr	r7, [r1, #16]
 800638e:	2f00      	cmp	r7, #0
 8006390:	d0a9      	beq.n	80062e6 <__sflush_r+0x1a>
 8006392:	0793      	lsls	r3, r2, #30
 8006394:	680e      	ldr	r6, [r1, #0]
 8006396:	bf08      	it	eq
 8006398:	694b      	ldreq	r3, [r1, #20]
 800639a:	600f      	str	r7, [r1, #0]
 800639c:	bf18      	it	ne
 800639e:	2300      	movne	r3, #0
 80063a0:	eba6 0807 	sub.w	r8, r6, r7
 80063a4:	608b      	str	r3, [r1, #8]
 80063a6:	f1b8 0f00 	cmp.w	r8, #0
 80063aa:	dd9c      	ble.n	80062e6 <__sflush_r+0x1a>
 80063ac:	6a21      	ldr	r1, [r4, #32]
 80063ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063b0:	4643      	mov	r3, r8
 80063b2:	463a      	mov	r2, r7
 80063b4:	4628      	mov	r0, r5
 80063b6:	47b0      	blx	r6
 80063b8:	2800      	cmp	r0, #0
 80063ba:	dc06      	bgt.n	80063ca <__sflush_r+0xfe>
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063c2:	81a3      	strh	r3, [r4, #12]
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	e78e      	b.n	80062e8 <__sflush_r+0x1c>
 80063ca:	4407      	add	r7, r0
 80063cc:	eba8 0800 	sub.w	r8, r8, r0
 80063d0:	e7e9      	b.n	80063a6 <__sflush_r+0xda>
 80063d2:	bf00      	nop
 80063d4:	dfbffffe 	.word	0xdfbffffe

080063d8 <_fflush_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	690b      	ldr	r3, [r1, #16]
 80063dc:	4605      	mov	r5, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	b913      	cbnz	r3, 80063e8 <_fflush_r+0x10>
 80063e2:	2500      	movs	r5, #0
 80063e4:	4628      	mov	r0, r5
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	b118      	cbz	r0, 80063f2 <_fflush_r+0x1a>
 80063ea:	6a03      	ldr	r3, [r0, #32]
 80063ec:	b90b      	cbnz	r3, 80063f2 <_fflush_r+0x1a>
 80063ee:	f7ff f9af 	bl	8005750 <__sinit>
 80063f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f3      	beq.n	80063e2 <_fflush_r+0xa>
 80063fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063fc:	07d0      	lsls	r0, r2, #31
 80063fe:	d404      	bmi.n	800640a <_fflush_r+0x32>
 8006400:	0599      	lsls	r1, r3, #22
 8006402:	d402      	bmi.n	800640a <_fflush_r+0x32>
 8006404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006406:	f7ff fb20 	bl	8005a4a <__retarget_lock_acquire_recursive>
 800640a:	4628      	mov	r0, r5
 800640c:	4621      	mov	r1, r4
 800640e:	f7ff ff5d 	bl	80062cc <__sflush_r>
 8006412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006414:	07da      	lsls	r2, r3, #31
 8006416:	4605      	mov	r5, r0
 8006418:	d4e4      	bmi.n	80063e4 <_fflush_r+0xc>
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	059b      	lsls	r3, r3, #22
 800641e:	d4e1      	bmi.n	80063e4 <_fflush_r+0xc>
 8006420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006422:	f7ff fb13 	bl	8005a4c <__retarget_lock_release_recursive>
 8006426:	e7dd      	b.n	80063e4 <_fflush_r+0xc>

08006428 <fiprintf>:
 8006428:	b40e      	push	{r1, r2, r3}
 800642a:	b503      	push	{r0, r1, lr}
 800642c:	4601      	mov	r1, r0
 800642e:	ab03      	add	r3, sp, #12
 8006430:	4805      	ldr	r0, [pc, #20]	; (8006448 <fiprintf+0x20>)
 8006432:	f853 2b04 	ldr.w	r2, [r3], #4
 8006436:	6800      	ldr	r0, [r0, #0]
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	f000 f9f1 	bl	8006820 <_vfiprintf_r>
 800643e:	b002      	add	sp, #8
 8006440:	f85d eb04 	ldr.w	lr, [sp], #4
 8006444:	b003      	add	sp, #12
 8006446:	4770      	bx	lr
 8006448:	20000064 	.word	0x20000064

0800644c <__sccl>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	780b      	ldrb	r3, [r1, #0]
 8006450:	4604      	mov	r4, r0
 8006452:	2b5e      	cmp	r3, #94	; 0x5e
 8006454:	bf0b      	itete	eq
 8006456:	784b      	ldrbeq	r3, [r1, #1]
 8006458:	1c4a      	addne	r2, r1, #1
 800645a:	1c8a      	addeq	r2, r1, #2
 800645c:	2100      	movne	r1, #0
 800645e:	bf08      	it	eq
 8006460:	2101      	moveq	r1, #1
 8006462:	3801      	subs	r0, #1
 8006464:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006468:	f800 1f01 	strb.w	r1, [r0, #1]!
 800646c:	42a8      	cmp	r0, r5
 800646e:	d1fb      	bne.n	8006468 <__sccl+0x1c>
 8006470:	b90b      	cbnz	r3, 8006476 <__sccl+0x2a>
 8006472:	1e50      	subs	r0, r2, #1
 8006474:	bd70      	pop	{r4, r5, r6, pc}
 8006476:	f081 0101 	eor.w	r1, r1, #1
 800647a:	54e1      	strb	r1, [r4, r3]
 800647c:	4610      	mov	r0, r2
 800647e:	4602      	mov	r2, r0
 8006480:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006484:	2d2d      	cmp	r5, #45	; 0x2d
 8006486:	d005      	beq.n	8006494 <__sccl+0x48>
 8006488:	2d5d      	cmp	r5, #93	; 0x5d
 800648a:	d016      	beq.n	80064ba <__sccl+0x6e>
 800648c:	2d00      	cmp	r5, #0
 800648e:	d0f1      	beq.n	8006474 <__sccl+0x28>
 8006490:	462b      	mov	r3, r5
 8006492:	e7f2      	b.n	800647a <__sccl+0x2e>
 8006494:	7846      	ldrb	r6, [r0, #1]
 8006496:	2e5d      	cmp	r6, #93	; 0x5d
 8006498:	d0fa      	beq.n	8006490 <__sccl+0x44>
 800649a:	42b3      	cmp	r3, r6
 800649c:	dcf8      	bgt.n	8006490 <__sccl+0x44>
 800649e:	3002      	adds	r0, #2
 80064a0:	461a      	mov	r2, r3
 80064a2:	3201      	adds	r2, #1
 80064a4:	4296      	cmp	r6, r2
 80064a6:	54a1      	strb	r1, [r4, r2]
 80064a8:	dcfb      	bgt.n	80064a2 <__sccl+0x56>
 80064aa:	1af2      	subs	r2, r6, r3
 80064ac:	3a01      	subs	r2, #1
 80064ae:	1c5d      	adds	r5, r3, #1
 80064b0:	42b3      	cmp	r3, r6
 80064b2:	bfa8      	it	ge
 80064b4:	2200      	movge	r2, #0
 80064b6:	18ab      	adds	r3, r5, r2
 80064b8:	e7e1      	b.n	800647e <__sccl+0x32>
 80064ba:	4610      	mov	r0, r2
 80064bc:	e7da      	b.n	8006474 <__sccl+0x28>

080064be <__submore>:
 80064be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c2:	460c      	mov	r4, r1
 80064c4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80064c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064ca:	4299      	cmp	r1, r3
 80064cc:	d11d      	bne.n	800650a <__submore+0x4c>
 80064ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064d2:	f7ff fb4f 	bl	8005b74 <_malloc_r>
 80064d6:	b918      	cbnz	r0, 80064e0 <__submore+0x22>
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80064e6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80064ea:	6360      	str	r0, [r4, #52]	; 0x34
 80064ec:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80064f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80064f4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80064f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80064fc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006500:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006504:	6020      	str	r0, [r4, #0]
 8006506:	2000      	movs	r0, #0
 8006508:	e7e8      	b.n	80064dc <__submore+0x1e>
 800650a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800650c:	0077      	lsls	r7, r6, #1
 800650e:	463a      	mov	r2, r7
 8006510:	f000 f835 	bl	800657e <_realloc_r>
 8006514:	4605      	mov	r5, r0
 8006516:	2800      	cmp	r0, #0
 8006518:	d0de      	beq.n	80064d8 <__submore+0x1a>
 800651a:	eb00 0806 	add.w	r8, r0, r6
 800651e:	4601      	mov	r1, r0
 8006520:	4632      	mov	r2, r6
 8006522:	4640      	mov	r0, r8
 8006524:	f000 f816 	bl	8006554 <memcpy>
 8006528:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800652c:	f8c4 8000 	str.w	r8, [r4]
 8006530:	e7e9      	b.n	8006506 <__submore+0x48>
	...

08006534 <_sbrk_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4d06      	ldr	r5, [pc, #24]	; (8006550 <_sbrk_r+0x1c>)
 8006538:	2300      	movs	r3, #0
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	602b      	str	r3, [r5, #0]
 8006540:	f7fb fd76 	bl	8002030 <_sbrk>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_sbrk_r+0x1a>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	b103      	cbz	r3, 800654e <_sbrk_r+0x1a>
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	200001c4 	.word	0x200001c4

08006554 <memcpy>:
 8006554:	440a      	add	r2, r1
 8006556:	4291      	cmp	r1, r2
 8006558:	f100 33ff 	add.w	r3, r0, #4294967295
 800655c:	d100      	bne.n	8006560 <memcpy+0xc>
 800655e:	4770      	bx	lr
 8006560:	b510      	push	{r4, lr}
 8006562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800656a:	4291      	cmp	r1, r2
 800656c:	d1f9      	bne.n	8006562 <memcpy+0xe>
 800656e:	bd10      	pop	{r4, pc}

08006570 <abort>:
 8006570:	b508      	push	{r3, lr}
 8006572:	2006      	movs	r0, #6
 8006574:	f000 fcbc 	bl	8006ef0 <raise>
 8006578:	2001      	movs	r0, #1
 800657a:	f7fb fce1 	bl	8001f40 <_exit>

0800657e <_realloc_r>:
 800657e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006582:	4680      	mov	r8, r0
 8006584:	4614      	mov	r4, r2
 8006586:	460e      	mov	r6, r1
 8006588:	b921      	cbnz	r1, 8006594 <_realloc_r+0x16>
 800658a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800658e:	4611      	mov	r1, r2
 8006590:	f7ff baf0 	b.w	8005b74 <_malloc_r>
 8006594:	b92a      	cbnz	r2, 80065a2 <_realloc_r+0x24>
 8006596:	f7ff fa79 	bl	8005a8c <_free_r>
 800659a:	4625      	mov	r5, r4
 800659c:	4628      	mov	r0, r5
 800659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a2:	f000 fcc1 	bl	8006f28 <_malloc_usable_size_r>
 80065a6:	4284      	cmp	r4, r0
 80065a8:	4607      	mov	r7, r0
 80065aa:	d802      	bhi.n	80065b2 <_realloc_r+0x34>
 80065ac:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065b0:	d812      	bhi.n	80065d8 <_realloc_r+0x5a>
 80065b2:	4621      	mov	r1, r4
 80065b4:	4640      	mov	r0, r8
 80065b6:	f7ff fadd 	bl	8005b74 <_malloc_r>
 80065ba:	4605      	mov	r5, r0
 80065bc:	2800      	cmp	r0, #0
 80065be:	d0ed      	beq.n	800659c <_realloc_r+0x1e>
 80065c0:	42bc      	cmp	r4, r7
 80065c2:	4622      	mov	r2, r4
 80065c4:	4631      	mov	r1, r6
 80065c6:	bf28      	it	cs
 80065c8:	463a      	movcs	r2, r7
 80065ca:	f7ff ffc3 	bl	8006554 <memcpy>
 80065ce:	4631      	mov	r1, r6
 80065d0:	4640      	mov	r0, r8
 80065d2:	f7ff fa5b 	bl	8005a8c <_free_r>
 80065d6:	e7e1      	b.n	800659c <_realloc_r+0x1e>
 80065d8:	4635      	mov	r5, r6
 80065da:	e7df      	b.n	800659c <_realloc_r+0x1e>

080065dc <_strtol_l.constprop.0>:
 80065dc:	2b01      	cmp	r3, #1
 80065de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e2:	d001      	beq.n	80065e8 <_strtol_l.constprop.0+0xc>
 80065e4:	2b24      	cmp	r3, #36	; 0x24
 80065e6:	d906      	bls.n	80065f6 <_strtol_l.constprop.0+0x1a>
 80065e8:	f7ff fa04 	bl	80059f4 <__errno>
 80065ec:	2316      	movs	r3, #22
 80065ee:	6003      	str	r3, [r0, #0]
 80065f0:	2000      	movs	r0, #0
 80065f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80066dc <_strtol_l.constprop.0+0x100>
 80065fa:	460d      	mov	r5, r1
 80065fc:	462e      	mov	r6, r5
 80065fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006602:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006606:	f017 0708 	ands.w	r7, r7, #8
 800660a:	d1f7      	bne.n	80065fc <_strtol_l.constprop.0+0x20>
 800660c:	2c2d      	cmp	r4, #45	; 0x2d
 800660e:	d132      	bne.n	8006676 <_strtol_l.constprop.0+0x9a>
 8006610:	782c      	ldrb	r4, [r5, #0]
 8006612:	2701      	movs	r7, #1
 8006614:	1cb5      	adds	r5, r6, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d05b      	beq.n	80066d2 <_strtol_l.constprop.0+0xf6>
 800661a:	2b10      	cmp	r3, #16
 800661c:	d109      	bne.n	8006632 <_strtol_l.constprop.0+0x56>
 800661e:	2c30      	cmp	r4, #48	; 0x30
 8006620:	d107      	bne.n	8006632 <_strtol_l.constprop.0+0x56>
 8006622:	782c      	ldrb	r4, [r5, #0]
 8006624:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006628:	2c58      	cmp	r4, #88	; 0x58
 800662a:	d14d      	bne.n	80066c8 <_strtol_l.constprop.0+0xec>
 800662c:	786c      	ldrb	r4, [r5, #1]
 800662e:	2310      	movs	r3, #16
 8006630:	3502      	adds	r5, #2
 8006632:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006636:	f108 38ff 	add.w	r8, r8, #4294967295
 800663a:	f04f 0e00 	mov.w	lr, #0
 800663e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006642:	4676      	mov	r6, lr
 8006644:	fb03 8a19 	mls	sl, r3, r9, r8
 8006648:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800664c:	f1bc 0f09 	cmp.w	ip, #9
 8006650:	d816      	bhi.n	8006680 <_strtol_l.constprop.0+0xa4>
 8006652:	4664      	mov	r4, ip
 8006654:	42a3      	cmp	r3, r4
 8006656:	dd24      	ble.n	80066a2 <_strtol_l.constprop.0+0xc6>
 8006658:	f1be 3fff 	cmp.w	lr, #4294967295
 800665c:	d008      	beq.n	8006670 <_strtol_l.constprop.0+0x94>
 800665e:	45b1      	cmp	r9, r6
 8006660:	d31c      	bcc.n	800669c <_strtol_l.constprop.0+0xc0>
 8006662:	d101      	bne.n	8006668 <_strtol_l.constprop.0+0x8c>
 8006664:	45a2      	cmp	sl, r4
 8006666:	db19      	blt.n	800669c <_strtol_l.constprop.0+0xc0>
 8006668:	fb06 4603 	mla	r6, r6, r3, r4
 800666c:	f04f 0e01 	mov.w	lr, #1
 8006670:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006674:	e7e8      	b.n	8006648 <_strtol_l.constprop.0+0x6c>
 8006676:	2c2b      	cmp	r4, #43	; 0x2b
 8006678:	bf04      	itt	eq
 800667a:	782c      	ldrbeq	r4, [r5, #0]
 800667c:	1cb5      	addeq	r5, r6, #2
 800667e:	e7ca      	b.n	8006616 <_strtol_l.constprop.0+0x3a>
 8006680:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006684:	f1bc 0f19 	cmp.w	ip, #25
 8006688:	d801      	bhi.n	800668e <_strtol_l.constprop.0+0xb2>
 800668a:	3c37      	subs	r4, #55	; 0x37
 800668c:	e7e2      	b.n	8006654 <_strtol_l.constprop.0+0x78>
 800668e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006692:	f1bc 0f19 	cmp.w	ip, #25
 8006696:	d804      	bhi.n	80066a2 <_strtol_l.constprop.0+0xc6>
 8006698:	3c57      	subs	r4, #87	; 0x57
 800669a:	e7db      	b.n	8006654 <_strtol_l.constprop.0+0x78>
 800669c:	f04f 3eff 	mov.w	lr, #4294967295
 80066a0:	e7e6      	b.n	8006670 <_strtol_l.constprop.0+0x94>
 80066a2:	f1be 3fff 	cmp.w	lr, #4294967295
 80066a6:	d105      	bne.n	80066b4 <_strtol_l.constprop.0+0xd8>
 80066a8:	2322      	movs	r3, #34	; 0x22
 80066aa:	6003      	str	r3, [r0, #0]
 80066ac:	4646      	mov	r6, r8
 80066ae:	b942      	cbnz	r2, 80066c2 <_strtol_l.constprop.0+0xe6>
 80066b0:	4630      	mov	r0, r6
 80066b2:	e79e      	b.n	80065f2 <_strtol_l.constprop.0+0x16>
 80066b4:	b107      	cbz	r7, 80066b8 <_strtol_l.constprop.0+0xdc>
 80066b6:	4276      	negs	r6, r6
 80066b8:	2a00      	cmp	r2, #0
 80066ba:	d0f9      	beq.n	80066b0 <_strtol_l.constprop.0+0xd4>
 80066bc:	f1be 0f00 	cmp.w	lr, #0
 80066c0:	d000      	beq.n	80066c4 <_strtol_l.constprop.0+0xe8>
 80066c2:	1e69      	subs	r1, r5, #1
 80066c4:	6011      	str	r1, [r2, #0]
 80066c6:	e7f3      	b.n	80066b0 <_strtol_l.constprop.0+0xd4>
 80066c8:	2430      	movs	r4, #48	; 0x30
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1b1      	bne.n	8006632 <_strtol_l.constprop.0+0x56>
 80066ce:	2308      	movs	r3, #8
 80066d0:	e7af      	b.n	8006632 <_strtol_l.constprop.0+0x56>
 80066d2:	2c30      	cmp	r4, #48	; 0x30
 80066d4:	d0a5      	beq.n	8006622 <_strtol_l.constprop.0+0x46>
 80066d6:	230a      	movs	r3, #10
 80066d8:	e7ab      	b.n	8006632 <_strtol_l.constprop.0+0x56>
 80066da:	bf00      	nop
 80066dc:	0800714d 	.word	0x0800714d

080066e0 <_strtol_r>:
 80066e0:	f7ff bf7c 	b.w	80065dc <_strtol_l.constprop.0>

080066e4 <_strtoul_l.constprop.0>:
 80066e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066e8:	4f36      	ldr	r7, [pc, #216]	; (80067c4 <_strtoul_l.constprop.0+0xe0>)
 80066ea:	4686      	mov	lr, r0
 80066ec:	460d      	mov	r5, r1
 80066ee:	4628      	mov	r0, r5
 80066f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066f4:	5d3e      	ldrb	r6, [r7, r4]
 80066f6:	f016 0608 	ands.w	r6, r6, #8
 80066fa:	d1f8      	bne.n	80066ee <_strtoul_l.constprop.0+0xa>
 80066fc:	2c2d      	cmp	r4, #45	; 0x2d
 80066fe:	d130      	bne.n	8006762 <_strtoul_l.constprop.0+0x7e>
 8006700:	782c      	ldrb	r4, [r5, #0]
 8006702:	2601      	movs	r6, #1
 8006704:	1c85      	adds	r5, r0, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d057      	beq.n	80067ba <_strtoul_l.constprop.0+0xd6>
 800670a:	2b10      	cmp	r3, #16
 800670c:	d109      	bne.n	8006722 <_strtoul_l.constprop.0+0x3e>
 800670e:	2c30      	cmp	r4, #48	; 0x30
 8006710:	d107      	bne.n	8006722 <_strtoul_l.constprop.0+0x3e>
 8006712:	7828      	ldrb	r0, [r5, #0]
 8006714:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006718:	2858      	cmp	r0, #88	; 0x58
 800671a:	d149      	bne.n	80067b0 <_strtoul_l.constprop.0+0xcc>
 800671c:	786c      	ldrb	r4, [r5, #1]
 800671e:	2310      	movs	r3, #16
 8006720:	3502      	adds	r5, #2
 8006722:	f04f 38ff 	mov.w	r8, #4294967295
 8006726:	2700      	movs	r7, #0
 8006728:	fbb8 f8f3 	udiv	r8, r8, r3
 800672c:	fb03 f908 	mul.w	r9, r3, r8
 8006730:	ea6f 0909 	mvn.w	r9, r9
 8006734:	4638      	mov	r0, r7
 8006736:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800673a:	f1bc 0f09 	cmp.w	ip, #9
 800673e:	d815      	bhi.n	800676c <_strtoul_l.constprop.0+0x88>
 8006740:	4664      	mov	r4, ip
 8006742:	42a3      	cmp	r3, r4
 8006744:	dd23      	ble.n	800678e <_strtoul_l.constprop.0+0xaa>
 8006746:	f1b7 3fff 	cmp.w	r7, #4294967295
 800674a:	d007      	beq.n	800675c <_strtoul_l.constprop.0+0x78>
 800674c:	4580      	cmp	r8, r0
 800674e:	d31b      	bcc.n	8006788 <_strtoul_l.constprop.0+0xa4>
 8006750:	d101      	bne.n	8006756 <_strtoul_l.constprop.0+0x72>
 8006752:	45a1      	cmp	r9, r4
 8006754:	db18      	blt.n	8006788 <_strtoul_l.constprop.0+0xa4>
 8006756:	fb00 4003 	mla	r0, r0, r3, r4
 800675a:	2701      	movs	r7, #1
 800675c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006760:	e7e9      	b.n	8006736 <_strtoul_l.constprop.0+0x52>
 8006762:	2c2b      	cmp	r4, #43	; 0x2b
 8006764:	bf04      	itt	eq
 8006766:	782c      	ldrbeq	r4, [r5, #0]
 8006768:	1c85      	addeq	r5, r0, #2
 800676a:	e7cc      	b.n	8006706 <_strtoul_l.constprop.0+0x22>
 800676c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006770:	f1bc 0f19 	cmp.w	ip, #25
 8006774:	d801      	bhi.n	800677a <_strtoul_l.constprop.0+0x96>
 8006776:	3c37      	subs	r4, #55	; 0x37
 8006778:	e7e3      	b.n	8006742 <_strtoul_l.constprop.0+0x5e>
 800677a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800677e:	f1bc 0f19 	cmp.w	ip, #25
 8006782:	d804      	bhi.n	800678e <_strtoul_l.constprop.0+0xaa>
 8006784:	3c57      	subs	r4, #87	; 0x57
 8006786:	e7dc      	b.n	8006742 <_strtoul_l.constprop.0+0x5e>
 8006788:	f04f 37ff 	mov.w	r7, #4294967295
 800678c:	e7e6      	b.n	800675c <_strtoul_l.constprop.0+0x78>
 800678e:	1c7b      	adds	r3, r7, #1
 8006790:	d106      	bne.n	80067a0 <_strtoul_l.constprop.0+0xbc>
 8006792:	2322      	movs	r3, #34	; 0x22
 8006794:	f8ce 3000 	str.w	r3, [lr]
 8006798:	4638      	mov	r0, r7
 800679a:	b932      	cbnz	r2, 80067aa <_strtoul_l.constprop.0+0xc6>
 800679c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067a0:	b106      	cbz	r6, 80067a4 <_strtoul_l.constprop.0+0xc0>
 80067a2:	4240      	negs	r0, r0
 80067a4:	2a00      	cmp	r2, #0
 80067a6:	d0f9      	beq.n	800679c <_strtoul_l.constprop.0+0xb8>
 80067a8:	b107      	cbz	r7, 80067ac <_strtoul_l.constprop.0+0xc8>
 80067aa:	1e69      	subs	r1, r5, #1
 80067ac:	6011      	str	r1, [r2, #0]
 80067ae:	e7f5      	b.n	800679c <_strtoul_l.constprop.0+0xb8>
 80067b0:	2430      	movs	r4, #48	; 0x30
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1b5      	bne.n	8006722 <_strtoul_l.constprop.0+0x3e>
 80067b6:	2308      	movs	r3, #8
 80067b8:	e7b3      	b.n	8006722 <_strtoul_l.constprop.0+0x3e>
 80067ba:	2c30      	cmp	r4, #48	; 0x30
 80067bc:	d0a9      	beq.n	8006712 <_strtoul_l.constprop.0+0x2e>
 80067be:	230a      	movs	r3, #10
 80067c0:	e7af      	b.n	8006722 <_strtoul_l.constprop.0+0x3e>
 80067c2:	bf00      	nop
 80067c4:	0800714d 	.word	0x0800714d

080067c8 <_strtoul_r>:
 80067c8:	f7ff bf8c 	b.w	80066e4 <_strtoul_l.constprop.0>

080067cc <__sfputc_r>:
 80067cc:	6893      	ldr	r3, [r2, #8]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	b410      	push	{r4}
 80067d4:	6093      	str	r3, [r2, #8]
 80067d6:	da08      	bge.n	80067ea <__sfputc_r+0x1e>
 80067d8:	6994      	ldr	r4, [r2, #24]
 80067da:	42a3      	cmp	r3, r4
 80067dc:	db01      	blt.n	80067e2 <__sfputc_r+0x16>
 80067de:	290a      	cmp	r1, #10
 80067e0:	d103      	bne.n	80067ea <__sfputc_r+0x1e>
 80067e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067e6:	f000 bac5 	b.w	8006d74 <__swbuf_r>
 80067ea:	6813      	ldr	r3, [r2, #0]
 80067ec:	1c58      	adds	r0, r3, #1
 80067ee:	6010      	str	r0, [r2, #0]
 80067f0:	7019      	strb	r1, [r3, #0]
 80067f2:	4608      	mov	r0, r1
 80067f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <__sfputs_r>:
 80067fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fc:	4606      	mov	r6, r0
 80067fe:	460f      	mov	r7, r1
 8006800:	4614      	mov	r4, r2
 8006802:	18d5      	adds	r5, r2, r3
 8006804:	42ac      	cmp	r4, r5
 8006806:	d101      	bne.n	800680c <__sfputs_r+0x12>
 8006808:	2000      	movs	r0, #0
 800680a:	e007      	b.n	800681c <__sfputs_r+0x22>
 800680c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006810:	463a      	mov	r2, r7
 8006812:	4630      	mov	r0, r6
 8006814:	f7ff ffda 	bl	80067cc <__sfputc_r>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d1f3      	bne.n	8006804 <__sfputs_r+0xa>
 800681c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006820 <_vfiprintf_r>:
 8006820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006824:	460d      	mov	r5, r1
 8006826:	b09d      	sub	sp, #116	; 0x74
 8006828:	4614      	mov	r4, r2
 800682a:	4698      	mov	r8, r3
 800682c:	4606      	mov	r6, r0
 800682e:	b118      	cbz	r0, 8006838 <_vfiprintf_r+0x18>
 8006830:	6a03      	ldr	r3, [r0, #32]
 8006832:	b90b      	cbnz	r3, 8006838 <_vfiprintf_r+0x18>
 8006834:	f7fe ff8c 	bl	8005750 <__sinit>
 8006838:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800683a:	07d9      	lsls	r1, r3, #31
 800683c:	d405      	bmi.n	800684a <_vfiprintf_r+0x2a>
 800683e:	89ab      	ldrh	r3, [r5, #12]
 8006840:	059a      	lsls	r2, r3, #22
 8006842:	d402      	bmi.n	800684a <_vfiprintf_r+0x2a>
 8006844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006846:	f7ff f900 	bl	8005a4a <__retarget_lock_acquire_recursive>
 800684a:	89ab      	ldrh	r3, [r5, #12]
 800684c:	071b      	lsls	r3, r3, #28
 800684e:	d501      	bpl.n	8006854 <_vfiprintf_r+0x34>
 8006850:	692b      	ldr	r3, [r5, #16]
 8006852:	b99b      	cbnz	r3, 800687c <_vfiprintf_r+0x5c>
 8006854:	4629      	mov	r1, r5
 8006856:	4630      	mov	r0, r6
 8006858:	f000 faca 	bl	8006df0 <__swsetup_r>
 800685c:	b170      	cbz	r0, 800687c <_vfiprintf_r+0x5c>
 800685e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006860:	07dc      	lsls	r4, r3, #31
 8006862:	d504      	bpl.n	800686e <_vfiprintf_r+0x4e>
 8006864:	f04f 30ff 	mov.w	r0, #4294967295
 8006868:	b01d      	add	sp, #116	; 0x74
 800686a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686e:	89ab      	ldrh	r3, [r5, #12]
 8006870:	0598      	lsls	r0, r3, #22
 8006872:	d4f7      	bmi.n	8006864 <_vfiprintf_r+0x44>
 8006874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006876:	f7ff f8e9 	bl	8005a4c <__retarget_lock_release_recursive>
 800687a:	e7f3      	b.n	8006864 <_vfiprintf_r+0x44>
 800687c:	2300      	movs	r3, #0
 800687e:	9309      	str	r3, [sp, #36]	; 0x24
 8006880:	2320      	movs	r3, #32
 8006882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006886:	f8cd 800c 	str.w	r8, [sp, #12]
 800688a:	2330      	movs	r3, #48	; 0x30
 800688c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006a40 <_vfiprintf_r+0x220>
 8006890:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006894:	f04f 0901 	mov.w	r9, #1
 8006898:	4623      	mov	r3, r4
 800689a:	469a      	mov	sl, r3
 800689c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068a0:	b10a      	cbz	r2, 80068a6 <_vfiprintf_r+0x86>
 80068a2:	2a25      	cmp	r2, #37	; 0x25
 80068a4:	d1f9      	bne.n	800689a <_vfiprintf_r+0x7a>
 80068a6:	ebba 0b04 	subs.w	fp, sl, r4
 80068aa:	d00b      	beq.n	80068c4 <_vfiprintf_r+0xa4>
 80068ac:	465b      	mov	r3, fp
 80068ae:	4622      	mov	r2, r4
 80068b0:	4629      	mov	r1, r5
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7ff ffa1 	bl	80067fa <__sfputs_r>
 80068b8:	3001      	adds	r0, #1
 80068ba:	f000 80a9 	beq.w	8006a10 <_vfiprintf_r+0x1f0>
 80068be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068c0:	445a      	add	r2, fp
 80068c2:	9209      	str	r2, [sp, #36]	; 0x24
 80068c4:	f89a 3000 	ldrb.w	r3, [sl]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 80a1 	beq.w	8006a10 <_vfiprintf_r+0x1f0>
 80068ce:	2300      	movs	r3, #0
 80068d0:	f04f 32ff 	mov.w	r2, #4294967295
 80068d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068d8:	f10a 0a01 	add.w	sl, sl, #1
 80068dc:	9304      	str	r3, [sp, #16]
 80068de:	9307      	str	r3, [sp, #28]
 80068e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068e4:	931a      	str	r3, [sp, #104]	; 0x68
 80068e6:	4654      	mov	r4, sl
 80068e8:	2205      	movs	r2, #5
 80068ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ee:	4854      	ldr	r0, [pc, #336]	; (8006a40 <_vfiprintf_r+0x220>)
 80068f0:	f7f9 fc76 	bl	80001e0 <memchr>
 80068f4:	9a04      	ldr	r2, [sp, #16]
 80068f6:	b9d8      	cbnz	r0, 8006930 <_vfiprintf_r+0x110>
 80068f8:	06d1      	lsls	r1, r2, #27
 80068fa:	bf44      	itt	mi
 80068fc:	2320      	movmi	r3, #32
 80068fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006902:	0713      	lsls	r3, r2, #28
 8006904:	bf44      	itt	mi
 8006906:	232b      	movmi	r3, #43	; 0x2b
 8006908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800690c:	f89a 3000 	ldrb.w	r3, [sl]
 8006910:	2b2a      	cmp	r3, #42	; 0x2a
 8006912:	d015      	beq.n	8006940 <_vfiprintf_r+0x120>
 8006914:	9a07      	ldr	r2, [sp, #28]
 8006916:	4654      	mov	r4, sl
 8006918:	2000      	movs	r0, #0
 800691a:	f04f 0c0a 	mov.w	ip, #10
 800691e:	4621      	mov	r1, r4
 8006920:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006924:	3b30      	subs	r3, #48	; 0x30
 8006926:	2b09      	cmp	r3, #9
 8006928:	d94d      	bls.n	80069c6 <_vfiprintf_r+0x1a6>
 800692a:	b1b0      	cbz	r0, 800695a <_vfiprintf_r+0x13a>
 800692c:	9207      	str	r2, [sp, #28]
 800692e:	e014      	b.n	800695a <_vfiprintf_r+0x13a>
 8006930:	eba0 0308 	sub.w	r3, r0, r8
 8006934:	fa09 f303 	lsl.w	r3, r9, r3
 8006938:	4313      	orrs	r3, r2
 800693a:	9304      	str	r3, [sp, #16]
 800693c:	46a2      	mov	sl, r4
 800693e:	e7d2      	b.n	80068e6 <_vfiprintf_r+0xc6>
 8006940:	9b03      	ldr	r3, [sp, #12]
 8006942:	1d19      	adds	r1, r3, #4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	9103      	str	r1, [sp, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	bfbb      	ittet	lt
 800694c:	425b      	neglt	r3, r3
 800694e:	f042 0202 	orrlt.w	r2, r2, #2
 8006952:	9307      	strge	r3, [sp, #28]
 8006954:	9307      	strlt	r3, [sp, #28]
 8006956:	bfb8      	it	lt
 8006958:	9204      	strlt	r2, [sp, #16]
 800695a:	7823      	ldrb	r3, [r4, #0]
 800695c:	2b2e      	cmp	r3, #46	; 0x2e
 800695e:	d10c      	bne.n	800697a <_vfiprintf_r+0x15a>
 8006960:	7863      	ldrb	r3, [r4, #1]
 8006962:	2b2a      	cmp	r3, #42	; 0x2a
 8006964:	d134      	bne.n	80069d0 <_vfiprintf_r+0x1b0>
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	1d1a      	adds	r2, r3, #4
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	9203      	str	r2, [sp, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	bfb8      	it	lt
 8006972:	f04f 33ff 	movlt.w	r3, #4294967295
 8006976:	3402      	adds	r4, #2
 8006978:	9305      	str	r3, [sp, #20]
 800697a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006a50 <_vfiprintf_r+0x230>
 800697e:	7821      	ldrb	r1, [r4, #0]
 8006980:	2203      	movs	r2, #3
 8006982:	4650      	mov	r0, sl
 8006984:	f7f9 fc2c 	bl	80001e0 <memchr>
 8006988:	b138      	cbz	r0, 800699a <_vfiprintf_r+0x17a>
 800698a:	9b04      	ldr	r3, [sp, #16]
 800698c:	eba0 000a 	sub.w	r0, r0, sl
 8006990:	2240      	movs	r2, #64	; 0x40
 8006992:	4082      	lsls	r2, r0
 8006994:	4313      	orrs	r3, r2
 8006996:	3401      	adds	r4, #1
 8006998:	9304      	str	r3, [sp, #16]
 800699a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699e:	4829      	ldr	r0, [pc, #164]	; (8006a44 <_vfiprintf_r+0x224>)
 80069a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069a4:	2206      	movs	r2, #6
 80069a6:	f7f9 fc1b 	bl	80001e0 <memchr>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d03f      	beq.n	8006a2e <_vfiprintf_r+0x20e>
 80069ae:	4b26      	ldr	r3, [pc, #152]	; (8006a48 <_vfiprintf_r+0x228>)
 80069b0:	bb1b      	cbnz	r3, 80069fa <_vfiprintf_r+0x1da>
 80069b2:	9b03      	ldr	r3, [sp, #12]
 80069b4:	3307      	adds	r3, #7
 80069b6:	f023 0307 	bic.w	r3, r3, #7
 80069ba:	3308      	adds	r3, #8
 80069bc:	9303      	str	r3, [sp, #12]
 80069be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c0:	443b      	add	r3, r7
 80069c2:	9309      	str	r3, [sp, #36]	; 0x24
 80069c4:	e768      	b.n	8006898 <_vfiprintf_r+0x78>
 80069c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80069ca:	460c      	mov	r4, r1
 80069cc:	2001      	movs	r0, #1
 80069ce:	e7a6      	b.n	800691e <_vfiprintf_r+0xfe>
 80069d0:	2300      	movs	r3, #0
 80069d2:	3401      	adds	r4, #1
 80069d4:	9305      	str	r3, [sp, #20]
 80069d6:	4619      	mov	r1, r3
 80069d8:	f04f 0c0a 	mov.w	ip, #10
 80069dc:	4620      	mov	r0, r4
 80069de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069e2:	3a30      	subs	r2, #48	; 0x30
 80069e4:	2a09      	cmp	r2, #9
 80069e6:	d903      	bls.n	80069f0 <_vfiprintf_r+0x1d0>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0c6      	beq.n	800697a <_vfiprintf_r+0x15a>
 80069ec:	9105      	str	r1, [sp, #20]
 80069ee:	e7c4      	b.n	800697a <_vfiprintf_r+0x15a>
 80069f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80069f4:	4604      	mov	r4, r0
 80069f6:	2301      	movs	r3, #1
 80069f8:	e7f0      	b.n	80069dc <_vfiprintf_r+0x1bc>
 80069fa:	ab03      	add	r3, sp, #12
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	462a      	mov	r2, r5
 8006a00:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <_vfiprintf_r+0x22c>)
 8006a02:	a904      	add	r1, sp, #16
 8006a04:	4630      	mov	r0, r6
 8006a06:	f3af 8000 	nop.w
 8006a0a:	4607      	mov	r7, r0
 8006a0c:	1c78      	adds	r0, r7, #1
 8006a0e:	d1d6      	bne.n	80069be <_vfiprintf_r+0x19e>
 8006a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a12:	07d9      	lsls	r1, r3, #31
 8006a14:	d405      	bmi.n	8006a22 <_vfiprintf_r+0x202>
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	059a      	lsls	r2, r3, #22
 8006a1a:	d402      	bmi.n	8006a22 <_vfiprintf_r+0x202>
 8006a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a1e:	f7ff f815 	bl	8005a4c <__retarget_lock_release_recursive>
 8006a22:	89ab      	ldrh	r3, [r5, #12]
 8006a24:	065b      	lsls	r3, r3, #25
 8006a26:	f53f af1d 	bmi.w	8006864 <_vfiprintf_r+0x44>
 8006a2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a2c:	e71c      	b.n	8006868 <_vfiprintf_r+0x48>
 8006a2e:	ab03      	add	r3, sp, #12
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	462a      	mov	r2, r5
 8006a34:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <_vfiprintf_r+0x22c>)
 8006a36:	a904      	add	r1, sp, #16
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f000 f879 	bl	8006b30 <_printf_i>
 8006a3e:	e7e4      	b.n	8006a0a <_vfiprintf_r+0x1ea>
 8006a40:	0800724d 	.word	0x0800724d
 8006a44:	08007253 	.word	0x08007253
 8006a48:	00000000 	.word	0x00000000
 8006a4c:	080067fb 	.word	0x080067fb
 8006a50:	0800712d 	.word	0x0800712d

08006a54 <_printf_common>:
 8006a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a58:	4616      	mov	r6, r2
 8006a5a:	4699      	mov	r9, r3
 8006a5c:	688a      	ldr	r2, [r1, #8]
 8006a5e:	690b      	ldr	r3, [r1, #16]
 8006a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a64:	4293      	cmp	r3, r2
 8006a66:	bfb8      	it	lt
 8006a68:	4613      	movlt	r3, r2
 8006a6a:	6033      	str	r3, [r6, #0]
 8006a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a70:	4607      	mov	r7, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	b10a      	cbz	r2, 8006a7a <_printf_common+0x26>
 8006a76:	3301      	adds	r3, #1
 8006a78:	6033      	str	r3, [r6, #0]
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	0699      	lsls	r1, r3, #26
 8006a7e:	bf42      	ittt	mi
 8006a80:	6833      	ldrmi	r3, [r6, #0]
 8006a82:	3302      	addmi	r3, #2
 8006a84:	6033      	strmi	r3, [r6, #0]
 8006a86:	6825      	ldr	r5, [r4, #0]
 8006a88:	f015 0506 	ands.w	r5, r5, #6
 8006a8c:	d106      	bne.n	8006a9c <_printf_common+0x48>
 8006a8e:	f104 0a19 	add.w	sl, r4, #25
 8006a92:	68e3      	ldr	r3, [r4, #12]
 8006a94:	6832      	ldr	r2, [r6, #0]
 8006a96:	1a9b      	subs	r3, r3, r2
 8006a98:	42ab      	cmp	r3, r5
 8006a9a:	dc26      	bgt.n	8006aea <_printf_common+0x96>
 8006a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006aa0:	1e13      	subs	r3, r2, #0
 8006aa2:	6822      	ldr	r2, [r4, #0]
 8006aa4:	bf18      	it	ne
 8006aa6:	2301      	movne	r3, #1
 8006aa8:	0692      	lsls	r2, r2, #26
 8006aaa:	d42b      	bmi.n	8006b04 <_printf_common+0xb0>
 8006aac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	47c0      	blx	r8
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d01e      	beq.n	8006af8 <_printf_common+0xa4>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	6922      	ldr	r2, [r4, #16]
 8006abe:	f003 0306 	and.w	r3, r3, #6
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	bf02      	ittt	eq
 8006ac6:	68e5      	ldreq	r5, [r4, #12]
 8006ac8:	6833      	ldreq	r3, [r6, #0]
 8006aca:	1aed      	subeq	r5, r5, r3
 8006acc:	68a3      	ldr	r3, [r4, #8]
 8006ace:	bf0c      	ite	eq
 8006ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad4:	2500      	movne	r5, #0
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	bfc4      	itt	gt
 8006ada:	1a9b      	subgt	r3, r3, r2
 8006adc:	18ed      	addgt	r5, r5, r3
 8006ade:	2600      	movs	r6, #0
 8006ae0:	341a      	adds	r4, #26
 8006ae2:	42b5      	cmp	r5, r6
 8006ae4:	d11a      	bne.n	8006b1c <_printf_common+0xc8>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	e008      	b.n	8006afc <_printf_common+0xa8>
 8006aea:	2301      	movs	r3, #1
 8006aec:	4652      	mov	r2, sl
 8006aee:	4649      	mov	r1, r9
 8006af0:	4638      	mov	r0, r7
 8006af2:	47c0      	blx	r8
 8006af4:	3001      	adds	r0, #1
 8006af6:	d103      	bne.n	8006b00 <_printf_common+0xac>
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295
 8006afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b00:	3501      	adds	r5, #1
 8006b02:	e7c6      	b.n	8006a92 <_printf_common+0x3e>
 8006b04:	18e1      	adds	r1, r4, r3
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	2030      	movs	r0, #48	; 0x30
 8006b0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b0e:	4422      	add	r2, r4
 8006b10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b18:	3302      	adds	r3, #2
 8006b1a:	e7c7      	b.n	8006aac <_printf_common+0x58>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	4622      	mov	r2, r4
 8006b20:	4649      	mov	r1, r9
 8006b22:	4638      	mov	r0, r7
 8006b24:	47c0      	blx	r8
 8006b26:	3001      	adds	r0, #1
 8006b28:	d0e6      	beq.n	8006af8 <_printf_common+0xa4>
 8006b2a:	3601      	adds	r6, #1
 8006b2c:	e7d9      	b.n	8006ae2 <_printf_common+0x8e>
	...

08006b30 <_printf_i>:
 8006b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b34:	7e0f      	ldrb	r7, [r1, #24]
 8006b36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b38:	2f78      	cmp	r7, #120	; 0x78
 8006b3a:	4691      	mov	r9, r2
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	469a      	mov	sl, r3
 8006b42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b46:	d807      	bhi.n	8006b58 <_printf_i+0x28>
 8006b48:	2f62      	cmp	r7, #98	; 0x62
 8006b4a:	d80a      	bhi.n	8006b62 <_printf_i+0x32>
 8006b4c:	2f00      	cmp	r7, #0
 8006b4e:	f000 80d4 	beq.w	8006cfa <_printf_i+0x1ca>
 8006b52:	2f58      	cmp	r7, #88	; 0x58
 8006b54:	f000 80c0 	beq.w	8006cd8 <_printf_i+0x1a8>
 8006b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b60:	e03a      	b.n	8006bd8 <_printf_i+0xa8>
 8006b62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b66:	2b15      	cmp	r3, #21
 8006b68:	d8f6      	bhi.n	8006b58 <_printf_i+0x28>
 8006b6a:	a101      	add	r1, pc, #4	; (adr r1, 8006b70 <_printf_i+0x40>)
 8006b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b70:	08006bc9 	.word	0x08006bc9
 8006b74:	08006bdd 	.word	0x08006bdd
 8006b78:	08006b59 	.word	0x08006b59
 8006b7c:	08006b59 	.word	0x08006b59
 8006b80:	08006b59 	.word	0x08006b59
 8006b84:	08006b59 	.word	0x08006b59
 8006b88:	08006bdd 	.word	0x08006bdd
 8006b8c:	08006b59 	.word	0x08006b59
 8006b90:	08006b59 	.word	0x08006b59
 8006b94:	08006b59 	.word	0x08006b59
 8006b98:	08006b59 	.word	0x08006b59
 8006b9c:	08006ce1 	.word	0x08006ce1
 8006ba0:	08006c09 	.word	0x08006c09
 8006ba4:	08006c9b 	.word	0x08006c9b
 8006ba8:	08006b59 	.word	0x08006b59
 8006bac:	08006b59 	.word	0x08006b59
 8006bb0:	08006d03 	.word	0x08006d03
 8006bb4:	08006b59 	.word	0x08006b59
 8006bb8:	08006c09 	.word	0x08006c09
 8006bbc:	08006b59 	.word	0x08006b59
 8006bc0:	08006b59 	.word	0x08006b59
 8006bc4:	08006ca3 	.word	0x08006ca3
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	1d1a      	adds	r2, r3, #4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	602a      	str	r2, [r5, #0]
 8006bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e09f      	b.n	8006d1c <_printf_i+0x1ec>
 8006bdc:	6820      	ldr	r0, [r4, #0]
 8006bde:	682b      	ldr	r3, [r5, #0]
 8006be0:	0607      	lsls	r7, r0, #24
 8006be2:	f103 0104 	add.w	r1, r3, #4
 8006be6:	6029      	str	r1, [r5, #0]
 8006be8:	d501      	bpl.n	8006bee <_printf_i+0xbe>
 8006bea:	681e      	ldr	r6, [r3, #0]
 8006bec:	e003      	b.n	8006bf6 <_printf_i+0xc6>
 8006bee:	0646      	lsls	r6, r0, #25
 8006bf0:	d5fb      	bpl.n	8006bea <_printf_i+0xba>
 8006bf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006bf6:	2e00      	cmp	r6, #0
 8006bf8:	da03      	bge.n	8006c02 <_printf_i+0xd2>
 8006bfa:	232d      	movs	r3, #45	; 0x2d
 8006bfc:	4276      	negs	r6, r6
 8006bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c02:	485a      	ldr	r0, [pc, #360]	; (8006d6c <_printf_i+0x23c>)
 8006c04:	230a      	movs	r3, #10
 8006c06:	e012      	b.n	8006c2e <_printf_i+0xfe>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	6820      	ldr	r0, [r4, #0]
 8006c0c:	1d19      	adds	r1, r3, #4
 8006c0e:	6029      	str	r1, [r5, #0]
 8006c10:	0605      	lsls	r5, r0, #24
 8006c12:	d501      	bpl.n	8006c18 <_printf_i+0xe8>
 8006c14:	681e      	ldr	r6, [r3, #0]
 8006c16:	e002      	b.n	8006c1e <_printf_i+0xee>
 8006c18:	0641      	lsls	r1, r0, #25
 8006c1a:	d5fb      	bpl.n	8006c14 <_printf_i+0xe4>
 8006c1c:	881e      	ldrh	r6, [r3, #0]
 8006c1e:	4853      	ldr	r0, [pc, #332]	; (8006d6c <_printf_i+0x23c>)
 8006c20:	2f6f      	cmp	r7, #111	; 0x6f
 8006c22:	bf0c      	ite	eq
 8006c24:	2308      	moveq	r3, #8
 8006c26:	230a      	movne	r3, #10
 8006c28:	2100      	movs	r1, #0
 8006c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c2e:	6865      	ldr	r5, [r4, #4]
 8006c30:	60a5      	str	r5, [r4, #8]
 8006c32:	2d00      	cmp	r5, #0
 8006c34:	bfa2      	ittt	ge
 8006c36:	6821      	ldrge	r1, [r4, #0]
 8006c38:	f021 0104 	bicge.w	r1, r1, #4
 8006c3c:	6021      	strge	r1, [r4, #0]
 8006c3e:	b90e      	cbnz	r6, 8006c44 <_printf_i+0x114>
 8006c40:	2d00      	cmp	r5, #0
 8006c42:	d04b      	beq.n	8006cdc <_printf_i+0x1ac>
 8006c44:	4615      	mov	r5, r2
 8006c46:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c4a:	fb03 6711 	mls	r7, r3, r1, r6
 8006c4e:	5dc7      	ldrb	r7, [r0, r7]
 8006c50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c54:	4637      	mov	r7, r6
 8006c56:	42bb      	cmp	r3, r7
 8006c58:	460e      	mov	r6, r1
 8006c5a:	d9f4      	bls.n	8006c46 <_printf_i+0x116>
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d10b      	bne.n	8006c78 <_printf_i+0x148>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	07de      	lsls	r6, r3, #31
 8006c64:	d508      	bpl.n	8006c78 <_printf_i+0x148>
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	6861      	ldr	r1, [r4, #4]
 8006c6a:	4299      	cmp	r1, r3
 8006c6c:	bfde      	ittt	le
 8006c6e:	2330      	movle	r3, #48	; 0x30
 8006c70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c78:	1b52      	subs	r2, r2, r5
 8006c7a:	6122      	str	r2, [r4, #16]
 8006c7c:	f8cd a000 	str.w	sl, [sp]
 8006c80:	464b      	mov	r3, r9
 8006c82:	aa03      	add	r2, sp, #12
 8006c84:	4621      	mov	r1, r4
 8006c86:	4640      	mov	r0, r8
 8006c88:	f7ff fee4 	bl	8006a54 <_printf_common>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d14a      	bne.n	8006d26 <_printf_i+0x1f6>
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295
 8006c94:	b004      	add	sp, #16
 8006c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	f043 0320 	orr.w	r3, r3, #32
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	4833      	ldr	r0, [pc, #204]	; (8006d70 <_printf_i+0x240>)
 8006ca4:	2778      	movs	r7, #120	; 0x78
 8006ca6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	6829      	ldr	r1, [r5, #0]
 8006cae:	061f      	lsls	r7, r3, #24
 8006cb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cb4:	d402      	bmi.n	8006cbc <_printf_i+0x18c>
 8006cb6:	065f      	lsls	r7, r3, #25
 8006cb8:	bf48      	it	mi
 8006cba:	b2b6      	uxthmi	r6, r6
 8006cbc:	07df      	lsls	r7, r3, #31
 8006cbe:	bf48      	it	mi
 8006cc0:	f043 0320 	orrmi.w	r3, r3, #32
 8006cc4:	6029      	str	r1, [r5, #0]
 8006cc6:	bf48      	it	mi
 8006cc8:	6023      	strmi	r3, [r4, #0]
 8006cca:	b91e      	cbnz	r6, 8006cd4 <_printf_i+0x1a4>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	f023 0320 	bic.w	r3, r3, #32
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	e7a7      	b.n	8006c28 <_printf_i+0xf8>
 8006cd8:	4824      	ldr	r0, [pc, #144]	; (8006d6c <_printf_i+0x23c>)
 8006cda:	e7e4      	b.n	8006ca6 <_printf_i+0x176>
 8006cdc:	4615      	mov	r5, r2
 8006cde:	e7bd      	b.n	8006c5c <_printf_i+0x12c>
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	6826      	ldr	r6, [r4, #0]
 8006ce4:	6961      	ldr	r1, [r4, #20]
 8006ce6:	1d18      	adds	r0, r3, #4
 8006ce8:	6028      	str	r0, [r5, #0]
 8006cea:	0635      	lsls	r5, r6, #24
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	d501      	bpl.n	8006cf4 <_printf_i+0x1c4>
 8006cf0:	6019      	str	r1, [r3, #0]
 8006cf2:	e002      	b.n	8006cfa <_printf_i+0x1ca>
 8006cf4:	0670      	lsls	r0, r6, #25
 8006cf6:	d5fb      	bpl.n	8006cf0 <_printf_i+0x1c0>
 8006cf8:	8019      	strh	r1, [r3, #0]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6123      	str	r3, [r4, #16]
 8006cfe:	4615      	mov	r5, r2
 8006d00:	e7bc      	b.n	8006c7c <_printf_i+0x14c>
 8006d02:	682b      	ldr	r3, [r5, #0]
 8006d04:	1d1a      	adds	r2, r3, #4
 8006d06:	602a      	str	r2, [r5, #0]
 8006d08:	681d      	ldr	r5, [r3, #0]
 8006d0a:	6862      	ldr	r2, [r4, #4]
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f7f9 fa66 	bl	80001e0 <memchr>
 8006d14:	b108      	cbz	r0, 8006d1a <_printf_i+0x1ea>
 8006d16:	1b40      	subs	r0, r0, r5
 8006d18:	6060      	str	r0, [r4, #4]
 8006d1a:	6863      	ldr	r3, [r4, #4]
 8006d1c:	6123      	str	r3, [r4, #16]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d24:	e7aa      	b.n	8006c7c <_printf_i+0x14c>
 8006d26:	6923      	ldr	r3, [r4, #16]
 8006d28:	462a      	mov	r2, r5
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	47d0      	blx	sl
 8006d30:	3001      	adds	r0, #1
 8006d32:	d0ad      	beq.n	8006c90 <_printf_i+0x160>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	079b      	lsls	r3, r3, #30
 8006d38:	d413      	bmi.n	8006d62 <_printf_i+0x232>
 8006d3a:	68e0      	ldr	r0, [r4, #12]
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	4298      	cmp	r0, r3
 8006d40:	bfb8      	it	lt
 8006d42:	4618      	movlt	r0, r3
 8006d44:	e7a6      	b.n	8006c94 <_printf_i+0x164>
 8006d46:	2301      	movs	r3, #1
 8006d48:	4632      	mov	r2, r6
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	47d0      	blx	sl
 8006d50:	3001      	adds	r0, #1
 8006d52:	d09d      	beq.n	8006c90 <_printf_i+0x160>
 8006d54:	3501      	adds	r5, #1
 8006d56:	68e3      	ldr	r3, [r4, #12]
 8006d58:	9903      	ldr	r1, [sp, #12]
 8006d5a:	1a5b      	subs	r3, r3, r1
 8006d5c:	42ab      	cmp	r3, r5
 8006d5e:	dcf2      	bgt.n	8006d46 <_printf_i+0x216>
 8006d60:	e7eb      	b.n	8006d3a <_printf_i+0x20a>
 8006d62:	2500      	movs	r5, #0
 8006d64:	f104 0619 	add.w	r6, r4, #25
 8006d68:	e7f5      	b.n	8006d56 <_printf_i+0x226>
 8006d6a:	bf00      	nop
 8006d6c:	0800725a 	.word	0x0800725a
 8006d70:	0800726b 	.word	0x0800726b

08006d74 <__swbuf_r>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	460e      	mov	r6, r1
 8006d78:	4614      	mov	r4, r2
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	b118      	cbz	r0, 8006d86 <__swbuf_r+0x12>
 8006d7e:	6a03      	ldr	r3, [r0, #32]
 8006d80:	b90b      	cbnz	r3, 8006d86 <__swbuf_r+0x12>
 8006d82:	f7fe fce5 	bl	8005750 <__sinit>
 8006d86:	69a3      	ldr	r3, [r4, #24]
 8006d88:	60a3      	str	r3, [r4, #8]
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	071a      	lsls	r2, r3, #28
 8006d8e:	d525      	bpl.n	8006ddc <__swbuf_r+0x68>
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	b31b      	cbz	r3, 8006ddc <__swbuf_r+0x68>
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	6922      	ldr	r2, [r4, #16]
 8006d98:	1a98      	subs	r0, r3, r2
 8006d9a:	6963      	ldr	r3, [r4, #20]
 8006d9c:	b2f6      	uxtb	r6, r6
 8006d9e:	4283      	cmp	r3, r0
 8006da0:	4637      	mov	r7, r6
 8006da2:	dc04      	bgt.n	8006dae <__swbuf_r+0x3a>
 8006da4:	4621      	mov	r1, r4
 8006da6:	4628      	mov	r0, r5
 8006da8:	f7ff fb16 	bl	80063d8 <_fflush_r>
 8006dac:	b9e0      	cbnz	r0, 8006de8 <__swbuf_r+0x74>
 8006dae:	68a3      	ldr	r3, [r4, #8]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	60a3      	str	r3, [r4, #8]
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	6022      	str	r2, [r4, #0]
 8006dba:	701e      	strb	r6, [r3, #0]
 8006dbc:	6962      	ldr	r2, [r4, #20]
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d004      	beq.n	8006dce <__swbuf_r+0x5a>
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	07db      	lsls	r3, r3, #31
 8006dc8:	d506      	bpl.n	8006dd8 <__swbuf_r+0x64>
 8006dca:	2e0a      	cmp	r6, #10
 8006dcc:	d104      	bne.n	8006dd8 <__swbuf_r+0x64>
 8006dce:	4621      	mov	r1, r4
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f7ff fb01 	bl	80063d8 <_fflush_r>
 8006dd6:	b938      	cbnz	r0, 8006de8 <__swbuf_r+0x74>
 8006dd8:	4638      	mov	r0, r7
 8006dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4628      	mov	r0, r5
 8006de0:	f000 f806 	bl	8006df0 <__swsetup_r>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d0d5      	beq.n	8006d94 <__swbuf_r+0x20>
 8006de8:	f04f 37ff 	mov.w	r7, #4294967295
 8006dec:	e7f4      	b.n	8006dd8 <__swbuf_r+0x64>
	...

08006df0 <__swsetup_r>:
 8006df0:	b538      	push	{r3, r4, r5, lr}
 8006df2:	4b2a      	ldr	r3, [pc, #168]	; (8006e9c <__swsetup_r+0xac>)
 8006df4:	4605      	mov	r5, r0
 8006df6:	6818      	ldr	r0, [r3, #0]
 8006df8:	460c      	mov	r4, r1
 8006dfa:	b118      	cbz	r0, 8006e04 <__swsetup_r+0x14>
 8006dfc:	6a03      	ldr	r3, [r0, #32]
 8006dfe:	b90b      	cbnz	r3, 8006e04 <__swsetup_r+0x14>
 8006e00:	f7fe fca6 	bl	8005750 <__sinit>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e0a:	0718      	lsls	r0, r3, #28
 8006e0c:	d422      	bmi.n	8006e54 <__swsetup_r+0x64>
 8006e0e:	06d9      	lsls	r1, r3, #27
 8006e10:	d407      	bmi.n	8006e22 <__swsetup_r+0x32>
 8006e12:	2309      	movs	r3, #9
 8006e14:	602b      	str	r3, [r5, #0]
 8006e16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e1a:	81a3      	strh	r3, [r4, #12]
 8006e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e20:	e034      	b.n	8006e8c <__swsetup_r+0x9c>
 8006e22:	0758      	lsls	r0, r3, #29
 8006e24:	d512      	bpl.n	8006e4c <__swsetup_r+0x5c>
 8006e26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e28:	b141      	cbz	r1, 8006e3c <__swsetup_r+0x4c>
 8006e2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e2e:	4299      	cmp	r1, r3
 8006e30:	d002      	beq.n	8006e38 <__swsetup_r+0x48>
 8006e32:	4628      	mov	r0, r5
 8006e34:	f7fe fe2a 	bl	8005a8c <_free_r>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	6363      	str	r3, [r4, #52]	; 0x34
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e42:	81a3      	strh	r3, [r4, #12]
 8006e44:	2300      	movs	r3, #0
 8006e46:	6063      	str	r3, [r4, #4]
 8006e48:	6923      	ldr	r3, [r4, #16]
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	f043 0308 	orr.w	r3, r3, #8
 8006e52:	81a3      	strh	r3, [r4, #12]
 8006e54:	6923      	ldr	r3, [r4, #16]
 8006e56:	b94b      	cbnz	r3, 8006e6c <__swsetup_r+0x7c>
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e62:	d003      	beq.n	8006e6c <__swsetup_r+0x7c>
 8006e64:	4621      	mov	r1, r4
 8006e66:	4628      	mov	r0, r5
 8006e68:	f000 f88c 	bl	8006f84 <__smakebuf_r>
 8006e6c:	89a0      	ldrh	r0, [r4, #12]
 8006e6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e72:	f010 0301 	ands.w	r3, r0, #1
 8006e76:	d00a      	beq.n	8006e8e <__swsetup_r+0x9e>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60a3      	str	r3, [r4, #8]
 8006e7c:	6963      	ldr	r3, [r4, #20]
 8006e7e:	425b      	negs	r3, r3
 8006e80:	61a3      	str	r3, [r4, #24]
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	b943      	cbnz	r3, 8006e98 <__swsetup_r+0xa8>
 8006e86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e8a:	d1c4      	bne.n	8006e16 <__swsetup_r+0x26>
 8006e8c:	bd38      	pop	{r3, r4, r5, pc}
 8006e8e:	0781      	lsls	r1, r0, #30
 8006e90:	bf58      	it	pl
 8006e92:	6963      	ldrpl	r3, [r4, #20]
 8006e94:	60a3      	str	r3, [r4, #8]
 8006e96:	e7f4      	b.n	8006e82 <__swsetup_r+0x92>
 8006e98:	2000      	movs	r0, #0
 8006e9a:	e7f7      	b.n	8006e8c <__swsetup_r+0x9c>
 8006e9c:	20000064 	.word	0x20000064

08006ea0 <_raise_r>:
 8006ea0:	291f      	cmp	r1, #31
 8006ea2:	b538      	push	{r3, r4, r5, lr}
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	460d      	mov	r5, r1
 8006ea8:	d904      	bls.n	8006eb4 <_raise_r+0x14>
 8006eaa:	2316      	movs	r3, #22
 8006eac:	6003      	str	r3, [r0, #0]
 8006eae:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006eb6:	b112      	cbz	r2, 8006ebe <_raise_r+0x1e>
 8006eb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ebc:	b94b      	cbnz	r3, 8006ed2 <_raise_r+0x32>
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f000 f830 	bl	8006f24 <_getpid_r>
 8006ec4:	462a      	mov	r2, r5
 8006ec6:	4601      	mov	r1, r0
 8006ec8:	4620      	mov	r0, r4
 8006eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ece:	f000 b817 	b.w	8006f00 <_kill_r>
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d00a      	beq.n	8006eec <_raise_r+0x4c>
 8006ed6:	1c59      	adds	r1, r3, #1
 8006ed8:	d103      	bne.n	8006ee2 <_raise_r+0x42>
 8006eda:	2316      	movs	r3, #22
 8006edc:	6003      	str	r3, [r0, #0]
 8006ede:	2001      	movs	r0, #1
 8006ee0:	e7e7      	b.n	8006eb2 <_raise_r+0x12>
 8006ee2:	2400      	movs	r4, #0
 8006ee4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ee8:	4628      	mov	r0, r5
 8006eea:	4798      	blx	r3
 8006eec:	2000      	movs	r0, #0
 8006eee:	e7e0      	b.n	8006eb2 <_raise_r+0x12>

08006ef0 <raise>:
 8006ef0:	4b02      	ldr	r3, [pc, #8]	; (8006efc <raise+0xc>)
 8006ef2:	4601      	mov	r1, r0
 8006ef4:	6818      	ldr	r0, [r3, #0]
 8006ef6:	f7ff bfd3 	b.w	8006ea0 <_raise_r>
 8006efa:	bf00      	nop
 8006efc:	20000064 	.word	0x20000064

08006f00 <_kill_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4d07      	ldr	r5, [pc, #28]	; (8006f20 <_kill_r+0x20>)
 8006f04:	2300      	movs	r3, #0
 8006f06:	4604      	mov	r4, r0
 8006f08:	4608      	mov	r0, r1
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	602b      	str	r3, [r5, #0]
 8006f0e:	f7fb f807 	bl	8001f20 <_kill>
 8006f12:	1c43      	adds	r3, r0, #1
 8006f14:	d102      	bne.n	8006f1c <_kill_r+0x1c>
 8006f16:	682b      	ldr	r3, [r5, #0]
 8006f18:	b103      	cbz	r3, 8006f1c <_kill_r+0x1c>
 8006f1a:	6023      	str	r3, [r4, #0]
 8006f1c:	bd38      	pop	{r3, r4, r5, pc}
 8006f1e:	bf00      	nop
 8006f20:	200001c4 	.word	0x200001c4

08006f24 <_getpid_r>:
 8006f24:	f7fa bff4 	b.w	8001f10 <_getpid>

08006f28 <_malloc_usable_size_r>:
 8006f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2c:	1f18      	subs	r0, r3, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bfbc      	itt	lt
 8006f32:	580b      	ldrlt	r3, [r1, r0]
 8006f34:	18c0      	addlt	r0, r0, r3
 8006f36:	4770      	bx	lr

08006f38 <__swhatbuf_r>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f40:	2900      	cmp	r1, #0
 8006f42:	b096      	sub	sp, #88	; 0x58
 8006f44:	4615      	mov	r5, r2
 8006f46:	461e      	mov	r6, r3
 8006f48:	da0d      	bge.n	8006f66 <__swhatbuf_r+0x2e>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f50:	f04f 0100 	mov.w	r1, #0
 8006f54:	bf0c      	ite	eq
 8006f56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006f5a:	2340      	movne	r3, #64	; 0x40
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	6031      	str	r1, [r6, #0]
 8006f60:	602b      	str	r3, [r5, #0]
 8006f62:	b016      	add	sp, #88	; 0x58
 8006f64:	bd70      	pop	{r4, r5, r6, pc}
 8006f66:	466a      	mov	r2, sp
 8006f68:	f000 f848 	bl	8006ffc <_fstat_r>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	dbec      	blt.n	8006f4a <__swhatbuf_r+0x12>
 8006f70:	9901      	ldr	r1, [sp, #4]
 8006f72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006f76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006f7a:	4259      	negs	r1, r3
 8006f7c:	4159      	adcs	r1, r3
 8006f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f82:	e7eb      	b.n	8006f5c <__swhatbuf_r+0x24>

08006f84 <__smakebuf_r>:
 8006f84:	898b      	ldrh	r3, [r1, #12]
 8006f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f88:	079d      	lsls	r5, r3, #30
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	d507      	bpl.n	8006fa0 <__smakebuf_r+0x1c>
 8006f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	6123      	str	r3, [r4, #16]
 8006f98:	2301      	movs	r3, #1
 8006f9a:	6163      	str	r3, [r4, #20]
 8006f9c:	b002      	add	sp, #8
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	ab01      	add	r3, sp, #4
 8006fa2:	466a      	mov	r2, sp
 8006fa4:	f7ff ffc8 	bl	8006f38 <__swhatbuf_r>
 8006fa8:	9900      	ldr	r1, [sp, #0]
 8006faa:	4605      	mov	r5, r0
 8006fac:	4630      	mov	r0, r6
 8006fae:	f7fe fde1 	bl	8005b74 <_malloc_r>
 8006fb2:	b948      	cbnz	r0, 8006fc8 <__smakebuf_r+0x44>
 8006fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fb8:	059a      	lsls	r2, r3, #22
 8006fba:	d4ef      	bmi.n	8006f9c <__smakebuf_r+0x18>
 8006fbc:	f023 0303 	bic.w	r3, r3, #3
 8006fc0:	f043 0302 	orr.w	r3, r3, #2
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	e7e3      	b.n	8006f90 <__smakebuf_r+0xc>
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	6020      	str	r0, [r4, #0]
 8006fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd0:	81a3      	strh	r3, [r4, #12]
 8006fd2:	9b00      	ldr	r3, [sp, #0]
 8006fd4:	6163      	str	r3, [r4, #20]
 8006fd6:	9b01      	ldr	r3, [sp, #4]
 8006fd8:	6120      	str	r0, [r4, #16]
 8006fda:	b15b      	cbz	r3, 8006ff4 <__smakebuf_r+0x70>
 8006fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	f000 f81d 	bl	8007020 <_isatty_r>
 8006fe6:	b128      	cbz	r0, 8006ff4 <__smakebuf_r+0x70>
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	f043 0301 	orr.w	r3, r3, #1
 8006ff2:	81a3      	strh	r3, [r4, #12]
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	431d      	orrs	r5, r3
 8006ff8:	81a5      	strh	r5, [r4, #12]
 8006ffa:	e7cf      	b.n	8006f9c <__smakebuf_r+0x18>

08006ffc <_fstat_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d07      	ldr	r5, [pc, #28]	; (800701c <_fstat_r+0x20>)
 8007000:	2300      	movs	r3, #0
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	4611      	mov	r1, r2
 8007008:	602b      	str	r3, [r5, #0]
 800700a:	f7fa ffe8 	bl	8001fde <_fstat>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d102      	bne.n	8007018 <_fstat_r+0x1c>
 8007012:	682b      	ldr	r3, [r5, #0]
 8007014:	b103      	cbz	r3, 8007018 <_fstat_r+0x1c>
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	bd38      	pop	{r3, r4, r5, pc}
 800701a:	bf00      	nop
 800701c:	200001c4 	.word	0x200001c4

08007020 <_isatty_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d06      	ldr	r5, [pc, #24]	; (800703c <_isatty_r+0x1c>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7fa ffe7 	bl	8001ffe <_isatty>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_isatty_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_isatty_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	200001c4 	.word	0x200001c4

08007040 <_init>:
 8007040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007042:	bf00      	nop
 8007044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007046:	bc08      	pop	{r3}
 8007048:	469e      	mov	lr, r3
 800704a:	4770      	bx	lr

0800704c <_fini>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	bf00      	nop
 8007050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007052:	bc08      	pop	{r3}
 8007054:	469e      	mov	lr, r3
 8007056:	4770      	bx	lr
